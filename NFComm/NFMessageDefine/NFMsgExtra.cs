// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NFMsgExtra.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgExtra.proto</summary>
  public static partial class NFMsgExtraReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgExtra.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgExtraReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBORk1zZ0V4dHJhLnByb3RvEgVORk1zZxoPTkZNc2dCYXNlLnByb3RvIikK",
            "ClJlcUFJT253ZXISGwoFYWlfaWQYASABKAsyDC5ORk1zZy5JZGVudCJqChBH",
            "cmlkQ2xhbkJhc2VJbmZvEhgKAmlkGAEgASgLMgwuTkZNc2cuSWRlbnQSDQoF",
            "bGV2ZWwYAiABKAUSDQoFY291bnQYAyABKAUSEAoIcmVzb3VyY2UYBCABKAUS",
            "DAoEaWNvbhgFIAEoDCIpChFSZXFCaWdNYXBHcmlkSW5mbxIUCgxtYXBfdGl0",
            "bGVfaWQYASADKAwiuQEKEkJpZ01hcEdyaWRCYXNlSW5mbxIKCgJpZBgBIAEo",
            "DBIrCgpndWlsZF9pbmZvGAIgASgLMhcuTkZNc2cuR3JpZENsYW5CYXNlSW5m",
            "bxIUCgxraW5nd2FyX3RpbWUYCiABKAUSIAoKa2luZ3dhcnJlchgLIAEoCzIM",
            "Lk5GTXNnLklkZW50EhQKDGh1cnRpbmdfdGltZRgUIAEoBRIcCgZodXJ0ZXIY",
            "FSABKAsyDC5ORk1zZy5JZGVudCJ6Cg5CaWdNYXBMZWF2ZU1zZxIbCgVvd25l",
            "chgBIAEoCzIMLk5GTXNnLklkZW50EhIKCm93bmVyX25hbWUYAiABKAwSEAoI",
            "bXNnX2RhdGEYAyABKAwSEAoIbXNnX3RpbWUYBCABKAUSEwoLb3duZXJfbGV2",
            "ZWwYBSABKAUinAEKEEJpZ01hcFdhckhpc3RvcnkSKQoIcmVkX2luZm8YASAB",
            "KAsyFy5ORk1zZy5HcmlkQ2xhbkJhc2VJbmZvEioKCWJsdWVfaW5mbxgCIAEo",
            "CzIXLk5GTXNnLkdyaWRDbGFuQmFzZUluZm8SHwoJd2lubmVyX2lkGAogASgL",
            "MgwuTkZNc2cuSWRlbnQSEAoId2FyX3RpbWUYCyABKAUi0gEKFEJpZ01hcEdy",
            "aWREZXRhaWxJbmZvEjEKDmdyaWRfYmFzZV9pbmZvGAEgASgLMhkuTkZNc2cu",
            "QmlnTWFwR3JpZEJhc2VJbmZvEi8KDnN0YXlfZ3VpZF9saXN0GAIgAygLMhcu",
            "TkZNc2cuR3JpZENsYW5CYXNlSW5mbxIoCglsZWF2ZV9tc2cYAyADKAsyFS5O",
            "Rk1zZy5CaWdNYXBMZWF2ZU1zZxIsCgt3YXJfaGlzdG9yeRgEIAMoCzIXLk5G",
            "TXNnLkJpZ01hcFdhckhpc3RvcnkiQgoRQWNrQmlnTWFwR3JpZEluZm8SLQoI",
            "bWFwX2RhdGEYASADKAsyGy5ORk1zZy5CaWdNYXBHcmlkRGV0YWlsSW5mbyIP",
            "Cg1SZXFCaWdNYXBJbmZvIkIKDUFja0JpZ01hcEluZm8SMQoOZ3JpZF9iYXNl",
            "X2luZm8YASADKAsyGS5ORk1zZy5CaWdNYXBHcmlkQmFzZUluZm8iRgoOUmVx",
            "SG9sZE1hcEdyaWQSFAoMbWFwX3RpdGxlX2lkGAEgASgMEh4KCGd1aWxkX2lk",
            "GAIgASgLMgwuTkZNc2cuSWRlbnQiEAoOQWNrSG9sZE1hcEdyaWQiUAoOUmVx",
            "TGVhdmVNYXBNc2cSFAoMbWFwX3RpdGxlX2lkGAEgASgMEigKCWxlYXZlX21z",
            "ZxgCIAEoCzIVLk5GTXNnLkJpZ01hcExlYXZlTXNnIhAKDkFja0xlYXZlTWFw",
            "TXNnIiYKDlJlcUdldE1hcEF3YXJkEhQKDG1hcF90aXRsZV9pZBgBIAEoDCIQ",
            "Cg5BY2tHZXRNYXBBd2FyZCIlCg1SZXFNYXBIdW50aW5nEhQKDG1hcF90aXRs",
            "ZV9pZBgBIAEoDCIPCg1BY2tNYXBIdW50aW5nIiIKDVJlcU1hcEtpbmdXYXIS",
            "EQoJbWFwX3RpdGxlGAEgASgMIiIKDUFja01hcEtpbmdXYXISEQoJbWFwX3Rp",
            "dGxlGAEgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAIOnwer), global::NFMsg.ReqAIOnwer.Parser, new[]{ "AiId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.GridClanBaseInfo), global::NFMsg.GridClanBaseInfo.Parser, new[]{ "Id", "Level", "Count", "Resource", "Icon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBigMapGridInfo), global::NFMsg.ReqBigMapGridInfo.Parser, new[]{ "MapTitleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapGridBaseInfo), global::NFMsg.BigMapGridBaseInfo.Parser, new[]{ "Id", "GuildInfo", "KingwarTime", "Kingwarrer", "HurtingTime", "Hurter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapLeaveMsg), global::NFMsg.BigMapLeaveMsg.Parser, new[]{ "Owner", "OwnerName", "MsgData", "MsgTime", "OwnerLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapWarHistory), global::NFMsg.BigMapWarHistory.Parser, new[]{ "RedInfo", "BlueInfo", "WinnerId", "WarTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.BigMapGridDetailInfo), global::NFMsg.BigMapGridDetailInfo.Parser, new[]{ "GridBaseInfo", "StayGuidList", "LeaveMsg", "WarHistory" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckBigMapGridInfo), global::NFMsg.AckBigMapGridInfo.Parser, new[]{ "MapData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBigMapInfo), global::NFMsg.ReqBigMapInfo.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckBigMapInfo), global::NFMsg.AckBigMapInfo.Parser, new[]{ "GridBaseInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqHoldMapGrid), global::NFMsg.ReqHoldMapGrid.Parser, new[]{ "MapTitleId", "GuildId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckHoldMapGrid), global::NFMsg.AckHoldMapGrid.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqLeaveMapMsg), global::NFMsg.ReqLeaveMapMsg.Parser, new[]{ "MapTitleId", "LeaveMsg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckLeaveMapMsg), global::NFMsg.AckLeaveMapMsg.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqGetMapAward), global::NFMsg.ReqGetMapAward.Parser, new[]{ "MapTitleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckGetMapAward), global::NFMsg.AckGetMapAward.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqMapHunting), global::NFMsg.ReqMapHunting.Parser, new[]{ "MapTitleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckMapHunting), global::NFMsg.AckMapHunting.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqMapKingWar), global::NFMsg.ReqMapKingWar.Parser, new[]{ "MapTitle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckMapKingWar), global::NFMsg.AckMapKingWar.Parser, new[]{ "MapTitle" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ////////////////AI/////////////////////////////////////////////////////////////////////////////////////
  ///EGMI_REQ_AI_ONWER
  /// </summary>
  public sealed partial class ReqAIOnwer : pb::IMessage<ReqAIOnwer> {
    private static readonly pb::MessageParser<ReqAIOnwer> _parser = new pb::MessageParser<ReqAIOnwer>(() => new ReqAIOnwer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAIOnwer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer(ReqAIOnwer other) : this() {
      aiId_ = other.aiId_ != null ? other.aiId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAIOnwer Clone() {
      return new ReqAIOnwer(this);
    }

    /// <summary>Field number for the "ai_id" field.</summary>
    public const int AiIdFieldNumber = 1;
    private global::NFMsg.Ident aiId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident AiId {
      get { return aiId_; }
      set {
        aiId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAIOnwer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAIOnwer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AiId, other.AiId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (aiId_ != null) hash ^= AiId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (aiId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AiId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (aiId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AiId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAIOnwer other) {
      if (other == null) {
        return;
      }
      if (other.aiId_ != null) {
        if (aiId_ == null) {
          AiId = new global::NFMsg.Ident();
        }
        AiId.MergeFrom(other.AiId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (aiId_ == null) {
              AiId = new global::NFMsg.Ident();
            }
            input.ReadMessage(AiId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////big map/////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class GridClanBaseInfo : pb::IMessage<GridClanBaseInfo> {
    private static readonly pb::MessageParser<GridClanBaseInfo> _parser = new pb::MessageParser<GridClanBaseInfo>(() => new GridClanBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GridClanBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo(GridClanBaseInfo other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      level_ = other.level_;
      count_ = other.count_;
      resource_ = other.resource_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridClanBaseInfo Clone() {
      return new GridClanBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::NFMsg.Ident id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///Level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    ///人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 4;
    private int resource_;
    /// <summary>
    ///资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 5;
    private pb::ByteString icon_ = pb::ByteString.Empty;
    /// <summary>
    ///Icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GridClanBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GridClanBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Level != other.Level) return false;
      if (Count != other.Count) return false;
      if (Resource != other.Resource) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Resource != 0) hash ^= Resource.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (Resource != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Resource);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Resource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resource);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GridClanBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::NFMsg.Ident();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Resource != 0) {
        Resource = other.Resource;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::NFMsg.Ident();
            }
            input.ReadMessage(Id);
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            Resource = input.ReadInt32();
            break;
          }
          case 42: {
            Icon = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_INFO
  /// </summary>
  public sealed partial class ReqBigMapGridInfo : pb::IMessage<ReqBigMapGridInfo> {
    private static readonly pb::MessageParser<ReqBigMapGridInfo> _parser = new pb::MessageParser<ReqBigMapGridInfo>(() => new ReqBigMapGridInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo(ReqBigMapGridInfo other) : this() {
      mapTitleId_ = other.mapTitleId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapGridInfo Clone() {
      return new ReqBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_mapTitleId_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> mapTitleId_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> MapTitleId {
      get { return mapTitleId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapTitleId_.Equals(other.mapTitleId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapTitleId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapTitleId_.WriteTo(output, _repeated_mapTitleId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapTitleId_.CalculateSize(_repeated_mapTitleId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBigMapGridInfo other) {
      if (other == null) {
        return;
      }
      mapTitleId_.Add(other.mapTitleId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mapTitleId_.AddEntriesFrom(input, _repeated_mapTitleId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridBaseInfo : pb::IMessage<BigMapGridBaseInfo> {
    private static readonly pb::MessageParser<BigMapGridBaseInfo> _parser = new pb::MessageParser<BigMapGridBaseInfo>(() => new BigMapGridBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo(BigMapGridBaseInfo other) : this() {
      id_ = other.id_;
      guildInfo_ = other.guildInfo_ != null ? other.guildInfo_.Clone() : null;
      kingwarTime_ = other.kingwarTime_;
      kingwarrer_ = other.kingwarrer_ != null ? other.kingwarrer_.Clone() : null;
      hurtingTime_ = other.hurtingTime_;
      hurter_ = other.hurter_ != null ? other.hurter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridBaseInfo Clone() {
      return new BigMapGridBaseInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    ///GridID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_info" field.</summary>
    public const int GuildInfoFieldNumber = 2;
    private global::NFMsg.GridClanBaseInfo guildInfo_;
    /// <summary>
    ///所属占领公会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo GuildInfo {
      get { return guildInfo_; }
      set {
        guildInfo_ = value;
      }
    }

    /// <summary>Field number for the "kingwar_time" field.</summary>
    public const int KingwarTimeFieldNumber = 10;
    private int kingwarTime_;
    /// <summary>
    ///kingwar
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KingwarTime {
      get { return kingwarTime_; }
      set {
        kingwarTime_ = value;
      }
    }

    /// <summary>Field number for the "kingwarrer" field.</summary>
    public const int KingwarrerFieldNumber = 11;
    private global::NFMsg.Ident kingwarrer_;
    /// <summary>
    ///发动者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Kingwarrer {
      get { return kingwarrer_; }
      set {
        kingwarrer_ = value;
      }
    }

    /// <summary>Field number for the "hurting_time" field.</summary>
    public const int HurtingTimeFieldNumber = 20;
    private int hurtingTime_;
    /// <summary>
    ///hurting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HurtingTime {
      get { return hurtingTime_; }
      set {
        hurtingTime_ = value;
      }
    }

    /// <summary>Field number for the "hurter" field.</summary>
    public const int HurterFieldNumber = 21;
    private global::NFMsg.Ident hurter_;
    /// <summary>
    ///狩猎者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Hurter {
      get { return hurter_; }
      set {
        hurter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(GuildInfo, other.GuildInfo)) return false;
      if (KingwarTime != other.KingwarTime) return false;
      if (!object.Equals(Kingwarrer, other.Kingwarrer)) return false;
      if (HurtingTime != other.HurtingTime) return false;
      if (!object.Equals(Hurter, other.Hurter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (guildInfo_ != null) hash ^= GuildInfo.GetHashCode();
      if (KingwarTime != 0) hash ^= KingwarTime.GetHashCode();
      if (kingwarrer_ != null) hash ^= Kingwarrer.GetHashCode();
      if (HurtingTime != 0) hash ^= HurtingTime.GetHashCode();
      if (hurter_ != null) hash ^= Hurter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (guildInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuildInfo);
      }
      if (KingwarTime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(KingwarTime);
      }
      if (kingwarrer_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Kingwarrer);
      }
      if (HurtingTime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(HurtingTime);
      }
      if (hurter_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Hurter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (guildInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildInfo);
      }
      if (KingwarTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KingwarTime);
      }
      if (kingwarrer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kingwarrer);
      }
      if (HurtingTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HurtingTime);
      }
      if (hurter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hurter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapGridBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.guildInfo_ != null) {
        if (guildInfo_ == null) {
          GuildInfo = new global::NFMsg.GridClanBaseInfo();
        }
        GuildInfo.MergeFrom(other.GuildInfo);
      }
      if (other.KingwarTime != 0) {
        KingwarTime = other.KingwarTime;
      }
      if (other.kingwarrer_ != null) {
        if (kingwarrer_ == null) {
          Kingwarrer = new global::NFMsg.Ident();
        }
        Kingwarrer.MergeFrom(other.Kingwarrer);
      }
      if (other.HurtingTime != 0) {
        HurtingTime = other.HurtingTime;
      }
      if (other.hurter_ != null) {
        if (hurter_ == null) {
          Hurter = new global::NFMsg.Ident();
        }
        Hurter.MergeFrom(other.Hurter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            if (guildInfo_ == null) {
              GuildInfo = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(GuildInfo);
            break;
          }
          case 80: {
            KingwarTime = input.ReadInt32();
            break;
          }
          case 90: {
            if (kingwarrer_ == null) {
              Kingwarrer = new global::NFMsg.Ident();
            }
            input.ReadMessage(Kingwarrer);
            break;
          }
          case 160: {
            HurtingTime = input.ReadInt32();
            break;
          }
          case 170: {
            if (hurter_ == null) {
              Hurter = new global::NFMsg.Ident();
            }
            input.ReadMessage(Hurter);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapLeaveMsg : pb::IMessage<BigMapLeaveMsg> {
    private static readonly pb::MessageParser<BigMapLeaveMsg> _parser = new pb::MessageParser<BigMapLeaveMsg>(() => new BigMapLeaveMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapLeaveMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg(BigMapLeaveMsg other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      ownerName_ = other.ownerName_;
      msgData_ = other.msgData_;
      msgTime_ = other.msgTime_;
      ownerLevel_ = other.ownerLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapLeaveMsg Clone() {
      return new BigMapLeaveMsg(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::NFMsg.Ident owner_;
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 2;
    private pb::ByteString ownerName_ = pb::ByteString.Empty;
    /// <summary>
    ///留言者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_data" field.</summary>
    public const int MsgDataFieldNumber = 3;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    /// <summary>
    ///留言内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MsgData {
      get { return msgData_; }
      set {
        msgData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_time" field.</summary>
    public const int MsgTimeFieldNumber = 4;
    private int msgTime_;
    /// <summary>
    ///留言时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MsgTime {
      get { return msgTime_; }
      set {
        msgTime_ = value;
      }
    }

    /// <summary>Field number for the "owner_level" field.</summary>
    public const int OwnerLevelFieldNumber = 5;
    private int ownerLevel_;
    /// <summary>
    ///留言时level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerLevel {
      get { return ownerLevel_; }
      set {
        ownerLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapLeaveMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapLeaveMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (OwnerName != other.OwnerName) return false;
      if (MsgData != other.MsgData) return false;
      if (MsgTime != other.MsgTime) return false;
      if (OwnerLevel != other.OwnerLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (MsgData.Length != 0) hash ^= MsgData.GetHashCode();
      if (MsgTime != 0) hash ^= MsgTime.GetHashCode();
      if (OwnerLevel != 0) hash ^= OwnerLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OwnerName);
      }
      if (MsgData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MsgData);
      }
      if (MsgTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MsgTime);
      }
      if (OwnerLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OwnerLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerName);
      }
      if (MsgData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MsgData);
      }
      if (MsgTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgTime);
      }
      if (OwnerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapLeaveMsg other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::NFMsg.Ident();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.OwnerName.Length != 0) {
        OwnerName = other.OwnerName;
      }
      if (other.MsgData.Length != 0) {
        MsgData = other.MsgData;
      }
      if (other.MsgTime != 0) {
        MsgTime = other.MsgTime;
      }
      if (other.OwnerLevel != 0) {
        OwnerLevel = other.OwnerLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::NFMsg.Ident();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            OwnerName = input.ReadBytes();
            break;
          }
          case 26: {
            MsgData = input.ReadBytes();
            break;
          }
          case 32: {
            MsgTime = input.ReadInt32();
            break;
          }
          case 40: {
            OwnerLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapWarHistory : pb::IMessage<BigMapWarHistory> {
    private static readonly pb::MessageParser<BigMapWarHistory> _parser = new pb::MessageParser<BigMapWarHistory>(() => new BigMapWarHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapWarHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory(BigMapWarHistory other) : this() {
      redInfo_ = other.redInfo_ != null ? other.redInfo_.Clone() : null;
      blueInfo_ = other.blueInfo_ != null ? other.blueInfo_.Clone() : null;
      winnerId_ = other.winnerId_ != null ? other.winnerId_.Clone() : null;
      warTime_ = other.warTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapWarHistory Clone() {
      return new BigMapWarHistory(this);
    }

    /// <summary>Field number for the "red_info" field.</summary>
    public const int RedInfoFieldNumber = 1;
    private global::NFMsg.GridClanBaseInfo redInfo_;
    /// <summary>
    ///红方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo RedInfo {
      get { return redInfo_; }
      set {
        redInfo_ = value;
      }
    }

    /// <summary>Field number for the "blue_info" field.</summary>
    public const int BlueInfoFieldNumber = 2;
    private global::NFMsg.GridClanBaseInfo blueInfo_;
    /// <summary>
    ///蓝方	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.GridClanBaseInfo BlueInfo {
      get { return blueInfo_; }
      set {
        blueInfo_ = value;
      }
    }

    /// <summary>Field number for the "winner_id" field.</summary>
    public const int WinnerIdFieldNumber = 10;
    private global::NFMsg.Ident winnerId_;
    /// <summary>
    ///winner
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = value;
      }
    }

    /// <summary>Field number for the "war_time" field.</summary>
    public const int WarTimeFieldNumber = 11;
    private int warTime_;
    /// <summary>
    ///war时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WarTime {
      get { return warTime_; }
      set {
        warTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapWarHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapWarHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RedInfo, other.RedInfo)) return false;
      if (!object.Equals(BlueInfo, other.BlueInfo)) return false;
      if (!object.Equals(WinnerId, other.WinnerId)) return false;
      if (WarTime != other.WarTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (redInfo_ != null) hash ^= RedInfo.GetHashCode();
      if (blueInfo_ != null) hash ^= BlueInfo.GetHashCode();
      if (winnerId_ != null) hash ^= WinnerId.GetHashCode();
      if (WarTime != 0) hash ^= WarTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (redInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RedInfo);
      }
      if (blueInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlueInfo);
      }
      if (winnerId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WinnerId);
      }
      if (WarTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(WarTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (redInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedInfo);
      }
      if (blueInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlueInfo);
      }
      if (winnerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WinnerId);
      }
      if (WarTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WarTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapWarHistory other) {
      if (other == null) {
        return;
      }
      if (other.redInfo_ != null) {
        if (redInfo_ == null) {
          RedInfo = new global::NFMsg.GridClanBaseInfo();
        }
        RedInfo.MergeFrom(other.RedInfo);
      }
      if (other.blueInfo_ != null) {
        if (blueInfo_ == null) {
          BlueInfo = new global::NFMsg.GridClanBaseInfo();
        }
        BlueInfo.MergeFrom(other.BlueInfo);
      }
      if (other.winnerId_ != null) {
        if (winnerId_ == null) {
          WinnerId = new global::NFMsg.Ident();
        }
        WinnerId.MergeFrom(other.WinnerId);
      }
      if (other.WarTime != 0) {
        WarTime = other.WarTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (redInfo_ == null) {
              RedInfo = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(RedInfo);
            break;
          }
          case 18: {
            if (blueInfo_ == null) {
              BlueInfo = new global::NFMsg.GridClanBaseInfo();
            }
            input.ReadMessage(BlueInfo);
            break;
          }
          case 82: {
            if (winnerId_ == null) {
              WinnerId = new global::NFMsg.Ident();
            }
            input.ReadMessage(WinnerId);
            break;
          }
          case 88: {
            WarTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BigMapGridDetailInfo : pb::IMessage<BigMapGridDetailInfo> {
    private static readonly pb::MessageParser<BigMapGridDetailInfo> _parser = new pb::MessageParser<BigMapGridDetailInfo>(() => new BigMapGridDetailInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BigMapGridDetailInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo(BigMapGridDetailInfo other) : this() {
      gridBaseInfo_ = other.gridBaseInfo_ != null ? other.gridBaseInfo_.Clone() : null;
      stayGuidList_ = other.stayGuidList_.Clone();
      leaveMsg_ = other.leaveMsg_.Clone();
      warHistory_ = other.warHistory_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BigMapGridDetailInfo Clone() {
      return new BigMapGridDetailInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int GridBaseInfoFieldNumber = 1;
    private global::NFMsg.BigMapGridBaseInfo gridBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.BigMapGridBaseInfo GridBaseInfo {
      get { return gridBaseInfo_; }
      set {
        gridBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "stay_guid_list" field.</summary>
    public const int StayGuidListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.GridClanBaseInfo> _repeated_stayGuidList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.GridClanBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.GridClanBaseInfo> stayGuidList_ = new pbc::RepeatedField<global::NFMsg.GridClanBaseInfo>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.GridClanBaseInfo> StayGuidList {
      get { return stayGuidList_; }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int LeaveMsgFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapLeaveMsg> _repeated_leaveMsg_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.BigMapLeaveMsg.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg> leaveMsg_ = new pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg>();
    /// <summary>
    ///此地图留言(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapLeaveMsg> LeaveMsg {
      get { return leaveMsg_; }
    }

    /// <summary>Field number for the "war_history" field.</summary>
    public const int WarHistoryFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapWarHistory> _repeated_warHistory_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.BigMapWarHistory.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapWarHistory> warHistory_ = new pbc::RepeatedField<global::NFMsg.BigMapWarHistory>();
    /// <summary>
    ///此地图历史战争信息(&lt;=10)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapWarHistory> WarHistory {
      get { return warHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BigMapGridDetailInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BigMapGridDetailInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GridBaseInfo, other.GridBaseInfo)) return false;
      if(!stayGuidList_.Equals(other.stayGuidList_)) return false;
      if(!leaveMsg_.Equals(other.leaveMsg_)) return false;
      if(!warHistory_.Equals(other.warHistory_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gridBaseInfo_ != null) hash ^= GridBaseInfo.GetHashCode();
      hash ^= stayGuidList_.GetHashCode();
      hash ^= leaveMsg_.GetHashCode();
      hash ^= warHistory_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gridBaseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GridBaseInfo);
      }
      stayGuidList_.WriteTo(output, _repeated_stayGuidList_codec);
      leaveMsg_.WriteTo(output, _repeated_leaveMsg_codec);
      warHistory_.WriteTo(output, _repeated_warHistory_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gridBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GridBaseInfo);
      }
      size += stayGuidList_.CalculateSize(_repeated_stayGuidList_codec);
      size += leaveMsg_.CalculateSize(_repeated_leaveMsg_codec);
      size += warHistory_.CalculateSize(_repeated_warHistory_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BigMapGridDetailInfo other) {
      if (other == null) {
        return;
      }
      if (other.gridBaseInfo_ != null) {
        if (gridBaseInfo_ == null) {
          GridBaseInfo = new global::NFMsg.BigMapGridBaseInfo();
        }
        GridBaseInfo.MergeFrom(other.GridBaseInfo);
      }
      stayGuidList_.Add(other.stayGuidList_);
      leaveMsg_.Add(other.leaveMsg_);
      warHistory_.Add(other.warHistory_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gridBaseInfo_ == null) {
              GridBaseInfo = new global::NFMsg.BigMapGridBaseInfo();
            }
            input.ReadMessage(GridBaseInfo);
            break;
          }
          case 18: {
            stayGuidList_.AddEntriesFrom(input, _repeated_stayGuidList_codec);
            break;
          }
          case 26: {
            leaveMsg_.AddEntriesFrom(input, _repeated_leaveMsg_codec);
            break;
          }
          case 34: {
            warHistory_.AddEntriesFrom(input, _repeated_warHistory_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_INFO
  /// </summary>
  public sealed partial class AckBigMapGridInfo : pb::IMessage<AckBigMapGridInfo> {
    private static readonly pb::MessageParser<AckBigMapGridInfo> _parser = new pb::MessageParser<AckBigMapGridInfo>(() => new AckBigMapGridInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapGridInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo(AckBigMapGridInfo other) : this() {
      mapData_ = other.mapData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapGridInfo Clone() {
      return new AckBigMapGridInfo(this);
    }

    /// <summary>Field number for the "map_data" field.</summary>
    public const int MapDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapGridDetailInfo> _repeated_mapData_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.BigMapGridDetailInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo> mapData_ = new pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapGridDetailInfo> MapData {
      get { return mapData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapGridInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapGridInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mapData_.Equals(other.mapData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mapData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mapData_.WriteTo(output, _repeated_mapData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mapData_.CalculateSize(_repeated_mapData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckBigMapGridInfo other) {
      if (other == null) {
        return;
      }
      mapData_.Add(other.mapData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mapData_.AddEntriesFrom(input, _repeated_mapData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_BIG_MAP_GRID
  /// </summary>
  public sealed partial class ReqBigMapInfo : pb::IMessage<ReqBigMapInfo> {
    private static readonly pb::MessageParser<ReqBigMapInfo> _parser = new pb::MessageParser<ReqBigMapInfo>(() => new ReqBigMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo(ReqBigMapInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBigMapInfo Clone() {
      return new ReqBigMapInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBigMapInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_BIG_MAP_GRID
  /// </summary>
  public sealed partial class AckBigMapInfo : pb::IMessage<AckBigMapInfo> {
    private static readonly pb::MessageParser<AckBigMapInfo> _parser = new pb::MessageParser<AckBigMapInfo>(() => new AckBigMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckBigMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo(AckBigMapInfo other) : this() {
      gridBaseInfo_ = other.gridBaseInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckBigMapInfo Clone() {
      return new AckBigMapInfo(this);
    }

    /// <summary>Field number for the "grid_base_info" field.</summary>
    public const int GridBaseInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.BigMapGridBaseInfo> _repeated_gridBaseInfo_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.BigMapGridBaseInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo> gridBaseInfo_ = new pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.BigMapGridBaseInfo> GridBaseInfo {
      get { return gridBaseInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckBigMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckBigMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gridBaseInfo_.Equals(other.gridBaseInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gridBaseInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gridBaseInfo_.WriteTo(output, _repeated_gridBaseInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gridBaseInfo_.CalculateSize(_repeated_gridBaseInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckBigMapInfo other) {
      if (other == null) {
        return;
      }
      gridBaseInfo_.Add(other.gridBaseInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gridBaseInfo_.AddEntriesFrom(input, _repeated_gridBaseInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class ReqHoldMapGrid : pb::IMessage<ReqHoldMapGrid> {
    private static readonly pb::MessageParser<ReqHoldMapGrid> _parser = new pb::MessageParser<ReqHoldMapGrid>(() => new ReqHoldMapGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid(ReqHoldMapGrid other) : this() {
      mapTitleId_ = other.mapTitleId_;
      guildId_ = other.guildId_ != null ? other.guildId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHoldMapGrid Clone() {
      return new ReqHoldMapGrid(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 2;
    private global::NFMsg.Ident guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      if (!object.Equals(GuildId, other.GuildId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (guildId_ != null) hash ^= GuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
      if (guildId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      if (guildId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHoldMapGrid other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      if (other.guildId_ != null) {
        if (guildId_ == null) {
          GuildId = new global::NFMsg.Ident();
        }
        GuildId.MergeFrom(other.GuildId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
          case 18: {
            if (guildId_ == null) {
              GuildId = new global::NFMsg.Ident();
            }
            input.ReadMessage(GuildId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_HOLD_MAP_GRID
  /// </summary>
  public sealed partial class AckHoldMapGrid : pb::IMessage<AckHoldMapGrid> {
    private static readonly pb::MessageParser<AckHoldMapGrid> _parser = new pb::MessageParser<AckHoldMapGrid>(() => new AckHoldMapGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckHoldMapGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid(AckHoldMapGrid other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckHoldMapGrid Clone() {
      return new AckHoldMapGrid(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckHoldMapGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckHoldMapGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckHoldMapGrid other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class ReqLeaveMapMsg : pb::IMessage<ReqLeaveMapMsg> {
    private static readonly pb::MessageParser<ReqLeaveMapMsg> _parser = new pb::MessageParser<ReqLeaveMapMsg>(() => new ReqLeaveMapMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg(ReqLeaveMapMsg other) : this() {
      mapTitleId_ = other.mapTitleId_;
      leaveMsg_ = other.leaveMsg_ != null ? other.leaveMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveMapMsg Clone() {
      return new ReqLeaveMapMsg(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leave_msg" field.</summary>
    public const int LeaveMsgFieldNumber = 2;
    private global::NFMsg.BigMapLeaveMsg leaveMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.BigMapLeaveMsg LeaveMsg {
      get { return leaveMsg_; }
      set {
        leaveMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      if (!object.Equals(LeaveMsg, other.LeaveMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (leaveMsg_ != null) hash ^= LeaveMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
      if (leaveMsg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LeaveMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      if (leaveMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeaveMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLeaveMapMsg other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      if (other.leaveMsg_ != null) {
        if (leaveMsg_ == null) {
          LeaveMsg = new global::NFMsg.BigMapLeaveMsg();
        }
        LeaveMsg.MergeFrom(other.LeaveMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
          case 18: {
            if (leaveMsg_ == null) {
              LeaveMsg = new global::NFMsg.BigMapLeaveMsg();
            }
            input.ReadMessage(LeaveMsg);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_LEAVE_MSG_MAP_GRID
  /// </summary>
  public sealed partial class AckLeaveMapMsg : pb::IMessage<AckLeaveMapMsg> {
    private static readonly pb::MessageParser<AckLeaveMapMsg> _parser = new pb::MessageParser<AckLeaveMapMsg>(() => new AckLeaveMapMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckLeaveMapMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg(AckLeaveMapMsg other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckLeaveMapMsg Clone() {
      return new AckLeaveMapMsg(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckLeaveMapMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckLeaveMapMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckLeaveMapMsg other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class ReqGetMapAward : pb::IMessage<ReqGetMapAward> {
    private static readonly pb::MessageParser<ReqGetMapAward> _parser = new pb::MessageParser<ReqGetMapAward>(() => new ReqGetMapAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward(ReqGetMapAward other) : this() {
      mapTitleId_ = other.mapTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqGetMapAward Clone() {
      return new ReqGetMapAward(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqGetMapAward other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_GET_MAP_GRID_AWARD
  /// </summary>
  public sealed partial class AckGetMapAward : pb::IMessage<AckGetMapAward> {
    private static readonly pb::MessageParser<AckGetMapAward> _parser = new pb::MessageParser<AckGetMapAward>(() => new AckGetMapAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckGetMapAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward(AckGetMapAward other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckGetMapAward Clone() {
      return new AckGetMapAward(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckGetMapAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckGetMapAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckGetMapAward other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class ReqMapHunting : pb::IMessage<ReqMapHunting> {
    private static readonly pb::MessageParser<ReqMapHunting> _parser = new pb::MessageParser<ReqMapHunting>(() => new ReqMapHunting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting(ReqMapHunting other) : this() {
      mapTitleId_ = other.mapTitleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapHunting Clone() {
      return new ReqMapHunting(this);
    }

    /// <summary>Field number for the "map_title_id" field.</summary>
    public const int MapTitleIdFieldNumber = 1;
    private pb::ByteString mapTitleId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitleId {
      get { return mapTitleId_; }
      set {
        mapTitleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitleId != other.MapTitleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitleId.Length != 0) hash ^= MapTitleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMapHunting other) {
      if (other == null) {
        return;
      }
      if (other.MapTitleId.Length != 0) {
        MapTitleId = other.MapTitleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitleId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_HUNTING
  /// </summary>
  public sealed partial class AckMapHunting : pb::IMessage<AckMapHunting> {
    private static readonly pb::MessageParser<AckMapHunting> _parser = new pb::MessageParser<AckMapHunting>(() => new AckMapHunting());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapHunting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting(AckMapHunting other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapHunting Clone() {
      return new AckMapHunting(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapHunting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapHunting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckMapHunting other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_REQ_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class ReqMapKingWar : pb::IMessage<ReqMapKingWar> {
    private static readonly pb::MessageParser<ReqMapKingWar> _parser = new pb::MessageParser<ReqMapKingWar>(() => new ReqMapKingWar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar(ReqMapKingWar other) : this() {
      mapTitle_ = other.mapTitle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqMapKingWar Clone() {
      return new ReqMapKingWar(this);
    }

    /// <summary>Field number for the "map_title" field.</summary>
    public const int MapTitleFieldNumber = 1;
    private pb::ByteString mapTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitle {
      get { return mapTitle_; }
      set {
        mapTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitle != other.MapTitle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitle.Length != 0) hash ^= MapTitle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqMapKingWar other) {
      if (other == null) {
        return;
      }
      if (other.MapTitle.Length != 0) {
        MapTitle = other.MapTitle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitle = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	EGMI_ACK_MAP_GRID_KING_WAR
  /// </summary>
  public sealed partial class AckMapKingWar : pb::IMessage<AckMapKingWar> {
    private static readonly pb::MessageParser<AckMapKingWar> _parser = new pb::MessageParser<AckMapKingWar>(() => new AckMapKingWar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckMapKingWar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgExtraReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar(AckMapKingWar other) : this() {
      mapTitle_ = other.mapTitle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckMapKingWar Clone() {
      return new AckMapKingWar(this);
    }

    /// <summary>Field number for the "map_title" field.</summary>
    public const int MapTitleFieldNumber = 1;
    private pb::ByteString mapTitle_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapTitle {
      get { return mapTitle_; }
      set {
        mapTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckMapKingWar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckMapKingWar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapTitle != other.MapTitle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapTitle.Length != 0) hash ^= MapTitle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapTitle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MapTitle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapTitle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckMapKingWar other) {
      if (other == null) {
        return;
      }
      if (other.MapTitle.Length != 0) {
        MapTitle = other.MapTitle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapTitle = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
