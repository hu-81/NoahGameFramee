// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NFMsgShare.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NFMsg {

  /// <summary>Holder for reflection information generated from NFMsgShare.proto</summary>
  public static partial class NFMsgShareReflection {

    #region Descriptor
    /// <summary>File descriptor for NFMsgShare.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NFMsgShareReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBORk1zZ1NoYXJlLnByb3RvEgVORk1zZxoOTkZEZWZpbmUucHJvdG8aD05G",
            "TXNnQmFzZS5wcm90byJeChJSZXFFbnRlckdhbWVTZXJ2ZXISGAoCaWQYASAB",
            "KAsyDC5ORk1zZy5JZGVudBIPCgdhY2NvdW50GAIgASgMEg8KB2dhbWVfaWQY",
            "AyABKAUSDAoEbmFtZRgEIAEoDCIlChZSZXFBY2tFbnRlckdhbWVTdWNjZXNz",
            "EgsKA2FyZxgBIAEoBSIbCgxSZXFIZWFydEJlYXQSCwoDYXJnGAEgASgFIiEK",
            "ElJlcUxlYXZlR2FtZVNlcnZlchILCgNhcmcYASABKAUitwEKD1BsYXllckVu",
            "dHJ5SW5mbxIhCgtvYmplY3RfZ3VpZBgBIAEoCzIMLk5GTXNnLklkZW50EgkK",
            "AXgYAiABKAISCQoBeRgDIAEoAhIJCgF6GAQgASgCEhMKC2NhcmVlcl90eXBl",
            "GAUgASgFEhQKDHBsYXllcl9zdGF0ZRgGIAEoBRIRCgljb25maWdfaWQYByAB",
            "KAwSEAoIc2NlbmVfaWQYCCABKAUSEAoIY2xhc3NfaWQYCSABKAwiQQoSQWNr",
            "UGxheWVyRW50cnlMaXN0EisKC29iamVjdF9saXN0GAEgAygLMhYuTkZNc2cu",
            "UGxheWVyRW50cnlJbmZvIjcKEkFja1BsYXllckxlYXZlTGlzdBIhCgtvYmpl",
            "Y3RfbGlzdBgBIAMoCzIMLk5GTXNnLklkZW50IoYCCg1SZXFBY2tTeW5EYXRh",
            "EhsKBXN5c2VyGAEgASgLMgwuTkZNc2cuSWRlbnQSIQoLb2JqZWN0X2xpc3QY",
            "AiADKAsyDC5ORk1zZy5JZGVudBIMCgRkYXRhGAMgASgMEi4KCHN5bl90eXBl",
            "GAQgASgOMhwuTkZNc2cuUmVxQWNrU3luRGF0YS5TeW5UeXBlEiAKBm1zZ19p",
            "ZBgFIAEoDjIQLk5GTXNnLkVTeW5Nc2dJRCJVCgdTeW5UeXBlEg4KCkVTVF9V",
            "TktOT1cQABINCglFU1RfR1JPVVAQARINCglFU1RfU0NFTkUQAhIMCghFU1Rf",
            "Q0xBThADEg4KCkVTVF9GUklFTkQQBCLhAQoQUmVxQWNrUGxheWVyTW92ZRIb",
            "CgVtb3ZlchgBIAEoCzIMLk5GTXNnLklkZW50EhAKCG1vdmVUeXBlGAIgASgF",
            "Eg0KBXNwZWVkGAMgASgCEgwKBHRpbWUYBCABKAUSEQoJbGFzdFN0YXRlGAUg",
            "ASgFEiIKCnRhcmdldF9wb3MYBiADKAsyDi5ORk1zZy5WZWN0b3IzEiIKCnNv",
            "dXJjZV9wb3MYByADKAsyDi5ORk1zZy5WZWN0b3IzEiYKDm1vdmVfZGlyZWN0",
            "aW9uGAggAygLMg4uTkZNc2cuVmVjdG9yMyKkBAoQUmVxQWNrUGxheWVyQ2hh",
            "dBIfCglwbGF5ZXJfaWQYASABKAsyDC5ORk1zZy5JZGVudBITCgtwbGF5ZXJf",
            "bmFtZRgCIAEoDBIWCg5wbGF5ZXJfaGVyb19pZBgDIAEoDBIZChFwbGF5ZXJf",
            "aGVyb19sZXZlbBgEIAEoDBI+CgxjaGF0X2NoYW5uZWwYBSABKA4yKC5ORk1z",
            "Zy5SZXFBY2tQbGF5ZXJDaGF0LkVHYW1lQ2hhdENoYW5uZWwSOAoJY2hhdF90",
            "eXBlGAYgASgOMiUuTkZNc2cuUmVxQWNrUGxheWVyQ2hhdC5FR2FtZUNoYXRU",
            "eXBlEhEKCWNoYXRfaW5mbxgHIAEoDBIfCgl0YXJnZXRfaWQYCCABKAsyDC5O",
            "Rk1zZy5JZGVudCJyChBFR2FtZUNoYXRDaGFubmVsEg8KC0VHQ0NfR0xPQkFM",
            "EAASDQoJRUdDQ19DTEFOEAESDwoLRUdDQ19GUklFTkQQAhIPCgtFR0NDX0JB",
            "VFRMRRADEg0KCUVHQ0NfVEVBTRAEEg0KCUVHQ0NfUk9PTRAFIoQBCg1FR2Ft",
            "ZUNoYXRUeXBlEg0KCUVHQ1RfVEVYVBAAEg4KCkVHQ1RfVk9JQ0UQARIOCgpF",
            "R0NUX0VNT0pJEAISFAoQRUdDVF9ET05BVEVfSEVSTxAKEhgKFEVHQ1RfRE9O",
            "QVRFX0JVSUxESU5HEAsSFAoQRUdDVF9ET05BVEVfSVRFTRAMIr8BChNSZXFB",
            "Y2tQbGF5ZXJQb3NTeW5jEhsKBW1vdmVyGAEgASgLMgwuTkZNc2cuSWRlbnQS",
            "DAoEdGltZRgCIAEoBRIZChFJbnRlcnBvbGF0aW9uVGltZRgDIAEoAhIgCghw",
            "b3NpdGlvbhgEIAEoCzIOLk5GTXNnLlZlY3RvcjMSIQoJZGlyZWN0aW9uGAUg",
            "ASgLMg4uTkZNc2cuVmVjdG9yMxIOCgZzdGF0dXMYBiABKAUSDQoFZnJhbWUY",
            "ByABKAUi0wEKCkVmZmVjdERhdGESIgoMZWZmZWN0X2lkZW50GAEgASgLMgwu",
            "TkZNc2cuSWRlbnQSFAoMZWZmZWN0X3ZhbHVlGAIgASgFEjEKCmVmZmVjdF9y",
            "bHQYAyABKA4yHS5ORk1zZy5FZmZlY3REYXRhLkVSZXN1bHRUeXBlIlgKC0VS",
            "ZXN1bHRUeXBlEgwKCEVFVF9GQUlMEAASDwoLRUVUX1NVQ0NFU1MQARIOCgpF",
            "RVRfUkVGVVNFEAISDAoIRUVUX01JU1MQAxIMCghFRVRfQ1JJVBAEInkKDlJl",
            "cUFja1VzZVNraWxsEhoKBHVzZXIYASABKAsyDC5ORk1zZy5JZGVudBIQCghz",
            "a2lsbF9pZBgCIAEoDBIRCgl1c2VfaW5kZXgYAyABKAUSJgoLZWZmZWN0X2Rh",
            "dGEYBCADKAsyES5ORk1zZy5FZmZlY3REYXRhItcBCg1SZXFBY2tVc2VJdGVt",
            "EhoKBHVzZXIYASABKAsyDC5ORk1zZy5JZGVudBIfCglpdGVtX2d1aWQYAiAB",
            "KAsyDC5ORk1zZy5JZGVudBImCgtlZmZlY3RfZGF0YRgDIAMoCzIRLk5GTXNn",
            "LkVmZmVjdERhdGESHwoEaXRlbRgEIAEoCzIRLk5GTXNnLkl0ZW1TdHJ1Y3QS",
            "HgoIdGFyZ2V0aWQYBSABKAsyDC5ORk1zZy5JZGVudBIgCghwb3NpdGlvbhgG",
            "IAEoCzIOLk5GTXNnLlZlY3RvcjMi8wEKD1JlcUFja1N3YXBTY2VuZRI7Cg10",
            "cmFuc2Zlcl90eXBlGAEgASgOMiQuTkZNc2cuUmVxQWNrU3dhcFNjZW5lLkVH",
            "YW1lU3dhcFR5cGUSEAoIc2NlbmVfaWQYAiABKAUSDwoHbGluZV9pZBgDIAEo",
            "BRIJCgF4GAQgASgCEgkKAXkYBSABKAISCQoBehgGIAEoAhIMCgRkYXRhGAcg",
            "ASgMIlEKDUVHYW1lU3dhcFR5cGUSDwoLRUdTVF9OQVJNQUwQABIOCgpFR1NU",
            "X0NMT05FEAESDgoKRUdTVF9BUkVOQRACEg8KC0VHU1RfTUlSUk9SEAMiHwoP",
            "UmVxQWNrSG9tZVNjZW5lEgwKBGRhdGEYASABKAwiMQoKSXRlbVN0cnVjdBIP",
            "CgdpdGVtX2lkGAEgASgMEhIKCml0ZW1fY291bnQYAiABKAUiPwoOQ3VycmVu",
            "Y3lTdHJ1Y3QSFQoNY3VycmVuY3lfdHlwZRgBIAEoBRIWCg5jdXJyZW5jeV9j",
            "b3VudBgCIAEoBSJCChBSZXFBY2tSZWxpdmVIZXJvEg8KB2RpYW1vbmQYASAB",
            "KAUSHQoHaGVyb19pZBgCIAEoCzIMLk5GTXNnLklkZW50IjIKD1JlcVBpY2tE",
            "cm9wSXRlbRIfCglpdGVtX2d1aWQYAiABKAsyDC5ORk1zZy5JZGVudCIgCg1S",
            "ZXFBY2NlcHRUYXNrEg8KB3Rhc2tfaWQYASABKAwiIwoQUmVxQ29tcGVsZXRl",
            "VGFzaxIPCgd0YXNrX2lkGAEgASgMItIBChNSZXFBZGRTY2VuZUJ1aWxkaW5n",
            "EhsKA3BvcxgBIAEoCzIOLk5GTXNnLlZlY3RvcjMSGgoEZ3VpZBgCIAEoCzIM",
            "Lk5GTXNnLklkZW50EhwKBm1hc3RlchgDIAEoCzIMLk5GTXNnLklkZW50EhEK",
            "CWNvbmZpZ19pZBgEIAEoDBIQCghzY2VuZV9pZBgFIAEoBRITCgttYXN0ZXJf",
            "bmFtZRgGIAEoDBIVCg1pc19ob21lX3NjZW5lGAcgASgFEhMKC2lzX2J1aWxk",
            "aW5nGAggASgFIkIKEVJlcVNjZW5lQnVpbGRpbmdzEhAKCHNjZW5lX2lkGAEg",
            "ASgFEhsKA3BvcxgCIAEoCzIOLk5GTXNnLlZlY3RvcjMiQgoRQWNrU2NlbmVC",
            "dWlsZGluZ3MSLQoJYnVpbGRpbmdzGAEgAygLMhouTkZNc2cuUmVxQWRkU2Nl",
            "bmVCdWlsZGluZyJ6ChZSZXFTdG9yZVNjZW5lQnVpbGRpbmdzEhoKBGd1aWQY",
            "ASABKAsyDC5ORk1zZy5JZGVudBIVCg1ob21lX3NjZW5lX2lkGAIgASgFEi0K",
            "CWJ1aWxkaW5ncxgDIAMoCzIaLk5GTXNnLlJlcUFkZFNjZW5lQnVpbGRpbmci",
            "rwEKEFJlcUFja0NyZWF0ZUNsYW4SHQoHY2xhbl9pZBgBIAEoCzIMLk5GTXNn",
            "LklkZW50EhEKCWNsYW5fbmFtZRgCIAEoDBIRCgljbGFuX2Rlc2MYAyABKAwS",
            "JAoOY2xhbl9wbGF5ZXJfaWQYBCABKAsyDC5ORk1zZy5JZGVudBIYChBjbGFu",
            "X3BsYXllcl9uYW1lGAUgASgMEhYKDmNsYW5fcGxheWVyX2JwGAYgASgFIiIK",
            "DVJlcVNlYXJjaENsYW4SEQoJY2xhbl9uYW1lGAEgASgMIoQCCg1BY2tTZWFy",
            "Y2hDbGFuEjgKCWNsYW5fbGlzdBgBIAMoCzIlLk5GTXNnLkFja1NlYXJjaENs",
            "YW4uU2VhcmNoQ2xhbk9iamVjdBq4AQoQU2VhcmNoQ2xhbk9iamVjdBIdCgdj",
            "bGFuX0lEGAEgASgLMgwuTkZNc2cuSWRlbnQSEQoJY2xhbl9uYW1lGAIgASgM",
            "EhEKCWNsYW5faWNvbhgDIAEoDBIZChFjbGFuX21lbWJlcl9jb3VudBgEIAEo",
            "BRIdChVjbGFuX21lbWJlcl9tYXhfY291bnQYBSABKAUSEgoKY2xhbl9ob25v",
            "chgGIAEoBRIRCgljbGFuX3JhbmsYByABKAUihwEKDlJlcUFja0pvaW5DbGFu",
            "Eh0KB2NsYW5faWQYASABKAsyDC5ORk1zZy5JZGVudBIkCg5jbGFuX3BsYXll",
            "cl9pZBgEIAEoCzIMLk5GTXNnLklkZW50EhgKEGNsYW5fcGxheWVyX25hbWUY",
            "BSABKAwSFgoOY2xhbl9wbGF5ZXJfYnAYBiABKAUiVgoPUmVxQWNrTGVhdmVD",
            "bGFuEh0KB2NsYW5faWQYASABKAsyDC5ORk1zZy5JZGVudBIkCg5jbGFuX3Bs",
            "YXllcl9pZBgCIAEoCzIMLk5GTXNnLklkZW50IvYBChNSZXFBY2tPcHJDbGFu",
            "TWVtYmVyEh0KB2NsYW5faWQYASABKAsyDC5ORk1zZy5JZGVudBIfCglwbGF5",
            "ZXJfaWQYAiABKAsyDC5ORk1zZy5JZGVudBIfCgltZW1iZXJfaWQYAyABKAsy",
            "DC5ORk1zZy5JZGVudBI8CgR0eXBlGAQgASgOMi4uTkZNc2cuUmVxQWNrT3By",
            "Q2xhbk1lbWJlci5FR0NsYW5NZW1iZXJPcHJUeXBlIkAKE0VHQ2xhbk1lbWJl",
            "ck9wclR5cGUSDQoJRUdBVF9ET1dOEAASCwoHRUdBVF9VUBABEg0KCUVHQVRf",
            "S0lDSxACIjMKElJlcUVudGVyQ2xhbkVjdHlwZRIdCgdjbGFuX2lkGAEgASgL",
            "MgwuTkZNc2cuSWRlbnQiPAoPUmVxU2V0RmlnaHRIZXJvEhwKBkhlcm9pZBgB",
            "IAEoCzIMLk5GTXNnLklkZW50EgsKA1NldBgCIAEoBSIyChJSZXFTd2l0Y2hG",
            "aWdodEhlcm8SHAoGSGVyb2lkGAEgASgLMgwuTkZNc2cuSWRlbnQiMwoSUmVx",
            "QnV5SXRlbUZyb21TaG9wEg4KBml0ZW1JRBgBIAEoDBINCgVjb3VudBgCIAEo",
            "BSKHAwoNUFZQUGxheWVySW5mbxIYCgJpZBgBIAEoCzIMLk5GTXNnLklkZW50",
            "EicKC2JhdHRsZV9tb2RlGAIgASgOMhIuTkZNc2cuRUJhdHRsZVR5cGUSDQoF",
            "bGV2ZWwYBCABKAUSFAoMYmF0dGxlX3BvaW50GAUgASgFEgwKBG5hbWUYBiAB",
            "KAwSDAoEaGVhZBgHIAEoDBIMCgRnb2xkGAggASgFEg8KB2RpYW1vbmQYCSAB",
            "KAUSEQoJaGVyb19jbmYxGBQgASgMEhEKCWhlcm9fY25mMhgVIAEoDBIRCglo",
            "ZXJvX2NuZjMYFiABKAwSEgoKaGVyb19zdGFyMRgZIAEoBRISCgpoZXJvX3N0",
            "YXIyGBogASgFEhIKCmhlcm9fc3RhcjMYGyABKAUSHgoIaGVyb19pZDEYHCAB",
            "KAsyDC5ORk1zZy5JZGVudBIeCghoZXJvX2lkMhgdIAEoCzIMLk5GTXNnLklk",
            "ZW50Eh4KCGhlcm9faWQzGB4gASgLMgwuTkZNc2cuSWRlbnQilQEKEFJlcVNl",
            "YXJjaE9wcG5lbnQSEgoKc2VsZl9zY2VuZRgBIAEoBRIPCgdkaWFtb25kGAIg",
            "ASgFEhQKDGJhdHRsZV9wb2ludBgDIAEoBRInCgtiYXR0bGVfbW9kZRgEIAEo",
            "DjISLk5GTXNnLkVCYXR0bGVUeXBlEh0KB2ZyaWVuZHMYCiADKAsyDC5ORk1z",
            "Zy5JZGVudCLWAQoQQWNrU2VhcmNoT3BwbmVudBIQCghzY2VuZV9pZBgBIAEo",
            "BRIdCgd0ZWFtX2lkGAIgASgLMgwuTkZNc2cuSWRlbnQSFgoOZ2FtYmxlX2Rp",
            "YW1vbmQYAyABKAUSIgoMdGVhbV9tZW1iZXJzGAUgAygLMgwuTkZNc2cuSWRl",
            "bnQSJgoIb3Bwb25lbnQYDiABKAsyFC5ORk1zZy5QVlBQbGF5ZXJJbmZvEi0K",
            "CWJ1aWxkaW5ncxgUIAMoCzIaLk5GTXNnLlJlcUFkZFNjZW5lQnVpbGRpbmci",
            "MgoSUmVxQWNrQ2FuY2VsU2VhcmNoEhwKBnNlbGZpZBgBIAEoCzIMLk5GTXNn",
            "LklkZW50IiAKDFJlcUVuZEJhdHRsZRIQCghhdXRvX2VuZBgBIAEoBSKCAgoM",
            "QWNrRW5kQmF0dGxlEgsKA3dpbhgBIAEoBRIMCgRzdGFyGAIgASgFEgwKBGdv",
            "bGQYAyABKAUSCwoDY3VwGAQgASgFEg8KB2RpYW1vbmQYBSABKAUSJwoLYmF0",
            "dGxlX21vZGUYBiABKA4yEi5ORk1zZy5FQmF0dGxlVHlwZRIdCgd0ZWFtX2lk",
            "GAcgASgLMgwuTkZNc2cuSWRlbnQSHgoIbWF0Y2hfaWQYCCABKAsyDC5ORk1z",
            "Zy5JZGVudBIdCgdtZW1iZXJzGAkgAygLMgwuTkZNc2cuSWRlbnQSJAoJaXRl",
            "bV9saXN0GAogAygLMhEuTkZNc2cuSXRlbVN0cnVjdCKBAQoLUmVxU2VuZE1h",
            "aWwSHgoIcmVjaWV2ZXIYASABKAsyDC5ORk1zZy5JZGVudBIkCglpdGVtX2xp",
            "c3QYAiADKAsyES5ORk1zZy5JdGVtU3RydWN0EiwKDWN1cnJlbmN5X2xpc3QY",
            "AyADKAsyFS5ORk1zZy5DdXJyZW5jeVN0cnVjdCK5AQoPUmVxU3dpdGNoU2Vy",
            "dmVyEhwKBnNlbGZpZBgBIAEoCzIMLk5GTXNnLklkZW50EhUKDXNlbGZfc2Vy",
            "dmVyaWQYAiABKAMSFwoPdGFyZ2V0X3NlcnZlcmlkGAMgASgDEhUKDWdhdGVf",
            "c2VydmVyaWQYBCABKAMSDwoHU2NlbmVJRBgFIAEoAxIfCgljbGllbnRfaWQY",
            "BiABKAsyDC5ORk1zZy5JZGVudBIPCgdncm91cElEGAcgASgDInYKD0Fja1N3",
            "aXRjaFNlcnZlchIcCgZzZWxmaWQYASABKAsyDC5ORk1zZy5JZGVudBIVCg1z",
            "ZWxmX3NlcnZlcmlkGAIgASgDEhcKD3RhcmdldF9zZXJ2ZXJpZBgDIAEoAxIV",
            "Cg1nYXRlX3NlcnZlcmlkGAQgASgDYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NFMsg.NFDefineReflection.Descriptor, global::NFMsg.NFMsgBaseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEnterGameServer), global::NFMsg.ReqEnterGameServer.Parser, new[]{ "Id", "Account", "GameId", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckEnterGameSuccess), global::NFMsg.ReqAckEnterGameSuccess.Parser, new[]{ "Arg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqHeartBeat), global::NFMsg.ReqHeartBeat.Parser, new[]{ "Arg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqLeaveGameServer), global::NFMsg.ReqLeaveGameServer.Parser, new[]{ "Arg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PlayerEntryInfo), global::NFMsg.PlayerEntryInfo.Parser, new[]{ "ObjectGuid", "X", "Y", "Z", "CareerType", "PlayerState", "ConfigId", "SceneId", "ClassId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerEntryList), global::NFMsg.AckPlayerEntryList.Parser, new[]{ "ObjectList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckPlayerLeaveList), global::NFMsg.AckPlayerLeaveList.Parser, new[]{ "ObjectList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckSynData), global::NFMsg.ReqAckSynData.Parser, new[]{ "Syser", "ObjectList", "Data", "SynType", "MsgId" }, null, new[]{ typeof(global::NFMsg.ReqAckSynData.Types.SynType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerMove), global::NFMsg.ReqAckPlayerMove.Parser, new[]{ "Mover", "MoveType", "Speed", "Time", "LastState", "TargetPos", "SourcePos", "MoveDirection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerChat), global::NFMsg.ReqAckPlayerChat.Parser, new[]{ "PlayerId", "PlayerName", "PlayerHeroId", "PlayerHeroLevel", "ChatChannel", "ChatType", "ChatInfo", "TargetId" }, null, new[]{ typeof(global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel), typeof(global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckPlayerPosSync), global::NFMsg.ReqAckPlayerPosSync.Parser, new[]{ "Mover", "Time", "InterpolationTime", "Position", "Direction", "Status", "Frame" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.EffectData), global::NFMsg.EffectData.Parser, new[]{ "EffectIdent", "EffectValue", "EffectRlt" }, null, new[]{ typeof(global::NFMsg.EffectData.Types.EResultType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckUseSkill), global::NFMsg.ReqAckUseSkill.Parser, new[]{ "User", "SkillId", "UseIndex", "EffectData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckUseItem), global::NFMsg.ReqAckUseItem.Parser, new[]{ "User", "ItemGuid", "EffectData", "Item", "Targetid", "Position" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckSwapScene), global::NFMsg.ReqAckSwapScene.Parser, new[]{ "TransferType", "SceneId", "LineId", "X", "Y", "Z", "Data" }, null, new[]{ typeof(global::NFMsg.ReqAckSwapScene.Types.EGameSwapType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckHomeScene), global::NFMsg.ReqAckHomeScene.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ItemStruct), global::NFMsg.ItemStruct.Parser, new[]{ "ItemId", "ItemCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.CurrencyStruct), global::NFMsg.CurrencyStruct.Parser, new[]{ "CurrencyType", "CurrencyCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckReliveHero), global::NFMsg.ReqAckReliveHero.Parser, new[]{ "Diamond", "HeroId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqPickDropItem), global::NFMsg.ReqPickDropItem.Parser, new[]{ "ItemGuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAcceptTask), global::NFMsg.ReqAcceptTask.Parser, new[]{ "TaskId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqCompeleteTask), global::NFMsg.ReqCompeleteTask.Parser, new[]{ "TaskId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAddSceneBuilding), global::NFMsg.ReqAddSceneBuilding.Parser, new[]{ "Pos", "Guid", "Master", "ConfigId", "SceneId", "MasterName", "IsHomeScene", "IsBuilding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSceneBuildings), global::NFMsg.ReqSceneBuildings.Parser, new[]{ "SceneId", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSceneBuildings), global::NFMsg.AckSceneBuildings.Parser, new[]{ "Buildings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqStoreSceneBuildings), global::NFMsg.ReqStoreSceneBuildings.Parser, new[]{ "Guid", "HomeSceneId", "Buildings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCreateClan), global::NFMsg.ReqAckCreateClan.Parser, new[]{ "ClanId", "ClanName", "ClanDesc", "ClanPlayerId", "ClanPlayerName", "ClanPlayerBp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSearchClan), global::NFMsg.ReqSearchClan.Parser, new[]{ "ClanName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchClan), global::NFMsg.AckSearchClan.Parser, new[]{ "ClanList" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchClan.Types.SearchClanObject), global::NFMsg.AckSearchClan.Types.SearchClanObject.Parser, new[]{ "ClanID", "ClanName", "ClanIcon", "ClanMemberCount", "ClanMemberMaxCount", "ClanHonor", "ClanRank" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckJoinClan), global::NFMsg.ReqAckJoinClan.Parser, new[]{ "ClanId", "ClanPlayerId", "ClanPlayerName", "ClanPlayerBp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckLeaveClan), global::NFMsg.ReqAckLeaveClan.Parser, new[]{ "ClanId", "ClanPlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckOprClanMember), global::NFMsg.ReqAckOprClanMember.Parser, new[]{ "ClanId", "PlayerId", "MemberId", "Type" }, null, new[]{ typeof(global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEnterClanEctype), global::NFMsg.ReqEnterClanEctype.Parser, new[]{ "ClanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSetFightHero), global::NFMsg.ReqSetFightHero.Parser, new[]{ "Heroid", "Set" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSwitchFightHero), global::NFMsg.ReqSwitchFightHero.Parser, new[]{ "Heroid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqBuyItemFromShop), global::NFMsg.ReqBuyItemFromShop.Parser, new[]{ "ItemID", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.PVPPlayerInfo), global::NFMsg.PVPPlayerInfo.Parser, new[]{ "Id", "BattleMode", "Level", "BattlePoint", "Name", "Head", "Gold", "Diamond", "HeroCnf1", "HeroCnf2", "HeroCnf3", "HeroStar1", "HeroStar2", "HeroStar3", "HeroId1", "HeroId2", "HeroId3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSearchOppnent), global::NFMsg.ReqSearchOppnent.Parser, new[]{ "SelfScene", "Diamond", "BattlePoint", "BattleMode", "Friends" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSearchOppnent), global::NFMsg.AckSearchOppnent.Parser, new[]{ "SceneId", "TeamId", "GambleDiamond", "TeamMembers", "Opponent", "Buildings" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqAckCancelSearch), global::NFMsg.ReqAckCancelSearch.Parser, new[]{ "Selfid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqEndBattle), global::NFMsg.ReqEndBattle.Parser, new[]{ "AutoEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckEndBattle), global::NFMsg.AckEndBattle.Parser, new[]{ "Win", "Star", "Gold", "Cup", "Diamond", "BattleMode", "TeamId", "MatchId", "Members", "ItemList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSendMail), global::NFMsg.ReqSendMail.Parser, new[]{ "Reciever", "ItemList", "CurrencyList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.ReqSwitchServer), global::NFMsg.ReqSwitchServer.Parser, new[]{ "Selfid", "SelfServerid", "TargetServerid", "GateServerid", "SceneID", "ClientId", "GroupID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NFMsg.AckSwitchServer), global::NFMsg.AckSwitchServer.Parser, new[]{ "Selfid", "SelfServerid", "TargetServerid", "GateServerid" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReqEnterGameServer : pb::IMessage<ReqEnterGameServer> {
    private static readonly pb::MessageParser<ReqEnterGameServer> _parser = new pb::MessageParser<ReqEnterGameServer>(() => new ReqEnterGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer(ReqEnterGameServer other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      account_ = other.account_;
      gameId_ = other.gameId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterGameServer Clone() {
      return new ReqEnterGameServer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private pb::ByteString account_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 3;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Account != other.Account) return false;
      if (GameId != other.GameId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Account);
      }
      if (GameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEnterGameServer other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::NFMsg.Ident();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::NFMsg.Ident();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            Account = input.ReadBytes();
            break;
          }
          case 24: {
            GameId = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckEnterGameSuccess : pb::IMessage<ReqAckEnterGameSuccess> {
    private static readonly pb::MessageParser<ReqAckEnterGameSuccess> _parser = new pb::MessageParser<ReqAckEnterGameSuccess>(() => new ReqAckEnterGameSuccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckEnterGameSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess(ReqAckEnterGameSuccess other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckEnterGameSuccess Clone() {
      return new ReqAckEnterGameSuccess(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckEnterGameSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckEnterGameSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckEnterGameSuccess other) {
      if (other == null) {
        return;
      }
      if (other.Arg != 0) {
        Arg = other.Arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqHeartBeat : pb::IMessage<ReqHeartBeat> {
    private static readonly pb::MessageParser<ReqHeartBeat> _parser = new pb::MessageParser<ReqHeartBeat>(() => new ReqHeartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqHeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat(ReqHeartBeat other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqHeartBeat Clone() {
      return new ReqHeartBeat(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqHeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqHeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqHeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Arg != 0) {
        Arg = other.Arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqLeaveGameServer : pb::IMessage<ReqLeaveGameServer> {
    private static readonly pb::MessageParser<ReqLeaveGameServer> _parser = new pb::MessageParser<ReqLeaveGameServer>(() => new ReqLeaveGameServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqLeaveGameServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer(ReqLeaveGameServer other) : this() {
      arg_ = other.arg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqLeaveGameServer Clone() {
      return new ReqLeaveGameServer(this);
    }

    /// <summary>Field number for the "arg" field.</summary>
    public const int ArgFieldNumber = 1;
    private int arg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Arg {
      get { return arg_; }
      set {
        arg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqLeaveGameServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqLeaveGameServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arg != other.Arg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arg != 0) hash ^= Arg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arg != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Arg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Arg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqLeaveGameServer other) {
      if (other == null) {
        return;
      }
      if (other.Arg != 0) {
        Arg = other.Arg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Arg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerEntryInfo : pb::IMessage<PlayerEntryInfo> {
    private static readonly pb::MessageParser<PlayerEntryInfo> _parser = new pb::MessageParser<PlayerEntryInfo>(() => new PlayerEntryInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEntryInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo(PlayerEntryInfo other) : this() {
      objectGuid_ = other.objectGuid_ != null ? other.objectGuid_.Clone() : null;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      careerType_ = other.careerType_;
      playerState_ = other.playerState_;
      configId_ = other.configId_;
      sceneId_ = other.sceneId_;
      classId_ = other.classId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEntryInfo Clone() {
      return new PlayerEntryInfo(this);
    }

    /// <summary>Field number for the "object_guid" field.</summary>
    public const int ObjectGuidFieldNumber = 1;
    private global::NFMsg.Ident objectGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ObjectGuid {
      get { return objectGuid_; }
      set {
        objectGuid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "career_type" field.</summary>
    public const int CareerTypeFieldNumber = 5;
    private int careerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CareerType {
      get { return careerType_; }
      set {
        careerType_ = value;
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int PlayerStateFieldNumber = 6;
    private int playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 7;
    private pb::ByteString configId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigId {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 8;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "class_id" field.</summary>
    public const int ClassIdFieldNumber = 9;
    private pb::ByteString classId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClassId {
      get { return classId_; }
      set {
        classId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEntryInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEntryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObjectGuid, other.ObjectGuid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (CareerType != other.CareerType) return false;
      if (PlayerState != other.PlayerState) return false;
      if (ConfigId != other.ConfigId) return false;
      if (SceneId != other.SceneId) return false;
      if (ClassId != other.ClassId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objectGuid_ != null) hash ^= ObjectGuid.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (CareerType != 0) hash ^= CareerType.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      if (ConfigId.Length != 0) hash ^= ConfigId.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (ClassId.Length != 0) hash ^= ClassId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objectGuid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObjectGuid);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (CareerType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CareerType);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerState);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ConfigId);
      }
      if (SceneId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SceneId);
      }
      if (ClassId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(ClassId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objectGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectGuid);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (CareerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CareerType);
      }
      if (PlayerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerState);
      }
      if (ConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (ClassId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClassId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEntryInfo other) {
      if (other == null) {
        return;
      }
      if (other.objectGuid_ != null) {
        if (objectGuid_ == null) {
          ObjectGuid = new global::NFMsg.Ident();
        }
        ObjectGuid.MergeFrom(other.ObjectGuid);
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.CareerType != 0) {
        CareerType = other.CareerType;
      }
      if (other.PlayerState != 0) {
        PlayerState = other.PlayerState;
      }
      if (other.ConfigId.Length != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.ClassId.Length != 0) {
        ClassId = other.ClassId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (objectGuid_ == null) {
              ObjectGuid = new global::NFMsg.Ident();
            }
            input.ReadMessage(ObjectGuid);
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 40: {
            CareerType = input.ReadInt32();
            break;
          }
          case 48: {
            PlayerState = input.ReadInt32();
            break;
          }
          case 58: {
            ConfigId = input.ReadBytes();
            break;
          }
          case 64: {
            SceneId = input.ReadInt32();
            break;
          }
          case 74: {
            ClassId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerEntryList : pb::IMessage<AckPlayerEntryList> {
    private static readonly pb::MessageParser<AckPlayerEntryList> _parser = new pb::MessageParser<AckPlayerEntryList>(() => new AckPlayerEntryList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerEntryList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList(AckPlayerEntryList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerEntryList Clone() {
      return new AckPlayerEntryList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.PlayerEntryInfo> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.PlayerEntryInfo.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> objectList_ = new pbc::RepeatedField<global::NFMsg.PlayerEntryInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.PlayerEntryInfo> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerEntryList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerEntryList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerEntryList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckPlayerLeaveList : pb::IMessage<AckPlayerLeaveList> {
    private static readonly pb::MessageParser<AckPlayerLeaveList> _parser = new pb::MessageParser<AckPlayerLeaveList>(() => new AckPlayerLeaveList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckPlayerLeaveList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList(AckPlayerLeaveList other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckPlayerLeaveList Clone() {
      return new AckPlayerLeaveList(this);
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> objectList_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckPlayerLeaveList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckPlayerLeaveList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckPlayerLeaveList other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckSynData : pb::IMessage<ReqAckSynData> {
    private static readonly pb::MessageParser<ReqAckSynData> _parser = new pb::MessageParser<ReqAckSynData>(() => new ReqAckSynData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSynData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData(ReqAckSynData other) : this() {
      syser_ = other.syser_ != null ? other.syser_.Clone() : null;
      objectList_ = other.objectList_.Clone();
      data_ = other.data_;
      synType_ = other.synType_;
      msgId_ = other.msgId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSynData Clone() {
      return new ReqAckSynData(this);
    }

    /// <summary>Field number for the "syser" field.</summary>
    public const int SyserFieldNumber = 1;
    private global::NFMsg.Ident syser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Syser {
      get { return syser_; }
      set {
        syser_ = value;
      }
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> objectList_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> ObjectList {
      get { return objectList_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "syn_type" field.</summary>
    public const int SynTypeFieldNumber = 4;
    private global::NFMsg.ReqAckSynData.Types.SynType synType_ = global::NFMsg.ReqAckSynData.Types.SynType.EstUnknow;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckSynData.Types.SynType SynType {
      get { return synType_; }
      set {
        synType_ = value;
      }
    }

    /// <summary>Field number for the "msg_id" field.</summary>
    public const int MsgIdFieldNumber = 5;
    private global::NFMsg.ESynMsgID msgId_ = global::NFMsg.ESynMsgID.EsmiUnknow;
    /// <summary>
    ///有消息ID限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ESynMsgID MsgId {
      get { return msgId_; }
      set {
        msgId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSynData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSynData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Syser, other.Syser)) return false;
      if(!objectList_.Equals(other.objectList_)) return false;
      if (Data != other.Data) return false;
      if (SynType != other.SynType) return false;
      if (MsgId != other.MsgId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (syser_ != null) hash ^= Syser.GetHashCode();
      hash ^= objectList_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (SynType != global::NFMsg.ReqAckSynData.Types.SynType.EstUnknow) hash ^= SynType.GetHashCode();
      if (MsgId != global::NFMsg.ESynMsgID.EsmiUnknow) hash ^= MsgId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (syser_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Syser);
      }
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (SynType != global::NFMsg.ReqAckSynData.Types.SynType.EstUnknow) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SynType);
      }
      if (MsgId != global::NFMsg.ESynMsgID.EsmiUnknow) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MsgId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (syser_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Syser);
      }
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (SynType != global::NFMsg.ReqAckSynData.Types.SynType.EstUnknow) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SynType);
      }
      if (MsgId != global::NFMsg.ESynMsgID.EsmiUnknow) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSynData other) {
      if (other == null) {
        return;
      }
      if (other.syser_ != null) {
        if (syser_ == null) {
          Syser = new global::NFMsg.Ident();
        }
        Syser.MergeFrom(other.Syser);
      }
      objectList_.Add(other.objectList_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.SynType != global::NFMsg.ReqAckSynData.Types.SynType.EstUnknow) {
        SynType = other.SynType;
      }
      if (other.MsgId != global::NFMsg.ESynMsgID.EsmiUnknow) {
        MsgId = other.MsgId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (syser_ == null) {
              Syser = new global::NFMsg.Ident();
            }
            input.ReadMessage(Syser);
            break;
          }
          case 18: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 32: {
            SynType = (global::NFMsg.ReqAckSynData.Types.SynType) input.ReadEnum();
            break;
          }
          case 40: {
            MsgId = (global::NFMsg.ESynMsgID) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSynData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SynType {
        /// <summary>
        /// </summary>
        [pbr::OriginalName("EST_UNKNOW")] EstUnknow = 0,
        /// <summary>
        ///层
        /// </summary>
        [pbr::OriginalName("EST_GROUP")] EstGroup = 1,
        /// <summary>
        ///场景
        /// </summary>
        [pbr::OriginalName("EST_SCENE")] EstScene = 2,
        /// <summary>
        ///公会
        /// </summary>
        [pbr::OriginalName("EST_CLAN")] EstClan = 3,
        /// <summary>
        ///好友
        /// </summary>
        [pbr::OriginalName("EST_FRIEND")] EstFriend = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /// </summary>
  public sealed partial class ReqAckPlayerMove : pb::IMessage<ReqAckPlayerMove> {
    private static readonly pb::MessageParser<ReqAckPlayerMove> _parser = new pb::MessageParser<ReqAckPlayerMove>(() => new ReqAckPlayerMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove(ReqAckPlayerMove other) : this() {
      mover_ = other.mover_ != null ? other.mover_.Clone() : null;
      moveType_ = other.moveType_;
      speed_ = other.speed_;
      time_ = other.time_;
      lastState_ = other.lastState_;
      targetPos_ = other.targetPos_.Clone();
      sourcePos_ = other.sourcePos_.Clone();
      moveDirection_ = other.moveDirection_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerMove Clone() {
      return new ReqAckPlayerMove(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int MoverFieldNumber = 1;
    private global::NFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "moveType" field.</summary>
    public const int MoveTypeFieldNumber = 2;
    private int moveType_;
    /// <summary>
    ///future_state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MoveType {
      get { return moveType_; }
      set {
        moveType_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "lastState" field.</summary>
    public const int LastStateFieldNumber = 5;
    private int lastState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastState {
      get { return lastState_; }
      set {
        lastState_ = value;
      }
    }

    /// <summary>Field number for the "target_pos" field.</summary>
    public const int TargetPosFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_targetPos_codec
        = pb::FieldCodec.ForMessage(50, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> targetPos_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> TargetPos {
      get { return targetPos_; }
    }

    /// <summary>Field number for the "source_pos" field.</summary>
    public const int SourcePosFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_sourcePos_codec
        = pb::FieldCodec.ForMessage(58, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> sourcePos_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> SourcePos {
      get { return sourcePos_; }
    }

    /// <summary>Field number for the "move_direction" field.</summary>
    public const int MoveDirectionFieldNumber = 8;
    private static readonly pb::FieldCodec<global::NFMsg.Vector3> _repeated_moveDirection_codec
        = pb::FieldCodec.ForMessage(66, global::NFMsg.Vector3.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Vector3> moveDirection_ = new pbc::RepeatedField<global::NFMsg.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Vector3> MoveDirection {
      get { return moveDirection_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mover, other.Mover)) return false;
      if (MoveType != other.MoveType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (Time != other.Time) return false;
      if (LastState != other.LastState) return false;
      if(!targetPos_.Equals(other.targetPos_)) return false;
      if(!sourcePos_.Equals(other.sourcePos_)) return false;
      if(!moveDirection_.Equals(other.moveDirection_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= Mover.GetHashCode();
      if (MoveType != 0) hash ^= MoveType.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Time != 0) hash ^= Time.GetHashCode();
      if (LastState != 0) hash ^= LastState.GetHashCode();
      hash ^= targetPos_.GetHashCode();
      hash ^= sourcePos_.GetHashCode();
      hash ^= moveDirection_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mover);
      }
      if (MoveType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MoveType);
      }
      if (Speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Speed);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      if (LastState != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastState);
      }
      targetPos_.WriteTo(output, _repeated_targetPos_codec);
      sourcePos_.WriteTo(output, _repeated_sourcePos_codec);
      moveDirection_.WriteTo(output, _repeated_moveDirection_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mover);
      }
      if (MoveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MoveType);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (LastState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastState);
      }
      size += targetPos_.CalculateSize(_repeated_targetPos_codec);
      size += sourcePos_.CalculateSize(_repeated_sourcePos_codec);
      size += moveDirection_.CalculateSize(_repeated_moveDirection_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerMove other) {
      if (other == null) {
        return;
      }
      if (other.mover_ != null) {
        if (mover_ == null) {
          Mover = new global::NFMsg.Ident();
        }
        Mover.MergeFrom(other.Mover);
      }
      if (other.MoveType != 0) {
        MoveType = other.MoveType;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.LastState != 0) {
        LastState = other.LastState;
      }
      targetPos_.Add(other.targetPos_);
      sourcePos_.Add(other.sourcePos_);
      moveDirection_.Add(other.moveDirection_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mover_ == null) {
              Mover = new global::NFMsg.Ident();
            }
            input.ReadMessage(Mover);
            break;
          }
          case 16: {
            MoveType = input.ReadInt32();
            break;
          }
          case 29: {
            Speed = input.ReadFloat();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 40: {
            LastState = input.ReadInt32();
            break;
          }
          case 50: {
            targetPos_.AddEntriesFrom(input, _repeated_targetPos_codec);
            break;
          }
          case 58: {
            sourcePos_.AddEntriesFrom(input, _repeated_sourcePos_codec);
            break;
          }
          case 66: {
            moveDirection_.AddEntriesFrom(input, _repeated_moveDirection_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckPlayerChat : pb::IMessage<ReqAckPlayerChat> {
    private static readonly pb::MessageParser<ReqAckPlayerChat> _parser = new pb::MessageParser<ReqAckPlayerChat>(() => new ReqAckPlayerChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat(ReqAckPlayerChat other) : this() {
      playerId_ = other.playerId_ != null ? other.playerId_.Clone() : null;
      playerName_ = other.playerName_;
      playerHeroId_ = other.playerHeroId_;
      playerHeroLevel_ = other.playerHeroLevel_;
      chatChannel_ = other.chatChannel_;
      chatType_ = other.chatType_;
      chatInfo_ = other.chatInfo_;
      targetId_ = other.targetId_ != null ? other.targetId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerChat Clone() {
      return new ReqAckPlayerChat(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private pb::ByteString playerName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_hero_id" field.</summary>
    public const int PlayerHeroIdFieldNumber = 3;
    private pb::ByteString playerHeroId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlayerHeroId {
      get { return playerHeroId_; }
      set {
        playerHeroId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_hero_level" field.</summary>
    public const int PlayerHeroLevelFieldNumber = 4;
    private pb::ByteString playerHeroLevel_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PlayerHeroLevel {
      get { return playerHeroLevel_; }
      set {
        playerHeroLevel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chat_channel" field.</summary>
    public const int ChatChannelFieldNumber = 5;
    private global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel chatChannel_ = global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel ChatChannel {
      get { return chatChannel_; }
      set {
        chatChannel_ = value;
      }
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 6;
    private global::NFMsg.ReqAckPlayerChat.Types.EGameChatType chatType_ = global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckPlayerChat.Types.EGameChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_info" field.</summary>
    public const int ChatInfoFieldNumber = 7;
    private pb::ByteString chatInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChatInfo {
      get { return chatInfo_; }
      set {
        chatInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 8;
    private global::NFMsg.Ident targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (PlayerName != other.PlayerName) return false;
      if (PlayerHeroId != other.PlayerHeroId) return false;
      if (PlayerHeroLevel != other.PlayerHeroLevel) return false;
      if (ChatChannel != other.ChatChannel) return false;
      if (ChatType != other.ChatType) return false;
      if (ChatInfo != other.ChatInfo) return false;
      if (!object.Equals(TargetId, other.TargetId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (PlayerHeroId.Length != 0) hash ^= PlayerHeroId.GetHashCode();
      if (PlayerHeroLevel.Length != 0) hash ^= PlayerHeroLevel.GetHashCode();
      if (ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) hash ^= ChatChannel.GetHashCode();
      if (ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) hash ^= ChatType.GetHashCode();
      if (ChatInfo.Length != 0) hash ^= ChatInfo.GetHashCode();
      if (targetId_ != null) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PlayerName);
      }
      if (PlayerHeroId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PlayerHeroId);
      }
      if (PlayerHeroLevel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PlayerHeroLevel);
      }
      if (ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ChatChannel);
      }
      if (ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ChatInfo);
      }
      if (targetId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlayerName);
      }
      if (PlayerHeroId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlayerHeroId);
      }
      if (PlayerHeroLevel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PlayerHeroLevel);
      }
      if (ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatChannel);
      }
      if (ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChatInfo);
      }
      if (targetId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerChat other) {
      if (other == null) {
        return;
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          PlayerId = new global::NFMsg.Ident();
        }
        PlayerId.MergeFrom(other.PlayerId);
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.PlayerHeroId.Length != 0) {
        PlayerHeroId = other.PlayerHeroId;
      }
      if (other.PlayerHeroLevel.Length != 0) {
        PlayerHeroLevel = other.PlayerHeroLevel;
      }
      if (other.ChatChannel != global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel.EgccGlobal) {
        ChatChannel = other.ChatChannel;
      }
      if (other.ChatType != global::NFMsg.ReqAckPlayerChat.Types.EGameChatType.EgctText) {
        ChatType = other.ChatType;
      }
      if (other.ChatInfo.Length != 0) {
        ChatInfo = other.ChatInfo;
      }
      if (other.targetId_ != null) {
        if (targetId_ == null) {
          TargetId = new global::NFMsg.Ident();
        }
        TargetId.MergeFrom(other.TargetId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerId_ == null) {
              PlayerId = new global::NFMsg.Ident();
            }
            input.ReadMessage(PlayerId);
            break;
          }
          case 18: {
            PlayerName = input.ReadBytes();
            break;
          }
          case 26: {
            PlayerHeroId = input.ReadBytes();
            break;
          }
          case 34: {
            PlayerHeroLevel = input.ReadBytes();
            break;
          }
          case 40: {
            ChatChannel = (global::NFMsg.ReqAckPlayerChat.Types.EGameChatChannel) input.ReadEnum();
            break;
          }
          case 48: {
            ChatType = (global::NFMsg.ReqAckPlayerChat.Types.EGameChatType) input.ReadEnum();
            break;
          }
          case 58: {
            ChatInfo = input.ReadBytes();
            break;
          }
          case 66: {
            if (targetId_ == null) {
              TargetId = new global::NFMsg.Ident();
            }
            input.ReadMessage(TargetId);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckPlayerChat message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameChatChannel {
        [pbr::OriginalName("EGCC_GLOBAL")] EgccGlobal = 0,
        [pbr::OriginalName("EGCC_CLAN")] EgccClan = 1,
        [pbr::OriginalName("EGCC_FRIEND")] EgccFriend = 2,
        [pbr::OriginalName("EGCC_BATTLE")] EgccBattle = 3,
        [pbr::OriginalName("EGCC_TEAM")] EgccTeam = 4,
        [pbr::OriginalName("EGCC_ROOM")] EgccRoom = 5,
      }

      public enum EGameChatType {
        [pbr::OriginalName("EGCT_TEXT")] EgctText = 0,
        [pbr::OriginalName("EGCT_VOICE")] EgctVoice = 1,
        [pbr::OriginalName("EGCT_EMOJI")] EgctEmoji = 2,
        [pbr::OriginalName("EGCT_DONATE_HERO")] EgctDonateHero = 10,
        [pbr::OriginalName("EGCT_DONATE_BUILDING")] EgctDonateBuilding = 11,
        [pbr::OriginalName("EGCT_DONATE_ITEM")] EgctDonateItem = 12,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckPlayerPosSync : pb::IMessage<ReqAckPlayerPosSync> {
    private static readonly pb::MessageParser<ReqAckPlayerPosSync> _parser = new pb::MessageParser<ReqAckPlayerPosSync>(() => new ReqAckPlayerPosSync());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckPlayerPosSync> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync(ReqAckPlayerPosSync other) : this() {
      mover_ = other.mover_ != null ? other.mover_.Clone() : null;
      time_ = other.time_;
      interpolationTime_ = other.interpolationTime_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      status_ = other.status_;
      frame_ = other.frame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckPlayerPosSync Clone() {
      return new ReqAckPlayerPosSync(this);
    }

    /// <summary>Field number for the "mover" field.</summary>
    public const int MoverFieldNumber = 1;
    private global::NFMsg.Ident mover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Mover {
      get { return mover_; }
      set {
        mover_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "InterpolationTime" field.</summary>
    public const int InterpolationTimeFieldNumber = 3;
    private float interpolationTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InterpolationTime {
      get { return interpolationTime_; }
      set {
        interpolationTime_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::NFMsg.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 5;
    private global::NFMsg.Vector3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 7;
    private int frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckPlayerPosSync);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckPlayerPosSync other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mover, other.Mover)) return false;
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InterpolationTime, other.InterpolationTime)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (Status != other.Status) return false;
      if (Frame != other.Frame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mover_ != null) hash ^= Mover.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (InterpolationTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InterpolationTime);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mover_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mover);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (InterpolationTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(InterpolationTime);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Direction);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Status);
      }
      if (Frame != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Frame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mover);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (InterpolationTime != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckPlayerPosSync other) {
      if (other == null) {
        return;
      }
      if (other.mover_ != null) {
        if (mover_ == null) {
          Mover = new global::NFMsg.Ident();
        }
        Mover.MergeFrom(other.Mover);
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.InterpolationTime != 0F) {
        InterpolationTime = other.InterpolationTime;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::NFMsg.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::NFMsg.Vector3();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mover_ == null) {
              Mover = new global::NFMsg.Ident();
            }
            input.ReadMessage(Mover);
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 29: {
            InterpolationTime = input.ReadFloat();
            break;
          }
          case 34: {
            if (position_ == null) {
              Position = new global::NFMsg.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 42: {
            if (direction_ == null) {
              Direction = new global::NFMsg.Vector3();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 48: {
            Status = input.ReadInt32();
            break;
          }
          case 56: {
            Frame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EffectData : pb::IMessage<EffectData> {
    private static readonly pb::MessageParser<EffectData> _parser = new pb::MessageParser<EffectData>(() => new EffectData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EffectData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData(EffectData other) : this() {
      effectIdent_ = other.effectIdent_ != null ? other.effectIdent_.Clone() : null;
      effectValue_ = other.effectValue_;
      effectRlt_ = other.effectRlt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EffectData Clone() {
      return new EffectData(this);
    }

    /// <summary>Field number for the "effect_ident" field.</summary>
    public const int EffectIdentFieldNumber = 1;
    private global::NFMsg.Ident effectIdent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident EffectIdent {
      get { return effectIdent_; }
      set {
        effectIdent_ = value;
      }
    }

    /// <summary>Field number for the "effect_value" field.</summary>
    public const int EffectValueFieldNumber = 2;
    private int effectValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectValue {
      get { return effectValue_; }
      set {
        effectValue_ = value;
      }
    }

    /// <summary>Field number for the "effect_rlt" field.</summary>
    public const int EffectRltFieldNumber = 3;
    private global::NFMsg.EffectData.Types.EResultType effectRlt_ = global::NFMsg.EffectData.Types.EResultType.EetFail;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EffectData.Types.EResultType EffectRlt {
      get { return effectRlt_; }
      set {
        effectRlt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EffectData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EffectData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectIdent, other.EffectIdent)) return false;
      if (EffectValue != other.EffectValue) return false;
      if (EffectRlt != other.EffectRlt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectIdent_ != null) hash ^= EffectIdent.GetHashCode();
      if (EffectValue != 0) hash ^= EffectValue.GetHashCode();
      if (EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) hash ^= EffectRlt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectIdent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectIdent);
      }
      if (EffectValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EffectValue);
      }
      if (EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EffectRlt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectIdent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectIdent);
      }
      if (EffectValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectValue);
      }
      if (EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EffectRlt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EffectData other) {
      if (other == null) {
        return;
      }
      if (other.effectIdent_ != null) {
        if (effectIdent_ == null) {
          EffectIdent = new global::NFMsg.Ident();
        }
        EffectIdent.MergeFrom(other.EffectIdent);
      }
      if (other.EffectValue != 0) {
        EffectValue = other.EffectValue;
      }
      if (other.EffectRlt != global::NFMsg.EffectData.Types.EResultType.EetFail) {
        EffectRlt = other.EffectRlt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectIdent_ == null) {
              EffectIdent = new global::NFMsg.Ident();
            }
            input.ReadMessage(EffectIdent);
            break;
          }
          case 16: {
            EffectValue = input.ReadInt32();
            break;
          }
          case 24: {
            EffectRlt = (global::NFMsg.EffectData.Types.EResultType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EffectData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EResultType {
        [pbr::OriginalName("EET_FAIL")] EetFail = 0,
        [pbr::OriginalName("EET_SUCCESS")] EetSuccess = 1,
        [pbr::OriginalName("EET_REFUSE")] EetRefuse = 2,
        [pbr::OriginalName("EET_MISS")] EetMiss = 3,
        [pbr::OriginalName("EET_CRIT")] EetCrit = 4,
      }

    }
    #endregion

  }

  public sealed partial class ReqAckUseSkill : pb::IMessage<ReqAckUseSkill> {
    private static readonly pb::MessageParser<ReqAckUseSkill> _parser = new pb::MessageParser<ReqAckUseSkill>(() => new ReqAckUseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill(ReqAckUseSkill other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      skillId_ = other.skillId_;
      useIndex_ = other.useIndex_;
      effectData_ = other.effectData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseSkill Clone() {
      return new ReqAckUseSkill(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::NFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private pb::ByteString skillId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_index" field.</summary>
    public const int UseIndexFieldNumber = 3;
    private int useIndex_;
    /// <summary>
    ///因为客户端要先展示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseIndex {
      get { return useIndex_; }
      set {
        useIndex_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int EffectDataFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(34, global::NFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::NFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.EffectData> EffectData {
      get { return effectData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (SkillId != other.SkillId) return false;
      if (UseIndex != other.UseIndex) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (SkillId.Length != 0) hash ^= SkillId.GetHashCode();
      if (UseIndex != 0) hash ^= UseIndex.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SkillId);
      }
      if (UseIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UseIndex);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SkillId);
      }
      if (UseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseIndex);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckUseSkill other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::NFMsg.Ident();
        }
        User.MergeFrom(other.User);
      }
      if (other.SkillId.Length != 0) {
        SkillId = other.SkillId;
      }
      if (other.UseIndex != 0) {
        UseIndex = other.UseIndex;
      }
      effectData_.Add(other.effectData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::NFMsg.Ident();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            SkillId = input.ReadBytes();
            break;
          }
          case 24: {
            UseIndex = input.ReadInt32();
            break;
          }
          case 34: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAckUseItem : pb::IMessage<ReqAckUseItem> {
    private static readonly pb::MessageParser<ReqAckUseItem> _parser = new pb::MessageParser<ReqAckUseItem>(() => new ReqAckUseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckUseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem(ReqAckUseItem other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      itemGuid_ = other.itemGuid_ != null ? other.itemGuid_.Clone() : null;
      effectData_ = other.effectData_.Clone();
      item_ = other.item_ != null ? other.item_.Clone() : null;
      targetid_ = other.targetid_ != null ? other.targetid_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckUseItem Clone() {
      return new ReqAckUseItem(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::NFMsg.Ident user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int ItemGuidFieldNumber = 2;
    private global::NFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ItemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    /// <summary>Field number for the "effect_data" field.</summary>
    public const int EffectDataFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.EffectData> _repeated_effectData_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.EffectData.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.EffectData> effectData_ = new pbc::RepeatedField<global::NFMsg.EffectData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.EffectData> EffectData {
      get { return effectData_; }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private global::NFMsg.ItemStruct item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ItemStruct Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "targetid" field.</summary>
    public const int TargetidFieldNumber = 5;
    private global::NFMsg.Ident targetid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Targetid {
      get { return targetid_; }
      set {
        targetid_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::NFMsg.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckUseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckUseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(ItemGuid, other.ItemGuid)) return false;
      if(!effectData_.Equals(other.effectData_)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Targetid, other.Targetid)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (itemGuid_ != null) hash ^= ItemGuid.GetHashCode();
      hash ^= effectData_.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (targetid_ != null) hash ^= Targetid.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemGuid);
      }
      effectData_.WriteTo(output, _repeated_effectData_codec);
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
      if (targetid_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Targetid);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemGuid);
      }
      size += effectData_.CalculateSize(_repeated_effectData_codec);
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (targetid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Targetid);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckUseItem other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::NFMsg.Ident();
        }
        User.MergeFrom(other.User);
      }
      if (other.itemGuid_ != null) {
        if (itemGuid_ == null) {
          ItemGuid = new global::NFMsg.Ident();
        }
        ItemGuid.MergeFrom(other.ItemGuid);
      }
      effectData_.Add(other.effectData_);
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::NFMsg.ItemStruct();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.targetid_ != null) {
        if (targetid_ == null) {
          Targetid = new global::NFMsg.Ident();
        }
        Targetid.MergeFrom(other.Targetid);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::NFMsg.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::NFMsg.Ident();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            if (itemGuid_ == null) {
              ItemGuid = new global::NFMsg.Ident();
            }
            input.ReadMessage(ItemGuid);
            break;
          }
          case 26: {
            effectData_.AddEntriesFrom(input, _repeated_effectData_codec);
            break;
          }
          case 34: {
            if (item_ == null) {
              Item = new global::NFMsg.ItemStruct();
            }
            input.ReadMessage(Item);
            break;
          }
          case 42: {
            if (targetid_ == null) {
              Targetid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Targetid);
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::NFMsg.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //////////////////////////////////////////
  ///EGMI_REQ_SWAP_SCENE
  /// </summary>
  public sealed partial class ReqAckSwapScene : pb::IMessage<ReqAckSwapScene> {
    private static readonly pb::MessageParser<ReqAckSwapScene> _parser = new pb::MessageParser<ReqAckSwapScene>(() => new ReqAckSwapScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckSwapScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene(ReqAckSwapScene other) : this() {
      transferType_ = other.transferType_;
      sceneId_ = other.sceneId_;
      lineId_ = other.lineId_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckSwapScene Clone() {
      return new ReqAckSwapScene(this);
    }

    /// <summary>Field number for the "transfer_type" field.</summary>
    public const int TransferTypeFieldNumber = 1;
    private global::NFMsg.ReqAckSwapScene.Types.EGameSwapType transferType_ = global::NFMsg.ReqAckSwapScene.Types.EGameSwapType.EgstNarmal;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckSwapScene.Types.EGameSwapType TransferType {
      get { return transferType_; }
      set {
        transferType_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "line_id" field.</summary>
    public const int LineIdFieldNumber = 3;
    private int lineId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineId {
      get { return lineId_; }
      set {
        lineId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 4;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 5;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 6;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckSwapScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckSwapScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransferType != other.TransferType) return false;
      if (SceneId != other.SceneId) return false;
      if (LineId != other.LineId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransferType != global::NFMsg.ReqAckSwapScene.Types.EGameSwapType.EgstNarmal) hash ^= TransferType.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (LineId != 0) hash ^= LineId.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransferType != global::NFMsg.ReqAckSwapScene.Types.EGameSwapType.EgstNarmal) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TransferType);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SceneId);
      }
      if (LineId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineId);
      }
      if (X != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Z);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransferType != global::NFMsg.ReqAckSwapScene.Types.EGameSwapType.EgstNarmal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransferType);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (LineId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckSwapScene other) {
      if (other == null) {
        return;
      }
      if (other.TransferType != global::NFMsg.ReqAckSwapScene.Types.EGameSwapType.EgstNarmal) {
        TransferType = other.TransferType;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.LineId != 0) {
        LineId = other.LineId;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransferType = (global::NFMsg.ReqAckSwapScene.Types.EGameSwapType) input.ReadEnum();
            break;
          }
          case 16: {
            SceneId = input.ReadInt32();
            break;
          }
          case 24: {
            LineId = input.ReadInt32();
            break;
          }
          case 37: {
            X = input.ReadFloat();
            break;
          }
          case 45: {
            Y = input.ReadFloat();
            break;
          }
          case 53: {
            Z = input.ReadFloat();
            break;
          }
          case 58: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckSwapScene message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGameSwapType {
        /// <summary>
        ///普通城镇传送
        /// </summary>
        [pbr::OriginalName("EGST_NARMAL")] EgstNarmal = 0,
        /// <summary>
        ///普通副本
        /// </summary>
        [pbr::OriginalName("EGST_CLONE")] EgstClone = 1,
        /// <summary>
        ///竞技场
        /// </summary>
        [pbr::OriginalName("EGST_ARENA")] EgstArena = 2,
        /// <summary>
        ///镜像空间
        /// </summary>
        [pbr::OriginalName("EGST_MIRROR")] EgstMirror = 3,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_SWAP_HOME_SCENE
  /// </summary>
  public sealed partial class ReqAckHomeScene : pb::IMessage<ReqAckHomeScene> {
    private static readonly pb::MessageParser<ReqAckHomeScene> _parser = new pb::MessageParser<ReqAckHomeScene>(() => new ReqAckHomeScene());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckHomeScene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene(ReqAckHomeScene other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckHomeScene Clone() {
      return new ReqAckHomeScene(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckHomeScene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckHomeScene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckHomeScene other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemStruct : pb::IMessage<ItemStruct> {
    private static readonly pb::MessageParser<ItemStruct> _parser = new pb::MessageParser<ItemStruct>(() => new ItemStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct(ItemStruct other) : this() {
      itemId_ = other.itemId_;
      itemCount_ = other.itemCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemStruct Clone() {
      return new ItemStruct(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private pb::ByteString itemId_ = pb::ByteString.Empty;
    /// <summary>
    /// 配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ItemId {
      get { return itemId_; }
      set {
        itemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private int itemCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemCount != other.ItemCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId.Length != 0) hash ^= ItemId.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ItemId);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ItemId);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemStruct other) {
      if (other == null) {
        return;
      }
      if (other.ItemId.Length != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemId = input.ReadBytes();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyStruct : pb::IMessage<CurrencyStruct> {
    private static readonly pb::MessageParser<CurrencyStruct> _parser = new pb::MessageParser<CurrencyStruct>(() => new CurrencyStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct(CurrencyStruct other) : this() {
      currencyType_ = other.currencyType_;
      currencyCount_ = other.currencyCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyStruct Clone() {
      return new CurrencyStruct(this);
    }

    /// <summary>Field number for the "currency_type" field.</summary>
    public const int CurrencyTypeFieldNumber = 1;
    private int currencyType_;
    /// <summary>
    /// 金币，钻石，体力等等东西的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrencyType {
      get { return currencyType_; }
      set {
        currencyType_ = value;
      }
    }

    /// <summary>Field number for the "currency_count" field.</summary>
    public const int CurrencyCountFieldNumber = 2;
    private int currencyCount_;
    /// <summary>
    /// 数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrencyCount {
      get { return currencyCount_; }
      set {
        currencyCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyType != other.CurrencyType) return false;
      if (CurrencyCount != other.CurrencyCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyType != 0) hash ^= CurrencyType.GetHashCode();
      if (CurrencyCount != 0) hash ^= CurrencyCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrencyType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrencyType);
      }
      if (CurrencyCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrencyCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyType);
      }
      if (CurrencyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyStruct other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyType != 0) {
        CurrencyType = other.CurrencyType;
      }
      if (other.CurrencyCount != 0) {
        CurrencyCount = other.CurrencyCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrencyType = input.ReadInt32();
            break;
          }
          case 16: {
            CurrencyCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_RELIVE_HERO						= 1522;		 //
  /// </summary>
  public sealed partial class ReqAckReliveHero : pb::IMessage<ReqAckReliveHero> {
    private static readonly pb::MessageParser<ReqAckReliveHero> _parser = new pb::MessageParser<ReqAckReliveHero>(() => new ReqAckReliveHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckReliveHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckReliveHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckReliveHero(ReqAckReliveHero other) : this() {
      diamond_ = other.diamond_;
      heroId_ = other.heroId_ != null ? other.heroId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckReliveHero Clone() {
      return new ReqAckReliveHero(this);
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 1;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private global::NFMsg.Ident heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckReliveHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckReliveHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Diamond != other.Diamond) return false;
      if (!object.Equals(HeroId, other.HeroId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (heroId_ != null) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Diamond != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Diamond);
      }
      if (heroId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (heroId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckReliveHero other) {
      if (other == null) {
        return;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.heroId_ != null) {
        if (heroId_ == null) {
          HeroId = new global::NFMsg.Ident();
        }
        HeroId.MergeFrom(other.HeroId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Diamond = input.ReadInt32();
            break;
          }
          case 18: {
            if (heroId_ == null) {
              HeroId = new global::NFMsg.Ident();
            }
            input.ReadMessage(HeroId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqPickDropItem : pb::IMessage<ReqPickDropItem> {
    private static readonly pb::MessageParser<ReqPickDropItem> _parser = new pb::MessageParser<ReqPickDropItem>(() => new ReqPickDropItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqPickDropItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem(ReqPickDropItem other) : this() {
      itemGuid_ = other.itemGuid_ != null ? other.itemGuid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqPickDropItem Clone() {
      return new ReqPickDropItem(this);
    }

    /// <summary>Field number for the "item_guid" field.</summary>
    public const int ItemGuidFieldNumber = 2;
    private global::NFMsg.Ident itemGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ItemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqPickDropItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqPickDropItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ItemGuid, other.ItemGuid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (itemGuid_ != null) hash ^= ItemGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemGuid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ItemGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemGuid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqPickDropItem other) {
      if (other == null) {
        return;
      }
      if (other.itemGuid_ != null) {
        if (itemGuid_ == null) {
          ItemGuid = new global::NFMsg.Ident();
        }
        ItemGuid.MergeFrom(other.ItemGuid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (itemGuid_ == null) {
              ItemGuid = new global::NFMsg.Ident();
            }
            input.ReadMessage(ItemGuid);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqAcceptTask : pb::IMessage<ReqAcceptTask> {
    private static readonly pb::MessageParser<ReqAcceptTask> _parser = new pb::MessageParser<ReqAcceptTask>(() => new ReqAcceptTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAcceptTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask(ReqAcceptTask other) : this() {
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAcceptTask Clone() {
      return new ReqAcceptTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private pb::ByteString taskId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAcceptTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAcceptTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAcceptTask other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqCompeleteTask : pb::IMessage<ReqCompeleteTask> {
    private static readonly pb::MessageParser<ReqCompeleteTask> _parser = new pb::MessageParser<ReqCompeleteTask>(() => new ReqCompeleteTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqCompeleteTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask(ReqCompeleteTask other) : this() {
      taskId_ = other.taskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqCompeleteTask Clone() {
      return new ReqCompeleteTask(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private pb::ByteString taskId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqCompeleteTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqCompeleteTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TaskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TaskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqCompeleteTask other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_ADD_BUILDING						= 5000; 	//
  /// </summary>
  public sealed partial class ReqAddSceneBuilding : pb::IMessage<ReqAddSceneBuilding> {
    private static readonly pb::MessageParser<ReqAddSceneBuilding> _parser = new pb::MessageParser<ReqAddSceneBuilding>(() => new ReqAddSceneBuilding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAddSceneBuilding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddSceneBuilding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddSceneBuilding(ReqAddSceneBuilding other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      guid_ = other.guid_ != null ? other.guid_.Clone() : null;
      master_ = other.master_ != null ? other.master_.Clone() : null;
      configId_ = other.configId_;
      sceneId_ = other.sceneId_;
      masterName_ = other.masterName_;
      isHomeScene_ = other.isHomeScene_;
      isBuilding_ = other.isBuilding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAddSceneBuilding Clone() {
      return new ReqAddSceneBuilding(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::NFMsg.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private global::NFMsg.Ident guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int MasterFieldNumber = 3;
    private global::NFMsg.Ident master_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Master {
      get { return master_; }
      set {
        master_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 4;
    private pb::ByteString configId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConfigId {
      get { return configId_; }
      set {
        configId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 5;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "master_name" field.</summary>
    public const int MasterNameFieldNumber = 6;
    private pb::ByteString masterName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MasterName {
      get { return masterName_; }
      set {
        masterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_home_scene" field.</summary>
    public const int IsHomeSceneFieldNumber = 7;
    private int isHomeScene_;
    /// <summary>
    ///is home or clan scene
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsHomeScene {
      get { return isHomeScene_; }
      set {
        isHomeScene_ = value;
      }
    }

    /// <summary>Field number for the "is_building" field.</summary>
    public const int IsBuildingFieldNumber = 8;
    private int isBuilding_;
    /// <summary>
    ///building or tree
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsBuilding {
      get { return isBuilding_; }
      set {
        isBuilding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAddSceneBuilding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAddSceneBuilding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!object.Equals(Guid, other.Guid)) return false;
      if (!object.Equals(Master, other.Master)) return false;
      if (ConfigId != other.ConfigId) return false;
      if (SceneId != other.SceneId) return false;
      if (MasterName != other.MasterName) return false;
      if (IsHomeScene != other.IsHomeScene) return false;
      if (IsBuilding != other.IsBuilding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (guid_ != null) hash ^= Guid.GetHashCode();
      if (master_ != null) hash ^= Master.GetHashCode();
      if (ConfigId.Length != 0) hash ^= ConfigId.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (MasterName.Length != 0) hash ^= MasterName.GetHashCode();
      if (IsHomeScene != 0) hash ^= IsHomeScene.GetHashCode();
      if (IsBuilding != 0) hash ^= IsBuilding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (guid_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Guid);
      }
      if (master_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Master);
      }
      if (ConfigId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ConfigId);
      }
      if (SceneId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SceneId);
      }
      if (MasterName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(MasterName);
      }
      if (IsHomeScene != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IsHomeScene);
      }
      if (IsBuilding != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IsBuilding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (guid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guid);
      }
      if (master_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Master);
      }
      if (ConfigId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConfigId);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (MasterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MasterName);
      }
      if (IsHomeScene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsHomeScene);
      }
      if (IsBuilding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsBuilding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAddSceneBuilding other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::NFMsg.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.guid_ != null) {
        if (guid_ == null) {
          Guid = new global::NFMsg.Ident();
        }
        Guid.MergeFrom(other.Guid);
      }
      if (other.master_ != null) {
        if (master_ == null) {
          Master = new global::NFMsg.Ident();
        }
        Master.MergeFrom(other.Master);
      }
      if (other.ConfigId.Length != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.MasterName.Length != 0) {
        MasterName = other.MasterName;
      }
      if (other.IsHomeScene != 0) {
        IsHomeScene = other.IsHomeScene;
      }
      if (other.IsBuilding != 0) {
        IsBuilding = other.IsBuilding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::NFMsg.Vector3();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 18: {
            if (guid_ == null) {
              Guid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Guid);
            break;
          }
          case 26: {
            if (master_ == null) {
              Master = new global::NFMsg.Ident();
            }
            input.ReadMessage(Master);
            break;
          }
          case 34: {
            ConfigId = input.ReadBytes();
            break;
          }
          case 40: {
            SceneId = input.ReadInt32();
            break;
          }
          case 50: {
            MasterName = input.ReadBytes();
            break;
          }
          case 56: {
            IsHomeScene = input.ReadInt32();
            break;
          }
          case 64: {
            IsBuilding = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqSceneBuildings : pb::IMessage<ReqSceneBuildings> {
    private static readonly pb::MessageParser<ReqSceneBuildings> _parser = new pb::MessageParser<ReqSceneBuildings>(() => new ReqSceneBuildings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSceneBuildings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSceneBuildings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSceneBuildings(ReqSceneBuildings other) : this() {
      sceneId_ = other.sceneId_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSceneBuildings Clone() {
      return new ReqSceneBuildings(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::NFMsg.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSceneBuildings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSceneBuildings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSceneBuildings other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::NFMsg.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              Pos = new global::NFMsg.Vector3();
            }
            input.ReadMessage(Pos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AckSceneBuildings : pb::IMessage<AckSceneBuildings> {
    private static readonly pb::MessageParser<AckSceneBuildings> _parser = new pb::MessageParser<AckSceneBuildings>(() => new AckSceneBuildings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSceneBuildings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSceneBuildings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSceneBuildings(AckSceneBuildings other) : this() {
      buildings_ = other.buildings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSceneBuildings Clone() {
      return new AckSceneBuildings(this);
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAddSceneBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.ReqAddSceneBuilding.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings_ = new pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> Buildings {
      get { return buildings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSceneBuildings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSceneBuildings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buildings_.Equals(other.buildings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buildings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSceneBuildings other) {
      if (other == null) {
        return;
      }
      buildings_.Add(other.buildings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReqStoreSceneBuildings : pb::IMessage<ReqStoreSceneBuildings> {
    private static readonly pb::MessageParser<ReqStoreSceneBuildings> _parser = new pb::MessageParser<ReqStoreSceneBuildings>(() => new ReqStoreSceneBuildings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqStoreSceneBuildings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStoreSceneBuildings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStoreSceneBuildings(ReqStoreSceneBuildings other) : this() {
      guid_ = other.guid_ != null ? other.guid_.Clone() : null;
      homeSceneId_ = other.homeSceneId_;
      buildings_ = other.buildings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqStoreSceneBuildings Clone() {
      return new ReqStoreSceneBuildings(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private global::NFMsg.Ident guid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    /// <summary>Field number for the "home_scene_id" field.</summary>
    public const int HomeSceneIdFieldNumber = 2;
    private int homeSceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HomeSceneId {
      get { return homeSceneId_; }
      set {
        homeSceneId_ = value;
      }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAddSceneBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.ReqAddSceneBuilding.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings_ = new pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> Buildings {
      get { return buildings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqStoreSceneBuildings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqStoreSceneBuildings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Guid, other.Guid)) return false;
      if (HomeSceneId != other.HomeSceneId) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guid_ != null) hash ^= Guid.GetHashCode();
      if (HomeSceneId != 0) hash ^= HomeSceneId.GetHashCode();
      hash ^= buildings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Guid);
      }
      if (HomeSceneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HomeSceneId);
      }
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guid);
      }
      if (HomeSceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HomeSceneId);
      }
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqStoreSceneBuildings other) {
      if (other == null) {
        return;
      }
      if (other.guid_ != null) {
        if (guid_ == null) {
          Guid = new global::NFMsg.Ident();
        }
        Guid.MergeFrom(other.Guid);
      }
      if (other.HomeSceneId != 0) {
        HomeSceneId = other.HomeSceneId;
      }
      buildings_.Add(other.buildings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (guid_ == null) {
              Guid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Guid);
            break;
          }
          case 16: {
            HomeSceneId = input.ReadInt32();
            break;
          }
          case 26: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ////////////////工会/////////////////////////////////////////////////////////////////////////////////////
  ///EGMI_REQ_CREATE_CLAN                       = 300; // 申请创建公会 EGMI_ACK_CREATE_CLAN						= 301; // 创建公会结果
  /// </summary>
  public sealed partial class ReqAckCreateClan : pb::IMessage<ReqAckCreateClan> {
    private static readonly pb::MessageParser<ReqAckCreateClan> _parser = new pb::MessageParser<ReqAckCreateClan>(() => new ReqAckCreateClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCreateClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan(ReqAckCreateClan other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      clanName_ = other.clanName_;
      clanDesc_ = other.clanDesc_;
      clanPlayerId_ = other.clanPlayerId_ != null ? other.clanPlayerId_.Clone() : null;
      clanPlayerName_ = other.clanPlayerName_;
      clanPlayerBp_ = other.clanPlayerBp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCreateClan Clone() {
      return new ReqAckCreateClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int ClanNameFieldNumber = 2;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanName {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clan_desc" field.</summary>
    public const int ClanDescFieldNumber = 3;
    private pb::ByteString clanDesc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanDesc {
      get { return clanDesc_; }
      set {
        clanDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clan_player_id" field.</summary>
    public const int ClanPlayerIdFieldNumber = 4;
    private global::NFMsg.Ident clanPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanPlayerId {
      get { return clanPlayerId_; }
      set {
        clanPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "clan_player_name" field.</summary>
    public const int ClanPlayerNameFieldNumber = 5;
    private pb::ByteString clanPlayerName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanPlayerName {
      get { return clanPlayerName_; }
      set {
        clanPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clan_player_bp" field.</summary>
    public const int ClanPlayerBpFieldNumber = 6;
    private int clanPlayerBp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClanPlayerBp {
      get { return clanPlayerBp_; }
      set {
        clanPlayerBp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCreateClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCreateClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (ClanName != other.ClanName) return false;
      if (ClanDesc != other.ClanDesc) return false;
      if (!object.Equals(ClanPlayerId, other.ClanPlayerId)) return false;
      if (ClanPlayerName != other.ClanPlayerName) return false;
      if (ClanPlayerBp != other.ClanPlayerBp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
      if (ClanDesc.Length != 0) hash ^= ClanDesc.GetHashCode();
      if (clanPlayerId_ != null) hash ^= ClanPlayerId.GetHashCode();
      if (ClanPlayerName.Length != 0) hash ^= ClanPlayerName.GetHashCode();
      if (ClanPlayerBp != 0) hash ^= ClanPlayerBp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (ClanName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ClanName);
      }
      if (ClanDesc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ClanDesc);
      }
      if (clanPlayerId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClanPlayerId);
      }
      if (ClanPlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ClanPlayerName);
      }
      if (ClanPlayerBp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClanPlayerBp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (ClanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
      }
      if (ClanDesc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanDesc);
      }
      if (clanPlayerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanPlayerId);
      }
      if (ClanPlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanPlayerName);
      }
      if (ClanPlayerBp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanPlayerBp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCreateClan other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          ClanId = new global::NFMsg.Ident();
        }
        ClanId.MergeFrom(other.ClanId);
      }
      if (other.ClanName.Length != 0) {
        ClanName = other.ClanName;
      }
      if (other.ClanDesc.Length != 0) {
        ClanDesc = other.ClanDesc;
      }
      if (other.clanPlayerId_ != null) {
        if (clanPlayerId_ == null) {
          ClanPlayerId = new global::NFMsg.Ident();
        }
        ClanPlayerId.MergeFrom(other.ClanPlayerId);
      }
      if (other.ClanPlayerName.Length != 0) {
        ClanPlayerName = other.ClanPlayerName;
      }
      if (other.ClanPlayerBp != 0) {
        ClanPlayerBp = other.ClanPlayerBp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              ClanId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanId);
            break;
          }
          case 18: {
            ClanName = input.ReadBytes();
            break;
          }
          case 26: {
            ClanDesc = input.ReadBytes();
            break;
          }
          case 34: {
            if (clanPlayerId_ == null) {
              ClanPlayerId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanPlayerId);
            break;
          }
          case 42: {
            ClanPlayerName = input.ReadBytes();
            break;
          }
          case 48: {
            ClanPlayerBp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_SEARCH_CLAN                       = 308; // 申请搜索公会
  /// </summary>
  public sealed partial class ReqSearchClan : pb::IMessage<ReqSearchClan> {
    private static readonly pb::MessageParser<ReqSearchClan> _parser = new pb::MessageParser<ReqSearchClan>(() => new ReqSearchClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan(ReqSearchClan other) : this() {
      clanName_ = other.clanName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchClan Clone() {
      return new ReqSearchClan(this);
    }

    /// <summary>Field number for the "clan_name" field.</summary>
    public const int ClanNameFieldNumber = 1;
    private pb::ByteString clanName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanName {
      get { return clanName_; }
      set {
        clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSearchClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSearchClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClanName != other.ClanName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClanName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ClanName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClanName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSearchClan other) {
      if (other == null) {
        return;
      }
      if (other.ClanName.Length != 0) {
        ClanName = other.ClanName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClanName = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_SEARCH_CLAN                       = 309; // 返回搜索公会
  /// </summary>
  public sealed partial class AckSearchClan : pb::IMessage<AckSearchClan> {
    private static readonly pb::MessageParser<AckSearchClan> _parser = new pb::MessageParser<AckSearchClan>(() => new AckSearchClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan(AckSearchClan other) : this() {
      clanList_ = other.clanList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchClan Clone() {
      return new AckSearchClan(this);
    }

    /// <summary>Field number for the "clan_list" field.</summary>
    public const int ClanListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NFMsg.AckSearchClan.Types.SearchClanObject> _repeated_clanList_codec
        = pb::FieldCodec.ForMessage(10, global::NFMsg.AckSearchClan.Types.SearchClanObject.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject> clanList_ = new pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.AckSearchClan.Types.SearchClanObject> ClanList {
      get { return clanList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSearchClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSearchClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!clanList_.Equals(other.clanList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= clanList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clanList_.WriteTo(output, _repeated_clanList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clanList_.CalculateSize(_repeated_clanList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSearchClan other) {
      if (other == null) {
        return;
      }
      clanList_.Add(other.clanList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            clanList_.AddEntriesFrom(input, _repeated_clanList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AckSearchClan message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SearchClanObject : pb::IMessage<SearchClanObject> {
        private static readonly pb::MessageParser<SearchClanObject> _parser = new pb::MessageParser<SearchClanObject>(() => new SearchClanObject());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SearchClanObject> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::NFMsg.AckSearchClan.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject(SearchClanObject other) : this() {
          clanID_ = other.clanID_ != null ? other.clanID_.Clone() : null;
          clanName_ = other.clanName_;
          clanIcon_ = other.clanIcon_;
          clanMemberCount_ = other.clanMemberCount_;
          clanMemberMaxCount_ = other.clanMemberMaxCount_;
          clanHonor_ = other.clanHonor_;
          clanRank_ = other.clanRank_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SearchClanObject Clone() {
          return new SearchClanObject(this);
        }

        /// <summary>Field number for the "clan_ID" field.</summary>
        public const int ClanIDFieldNumber = 1;
        private global::NFMsg.Ident clanID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::NFMsg.Ident ClanID {
          get { return clanID_; }
          set {
            clanID_ = value;
          }
        }

        /// <summary>Field number for the "clan_name" field.</summary>
        public const int ClanNameFieldNumber = 2;
        private pb::ByteString clanName_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ClanName {
          get { return clanName_; }
          set {
            clanName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "clan_icon" field.</summary>
        public const int ClanIconFieldNumber = 3;
        private pb::ByteString clanIcon_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ClanIcon {
          get { return clanIcon_; }
          set {
            clanIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "clan_member_count" field.</summary>
        public const int ClanMemberCountFieldNumber = 4;
        private int clanMemberCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanMemberCount {
          get { return clanMemberCount_; }
          set {
            clanMemberCount_ = value;
          }
        }

        /// <summary>Field number for the "clan_member_max_count" field.</summary>
        public const int ClanMemberMaxCountFieldNumber = 5;
        private int clanMemberMaxCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanMemberMaxCount {
          get { return clanMemberMaxCount_; }
          set {
            clanMemberMaxCount_ = value;
          }
        }

        /// <summary>Field number for the "clan_honor" field.</summary>
        public const int ClanHonorFieldNumber = 6;
        private int clanHonor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanHonor {
          get { return clanHonor_; }
          set {
            clanHonor_ = value;
          }
        }

        /// <summary>Field number for the "clan_rank" field.</summary>
        public const int ClanRankFieldNumber = 7;
        private int clanRank_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClanRank {
          get { return clanRank_; }
          set {
            clanRank_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SearchClanObject);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SearchClanObject other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ClanID, other.ClanID)) return false;
          if (ClanName != other.ClanName) return false;
          if (ClanIcon != other.ClanIcon) return false;
          if (ClanMemberCount != other.ClanMemberCount) return false;
          if (ClanMemberMaxCount != other.ClanMemberMaxCount) return false;
          if (ClanHonor != other.ClanHonor) return false;
          if (ClanRank != other.ClanRank) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (clanID_ != null) hash ^= ClanID.GetHashCode();
          if (ClanName.Length != 0) hash ^= ClanName.GetHashCode();
          if (ClanIcon.Length != 0) hash ^= ClanIcon.GetHashCode();
          if (ClanMemberCount != 0) hash ^= ClanMemberCount.GetHashCode();
          if (ClanMemberMaxCount != 0) hash ^= ClanMemberMaxCount.GetHashCode();
          if (ClanHonor != 0) hash ^= ClanHonor.GetHashCode();
          if (ClanRank != 0) hash ^= ClanRank.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (clanID_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ClanID);
          }
          if (ClanName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(ClanName);
          }
          if (ClanIcon.Length != 0) {
            output.WriteRawTag(26);
            output.WriteBytes(ClanIcon);
          }
          if (ClanMemberCount != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ClanMemberCount);
          }
          if (ClanMemberMaxCount != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(ClanMemberMaxCount);
          }
          if (ClanHonor != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ClanHonor);
          }
          if (ClanRank != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(ClanRank);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (clanID_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanID);
          }
          if (ClanName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanName);
          }
          if (ClanIcon.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanIcon);
          }
          if (ClanMemberCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanMemberCount);
          }
          if (ClanMemberMaxCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanMemberMaxCount);
          }
          if (ClanHonor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanHonor);
          }
          if (ClanRank != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanRank);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SearchClanObject other) {
          if (other == null) {
            return;
          }
          if (other.clanID_ != null) {
            if (clanID_ == null) {
              ClanID = new global::NFMsg.Ident();
            }
            ClanID.MergeFrom(other.ClanID);
          }
          if (other.ClanName.Length != 0) {
            ClanName = other.ClanName;
          }
          if (other.ClanIcon.Length != 0) {
            ClanIcon = other.ClanIcon;
          }
          if (other.ClanMemberCount != 0) {
            ClanMemberCount = other.ClanMemberCount;
          }
          if (other.ClanMemberMaxCount != 0) {
            ClanMemberMaxCount = other.ClanMemberMaxCount;
          }
          if (other.ClanHonor != 0) {
            ClanHonor = other.ClanHonor;
          }
          if (other.ClanRank != 0) {
            ClanRank = other.ClanRank;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (clanID_ == null) {
                  ClanID = new global::NFMsg.Ident();
                }
                input.ReadMessage(ClanID);
                break;
              }
              case 18: {
                ClanName = input.ReadBytes();
                break;
              }
              case 26: {
                ClanIcon = input.ReadBytes();
                break;
              }
              case 32: {
                ClanMemberCount = input.ReadInt32();
                break;
              }
              case 40: {
                ClanMemberMaxCount = input.ReadInt32();
                break;
              }
              case 48: {
                ClanHonor = input.ReadInt32();
                break;
              }
              case 56: {
                ClanRank = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_REQ_JOIN_CLAN                         = 302; // 申请加入公会 EGMI_ACK_JOIN_CLAN							= 303; // 加入公会结果
  /// </summary>
  public sealed partial class ReqAckJoinClan : pb::IMessage<ReqAckJoinClan> {
    private static readonly pb::MessageParser<ReqAckJoinClan> _parser = new pb::MessageParser<ReqAckJoinClan>(() => new ReqAckJoinClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckJoinClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan(ReqAckJoinClan other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      clanPlayerId_ = other.clanPlayerId_ != null ? other.clanPlayerId_.Clone() : null;
      clanPlayerName_ = other.clanPlayerName_;
      clanPlayerBp_ = other.clanPlayerBp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckJoinClan Clone() {
      return new ReqAckJoinClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_player_id" field.</summary>
    public const int ClanPlayerIdFieldNumber = 4;
    private global::NFMsg.Ident clanPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanPlayerId {
      get { return clanPlayerId_; }
      set {
        clanPlayerId_ = value;
      }
    }

    /// <summary>Field number for the "clan_player_name" field.</summary>
    public const int ClanPlayerNameFieldNumber = 5;
    private pb::ByteString clanPlayerName_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClanPlayerName {
      get { return clanPlayerName_; }
      set {
        clanPlayerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clan_player_bp" field.</summary>
    public const int ClanPlayerBpFieldNumber = 6;
    private int clanPlayerBp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClanPlayerBp {
      get { return clanPlayerBp_; }
      set {
        clanPlayerBp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckJoinClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckJoinClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (!object.Equals(ClanPlayerId, other.ClanPlayerId)) return false;
      if (ClanPlayerName != other.ClanPlayerName) return false;
      if (ClanPlayerBp != other.ClanPlayerBp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (clanPlayerId_ != null) hash ^= ClanPlayerId.GetHashCode();
      if (ClanPlayerName.Length != 0) hash ^= ClanPlayerName.GetHashCode();
      if (ClanPlayerBp != 0) hash ^= ClanPlayerBp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (clanPlayerId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClanPlayerId);
      }
      if (ClanPlayerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ClanPlayerName);
      }
      if (ClanPlayerBp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClanPlayerBp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (clanPlayerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanPlayerId);
      }
      if (ClanPlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClanPlayerName);
      }
      if (ClanPlayerBp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClanPlayerBp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckJoinClan other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          ClanId = new global::NFMsg.Ident();
        }
        ClanId.MergeFrom(other.ClanId);
      }
      if (other.clanPlayerId_ != null) {
        if (clanPlayerId_ == null) {
          ClanPlayerId = new global::NFMsg.Ident();
        }
        ClanPlayerId.MergeFrom(other.ClanPlayerId);
      }
      if (other.ClanPlayerName.Length != 0) {
        ClanPlayerName = other.ClanPlayerName;
      }
      if (other.ClanPlayerBp != 0) {
        ClanPlayerBp = other.ClanPlayerBp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              ClanId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanId);
            break;
          }
          case 34: {
            if (clanPlayerId_ == null) {
              ClanPlayerId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanPlayerId);
            break;
          }
          case 42: {
            ClanPlayerName = input.ReadBytes();
            break;
          }
          case 48: {
            ClanPlayerBp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_LEAVE_CLAN						= 305; // 离开公会结果 
  /// </summary>
  public sealed partial class ReqAckLeaveClan : pb::IMessage<ReqAckLeaveClan> {
    private static readonly pb::MessageParser<ReqAckLeaveClan> _parser = new pb::MessageParser<ReqAckLeaveClan>(() => new ReqAckLeaveClan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckLeaveClan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan(ReqAckLeaveClan other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      clanPlayerId_ = other.clanPlayerId_ != null ? other.clanPlayerId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckLeaveClan Clone() {
      return new ReqAckLeaveClan(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "clan_player_id" field.</summary>
    public const int ClanPlayerIdFieldNumber = 2;
    private global::NFMsg.Ident clanPlayerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanPlayerId {
      get { return clanPlayerId_; }
      set {
        clanPlayerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckLeaveClan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckLeaveClan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (!object.Equals(ClanPlayerId, other.ClanPlayerId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (clanPlayerId_ != null) hash ^= ClanPlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (clanPlayerId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ClanPlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (clanPlayerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanPlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckLeaveClan other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          ClanId = new global::NFMsg.Ident();
        }
        ClanId.MergeFrom(other.ClanId);
      }
      if (other.clanPlayerId_ != null) {
        if (clanPlayerId_ == null) {
          ClanPlayerId = new global::NFMsg.Ident();
        }
        ClanPlayerId.MergeFrom(other.ClanPlayerId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              ClanId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanId);
            break;
          }
          case 18: {
            if (clanPlayerId_ == null) {
              ClanPlayerId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanPlayerId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作成员 EGMI_REQ_OPR_CLAN                        	= 306; // 申请成员操作 EGMI_ACK_OPR_CLAN                        	= 307; // 成员操作结果
  /// </summary>
  public sealed partial class ReqAckOprClanMember : pb::IMessage<ReqAckOprClanMember> {
    private static readonly pb::MessageParser<ReqAckOprClanMember> _parser = new pb::MessageParser<ReqAckOprClanMember>(() => new ReqAckOprClanMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckOprClanMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember(ReqAckOprClanMember other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      playerId_ = other.playerId_ != null ? other.playerId_.Clone() : null;
      memberId_ = other.memberId_ != null ? other.memberId_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckOprClanMember Clone() {
      return new ReqAckOprClanMember(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private global::NFMsg.Ident playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 3;
    private global::NFMsg.Ident memberId_;
    /// <summary>
    ///被操作的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType type_ = global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType.EgatDown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckOprClanMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckOprClanMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      if (!object.Equals(PlayerId, other.PlayerId)) return false;
      if (!object.Equals(MemberId, other.MemberId)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (playerId_ != null) hash ^= PlayerId.GetHashCode();
      if (memberId_ != null) hash ^= MemberId.GetHashCode();
      if (Type != global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType.EgatDown) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (playerId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerId);
      }
      if (memberId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MemberId);
      }
      if (Type != global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType.EgatDown) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (playerId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerId);
      }
      if (memberId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberId);
      }
      if (Type != global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType.EgatDown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckOprClanMember other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          ClanId = new global::NFMsg.Ident();
        }
        ClanId.MergeFrom(other.ClanId);
      }
      if (other.playerId_ != null) {
        if (playerId_ == null) {
          PlayerId = new global::NFMsg.Ident();
        }
        PlayerId.MergeFrom(other.PlayerId);
      }
      if (other.memberId_ != null) {
        if (memberId_ == null) {
          MemberId = new global::NFMsg.Ident();
        }
        MemberId.MergeFrom(other.MemberId);
      }
      if (other.Type != global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType.EgatDown) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              ClanId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanId);
            break;
          }
          case 18: {
            if (playerId_ == null) {
              PlayerId = new global::NFMsg.Ident();
            }
            input.ReadMessage(PlayerId);
            break;
          }
          case 26: {
            if (memberId_ == null) {
              MemberId = new global::NFMsg.Ident();
            }
            input.ReadMessage(MemberId);
            break;
          }
          case 32: {
            Type = (global::NFMsg.ReqAckOprClanMember.Types.EGClanMemberOprType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReqAckOprClanMember message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EGClanMemberOprType {
        [pbr::OriginalName("EGAT_DOWN")] EgatDown = 0,
        [pbr::OriginalName("EGAT_UP")] EgatUp = 1,
        [pbr::OriginalName("EGAT_KICK")] EgatKick = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///EGMI_ReqEnterClanEctype					= 315; // 
  /// </summary>
  public sealed partial class ReqEnterClanEctype : pb::IMessage<ReqEnterClanEctype> {
    private static readonly pb::MessageParser<ReqEnterClanEctype> _parser = new pb::MessageParser<ReqEnterClanEctype>(() => new ReqEnterClanEctype());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEnterClanEctype> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype(ReqEnterClanEctype other) : this() {
      clanId_ = other.clanId_ != null ? other.clanId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEnterClanEctype Clone() {
      return new ReqEnterClanEctype(this);
    }

    /// <summary>Field number for the "clan_id" field.</summary>
    public const int ClanIdFieldNumber = 1;
    private global::NFMsg.Ident clanId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClanId {
      get { return clanId_; }
      set {
        clanId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEnterClanEctype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEnterClanEctype other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClanId, other.ClanId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clanId_ != null) hash ^= ClanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clanId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ClanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clanId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEnterClanEctype other) {
      if (other == null) {
        return;
      }
      if (other.clanId_ != null) {
        if (clanId_ == null) {
          ClanId = new global::NFMsg.Ident();
        }
        ClanId.MergeFrom(other.ClanId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clanId_ == null) {
              ClanId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClanId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SET_FIGHT_HERO						= 508;		 // 战斗武将
  /// </summary>
  public sealed partial class ReqSetFightHero : pb::IMessage<ReqSetFightHero> {
    private static readonly pb::MessageParser<ReqSetFightHero> _parser = new pb::MessageParser<ReqSetFightHero>(() => new ReqSetFightHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSetFightHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero(ReqSetFightHero other) : this() {
      heroid_ = other.heroid_ != null ? other.heroid_.Clone() : null;
      set_ = other.set_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSetFightHero Clone() {
      return new ReqSetFightHero(this);
    }

    /// <summary>Field number for the "Heroid" field.</summary>
    public const int HeroidFieldNumber = 1;
    private global::NFMsg.Ident heroid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "Set" field.</summary>
    public const int SetFieldNumber = 2;
    private int set_;
    /// <summary>
    ///0,1,2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSetFightHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSetFightHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heroid, other.Heroid)) return false;
      if (Set != other.Set) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroid_ != null) hash ^= Heroid.GetHashCode();
      if (Set != 0) hash ^= Set.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Heroid);
      }
      if (Set != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Set);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroid);
      }
      if (Set != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Set);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSetFightHero other) {
      if (other == null) {
        return;
      }
      if (other.heroid_ != null) {
        if (heroid_ == null) {
          Heroid = new global::NFMsg.Ident();
        }
        Heroid.MergeFrom(other.Heroid);
      }
      if (other.Set != 0) {
        Set = other.Set;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (heroid_ == null) {
              Heroid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Heroid);
            break;
          }
          case 16: {
            Set = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SWITCH_FIGHT_HERO						= 508;		 // 战斗武将
  /// </summary>
  public sealed partial class ReqSwitchFightHero : pb::IMessage<ReqSwitchFightHero> {
    private static readonly pb::MessageParser<ReqSwitchFightHero> _parser = new pb::MessageParser<ReqSwitchFightHero>(() => new ReqSwitchFightHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSwitchFightHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero(ReqSwitchFightHero other) : this() {
      heroid_ = other.heroid_ != null ? other.heroid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchFightHero Clone() {
      return new ReqSwitchFightHero(this);
    }

    /// <summary>Field number for the "Heroid" field.</summary>
    public const int HeroidFieldNumber = 1;
    private global::NFMsg.Ident heroid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSwitchFightHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSwitchFightHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Heroid, other.Heroid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroid_ != null) hash ^= Heroid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Heroid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heroid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSwitchFightHero other) {
      if (other == null) {
        return;
      }
      if (other.heroid_ != null) {
        if (heroid_ == null) {
          Heroid = new global::NFMsg.Ident();
        }
        Heroid.MergeFrom(other.Heroid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (heroid_ == null) {
              Heroid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Heroid);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_BUY_FORM_SHOP
  /// </summary>
  public sealed partial class ReqBuyItemFromShop : pb::IMessage<ReqBuyItemFromShop> {
    private static readonly pb::MessageParser<ReqBuyItemFromShop> _parser = new pb::MessageParser<ReqBuyItemFromShop>(() => new ReqBuyItemFromShop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBuyItemFromShop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop(ReqBuyItemFromShop other) : this() {
      itemID_ = other.itemID_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBuyItemFromShop Clone() {
      return new ReqBuyItemFromShop(this);
    }

    /// <summary>Field number for the "itemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private pb::ByteString itemID_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ItemID {
      get { return itemID_; }
      set {
        itemID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBuyItemFromShop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBuyItemFromShop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID.Length != 0) hash ^= ItemID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ItemID);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ItemID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBuyItemFromShop other) {
      if (other == null) {
        return;
      }
      if (other.ItemID.Length != 0) {
        ItemID = other.ItemID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemID = input.ReadBytes();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PVPPlayerInfo : pb::IMessage<PVPPlayerInfo> {
    private static readonly pb::MessageParser<PVPPlayerInfo> _parser = new pb::MessageParser<PVPPlayerInfo>(() => new PVPPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PVPPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPPlayerInfo(PVPPlayerInfo other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      battleMode_ = other.battleMode_;
      level_ = other.level_;
      battlePoint_ = other.battlePoint_;
      name_ = other.name_;
      head_ = other.head_;
      gold_ = other.gold_;
      diamond_ = other.diamond_;
      heroCnf1_ = other.heroCnf1_;
      heroCnf2_ = other.heroCnf2_;
      heroCnf3_ = other.heroCnf3_;
      heroStar1_ = other.heroStar1_;
      heroStar2_ = other.heroStar2_;
      heroStar3_ = other.heroStar3_;
      heroId1_ = other.heroId1_ != null ? other.heroId1_.Clone() : null;
      heroId2_ = other.heroId2_ != null ? other.heroId2_.Clone() : null;
      heroId3_ = other.heroId3_ != null ? other.heroId3_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PVPPlayerInfo Clone() {
      return new PVPPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::NFMsg.Ident id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "battle_mode" field.</summary>
    public const int BattleModeFieldNumber = 2;
    private global::NFMsg.EBattleType battleMode_ = global::NFMsg.EBattleType.EbtSingleMode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EBattleType BattleMode {
      get { return battleMode_; }
      set {
        battleMode_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "battle_point" field.</summary>
    public const int BattlePointFieldNumber = 5;
    private int battlePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlePoint {
      get { return battlePoint_; }
      set {
        battlePoint_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 7;
    private pb::ByteString head_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 8;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 9;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "hero_cnf1" field.</summary>
    public const int HeroCnf1FieldNumber = 20;
    private pb::ByteString heroCnf1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HeroCnf1 {
      get { return heroCnf1_; }
      set {
        heroCnf1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_cnf2" field.</summary>
    public const int HeroCnf2FieldNumber = 21;
    private pb::ByteString heroCnf2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HeroCnf2 {
      get { return heroCnf2_; }
      set {
        heroCnf2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_cnf3" field.</summary>
    public const int HeroCnf3FieldNumber = 22;
    private pb::ByteString heroCnf3_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HeroCnf3 {
      get { return heroCnf3_; }
      set {
        heroCnf3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_star1" field.</summary>
    public const int HeroStar1FieldNumber = 25;
    private int heroStar1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar1 {
      get { return heroStar1_; }
      set {
        heroStar1_ = value;
      }
    }

    /// <summary>Field number for the "hero_star2" field.</summary>
    public const int HeroStar2FieldNumber = 26;
    private int heroStar2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar2 {
      get { return heroStar2_; }
      set {
        heroStar2_ = value;
      }
    }

    /// <summary>Field number for the "hero_star3" field.</summary>
    public const int HeroStar3FieldNumber = 27;
    private int heroStar3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar3 {
      get { return heroStar3_; }
      set {
        heroStar3_ = value;
      }
    }

    /// <summary>Field number for the "hero_id1" field.</summary>
    public const int HeroId1FieldNumber = 28;
    private global::NFMsg.Ident heroId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId1 {
      get { return heroId1_; }
      set {
        heroId1_ = value;
      }
    }

    /// <summary>Field number for the "hero_id2" field.</summary>
    public const int HeroId2FieldNumber = 29;
    private global::NFMsg.Ident heroId2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId2 {
      get { return heroId2_; }
      set {
        heroId2_ = value;
      }
    }

    /// <summary>Field number for the "hero_id3" field.</summary>
    public const int HeroId3FieldNumber = 30;
    private global::NFMsg.Ident heroId3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident HeroId3 {
      get { return heroId3_; }
      set {
        heroId3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PVPPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PVPPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (BattleMode != other.BattleMode) return false;
      if (Level != other.Level) return false;
      if (BattlePoint != other.BattlePoint) return false;
      if (Name != other.Name) return false;
      if (Head != other.Head) return false;
      if (Gold != other.Gold) return false;
      if (Diamond != other.Diamond) return false;
      if (HeroCnf1 != other.HeroCnf1) return false;
      if (HeroCnf2 != other.HeroCnf2) return false;
      if (HeroCnf3 != other.HeroCnf3) return false;
      if (HeroStar1 != other.HeroStar1) return false;
      if (HeroStar2 != other.HeroStar2) return false;
      if (HeroStar3 != other.HeroStar3) return false;
      if (!object.Equals(HeroId1, other.HeroId1)) return false;
      if (!object.Equals(HeroId2, other.HeroId2)) return false;
      if (!object.Equals(HeroId3, other.HeroId3)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) hash ^= BattleMode.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BattlePoint != 0) hash ^= BattlePoint.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Head.Length != 0) hash ^= Head.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (HeroCnf1.Length != 0) hash ^= HeroCnf1.GetHashCode();
      if (HeroCnf2.Length != 0) hash ^= HeroCnf2.GetHashCode();
      if (HeroCnf3.Length != 0) hash ^= HeroCnf3.GetHashCode();
      if (HeroStar1 != 0) hash ^= HeroStar1.GetHashCode();
      if (HeroStar2 != 0) hash ^= HeroStar2.GetHashCode();
      if (HeroStar3 != 0) hash ^= HeroStar3.GetHashCode();
      if (heroId1_ != null) hash ^= HeroId1.GetHashCode();
      if (heroId2_ != null) hash ^= HeroId2.GetHashCode();
      if (heroId3_ != null) hash ^= HeroId3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BattleMode);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (BattlePoint != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BattlePoint);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Name);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Head);
      }
      if (Gold != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Gold);
      }
      if (Diamond != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Diamond);
      }
      if (HeroCnf1.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(HeroCnf1);
      }
      if (HeroCnf2.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(HeroCnf2);
      }
      if (HeroCnf3.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteBytes(HeroCnf3);
      }
      if (HeroStar1 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(HeroStar1);
      }
      if (HeroStar2 != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(HeroStar2);
      }
      if (HeroStar3 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(HeroStar3);
      }
      if (heroId1_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(HeroId1);
      }
      if (heroId2_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(HeroId2);
      }
      if (heroId3_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(HeroId3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleMode);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (BattlePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlePoint);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Head);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (HeroCnf1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(HeroCnf1);
      }
      if (HeroCnf2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(HeroCnf2);
      }
      if (HeroCnf3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(HeroCnf3);
      }
      if (HeroStar1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroStar1);
      }
      if (HeroStar2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroStar2);
      }
      if (HeroStar3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroStar3);
      }
      if (heroId1_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroId1);
      }
      if (heroId2_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroId2);
      }
      if (heroId3_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroId3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PVPPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::NFMsg.Ident();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        BattleMode = other.BattleMode;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BattlePoint != 0) {
        BattlePoint = other.BattlePoint;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Head.Length != 0) {
        Head = other.Head;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.HeroCnf1.Length != 0) {
        HeroCnf1 = other.HeroCnf1;
      }
      if (other.HeroCnf2.Length != 0) {
        HeroCnf2 = other.HeroCnf2;
      }
      if (other.HeroCnf3.Length != 0) {
        HeroCnf3 = other.HeroCnf3;
      }
      if (other.HeroStar1 != 0) {
        HeroStar1 = other.HeroStar1;
      }
      if (other.HeroStar2 != 0) {
        HeroStar2 = other.HeroStar2;
      }
      if (other.HeroStar3 != 0) {
        HeroStar3 = other.HeroStar3;
      }
      if (other.heroId1_ != null) {
        if (heroId1_ == null) {
          HeroId1 = new global::NFMsg.Ident();
        }
        HeroId1.MergeFrom(other.HeroId1);
      }
      if (other.heroId2_ != null) {
        if (heroId2_ == null) {
          HeroId2 = new global::NFMsg.Ident();
        }
        HeroId2.MergeFrom(other.HeroId2);
      }
      if (other.heroId3_ != null) {
        if (heroId3_ == null) {
          HeroId3 = new global::NFMsg.Ident();
        }
        HeroId3.MergeFrom(other.HeroId3);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::NFMsg.Ident();
            }
            input.ReadMessage(Id);
            break;
          }
          case 16: {
            BattleMode = (global::NFMsg.EBattleType) input.ReadEnum();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            BattlePoint = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadBytes();
            break;
          }
          case 58: {
            Head = input.ReadBytes();
            break;
          }
          case 64: {
            Gold = input.ReadInt32();
            break;
          }
          case 72: {
            Diamond = input.ReadInt32();
            break;
          }
          case 162: {
            HeroCnf1 = input.ReadBytes();
            break;
          }
          case 170: {
            HeroCnf2 = input.ReadBytes();
            break;
          }
          case 178: {
            HeroCnf3 = input.ReadBytes();
            break;
          }
          case 200: {
            HeroStar1 = input.ReadInt32();
            break;
          }
          case 208: {
            HeroStar2 = input.ReadInt32();
            break;
          }
          case 216: {
            HeroStar3 = input.ReadInt32();
            break;
          }
          case 226: {
            if (heroId1_ == null) {
              HeroId1 = new global::NFMsg.Ident();
            }
            input.ReadMessage(HeroId1);
            break;
          }
          case 234: {
            if (heroId2_ == null) {
              HeroId2 = new global::NFMsg.Ident();
            }
            input.ReadMessage(HeroId2);
            break;
          }
          case 242: {
            if (heroId3_ == null) {
              HeroId3 = new global::NFMsg.Ident();
            }
            input.ReadMessage(HeroId3);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_SEARCH_OPPNENT
  /// </summary>
  public sealed partial class ReqSearchOppnent : pb::IMessage<ReqSearchOppnent> {
    private static readonly pb::MessageParser<ReqSearchOppnent> _parser = new pb::MessageParser<ReqSearchOppnent>(() => new ReqSearchOppnent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSearchOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent(ReqSearchOppnent other) : this() {
      selfScene_ = other.selfScene_;
      diamond_ = other.diamond_;
      battlePoint_ = other.battlePoint_;
      battleMode_ = other.battleMode_;
      friends_ = other.friends_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSearchOppnent Clone() {
      return new ReqSearchOppnent(this);
    }

    /// <summary>Field number for the "self_scene" field.</summary>
    public const int SelfSceneFieldNumber = 1;
    private int selfScene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelfScene {
      get { return selfScene_; }
      set {
        selfScene_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 2;
    private int diamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "battle_point" field.</summary>
    public const int BattlePointFieldNumber = 3;
    private int battlePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlePoint {
      get { return battlePoint_; }
      set {
        battlePoint_ = value;
      }
    }

    /// <summary>Field number for the "battle_mode" field.</summary>
    public const int BattleModeFieldNumber = 4;
    private global::NFMsg.EBattleType battleMode_ = global::NFMsg.EBattleType.EbtSingleMode;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EBattleType BattleMode {
      get { return battleMode_; }
      set {
        battleMode_ = value;
      }
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(82, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> friends_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> Friends {
      get { return friends_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSearchOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSearchOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelfScene != other.SelfScene) return false;
      if (Diamond != other.Diamond) return false;
      if (BattlePoint != other.BattlePoint) return false;
      if (BattleMode != other.BattleMode) return false;
      if(!friends_.Equals(other.friends_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelfScene != 0) hash ^= SelfScene.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (BattlePoint != 0) hash ^= BattlePoint.GetHashCode();
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) hash ^= BattleMode.GetHashCode();
      hash ^= friends_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SelfScene != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SelfScene);
      }
      if (Diamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Diamond);
      }
      if (BattlePoint != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BattlePoint);
      }
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        output.WriteRawTag(32);
        output.WriteEnum((int) BattleMode);
      }
      friends_.WriteTo(output, _repeated_friends_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelfScene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfScene);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (BattlePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattlePoint);
      }
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleMode);
      }
      size += friends_.CalculateSize(_repeated_friends_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSearchOppnent other) {
      if (other == null) {
        return;
      }
      if (other.SelfScene != 0) {
        SelfScene = other.SelfScene;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.BattlePoint != 0) {
        BattlePoint = other.BattlePoint;
      }
      if (other.BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        BattleMode = other.BattleMode;
      }
      friends_.Add(other.friends_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SelfScene = input.ReadInt32();
            break;
          }
          case 16: {
            Diamond = input.ReadInt32();
            break;
          }
          case 24: {
            BattlePoint = input.ReadInt32();
            break;
          }
          case 32: {
            BattleMode = (global::NFMsg.EBattleType) input.ReadEnum();
            break;
          }
          case 82: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_SEARCH_OPPNENT
  /// </summary>
  public sealed partial class AckSearchOppnent : pb::IMessage<AckSearchOppnent> {
    private static readonly pb::MessageParser<AckSearchOppnent> _parser = new pb::MessageParser<AckSearchOppnent>(() => new AckSearchOppnent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSearchOppnent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent(AckSearchOppnent other) : this() {
      sceneId_ = other.sceneId_;
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      gambleDiamond_ = other.gambleDiamond_;
      teamMembers_ = other.teamMembers_.Clone();
      opponent_ = other.opponent_ != null ? other.opponent_.Clone() : null;
      buildings_ = other.buildings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSearchOppnent Clone() {
      return new AckSearchOppnent(this);
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 2;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "gamble_diamond" field.</summary>
    public const int GambleDiamondFieldNumber = 3;
    private int gambleDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GambleDiamond {
      get { return gambleDiamond_; }
      set {
        gambleDiamond_ = value;
      }
    }

    /// <summary>Field number for the "team_members" field.</summary>
    public const int TeamMembersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_teamMembers_codec
        = pb::FieldCodec.ForMessage(42, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> teamMembers_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> TeamMembers {
      get { return teamMembers_; }
    }

    /// <summary>Field number for the "opponent" field.</summary>
    public const int OpponentFieldNumber = 14;
    private global::NFMsg.PVPPlayerInfo opponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.PVPPlayerInfo Opponent {
      get { return opponent_; }
      set {
        opponent_ = value;
      }
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::NFMsg.ReqAddSceneBuilding> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(162, global::NFMsg.ReqAddSceneBuilding.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> buildings_ = new pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ReqAddSceneBuilding> Buildings {
      get { return buildings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSearchOppnent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSearchOppnent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (GambleDiamond != other.GambleDiamond) return false;
      if(!teamMembers_.Equals(other.teamMembers_)) return false;
      if (!object.Equals(Opponent, other.Opponent)) return false;
      if(!buildings_.Equals(other.buildings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (GambleDiamond != 0) hash ^= GambleDiamond.GetHashCode();
      hash ^= teamMembers_.GetHashCode();
      if (opponent_ != null) hash ^= Opponent.GetHashCode();
      hash ^= buildings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (teamId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamId);
      }
      if (GambleDiamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GambleDiamond);
      }
      teamMembers_.WriteTo(output, _repeated_teamMembers_codec);
      if (opponent_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Opponent);
      }
      buildings_.WriteTo(output, _repeated_buildings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (GambleDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GambleDiamond);
      }
      size += teamMembers_.CalculateSize(_repeated_teamMembers_codec);
      if (opponent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opponent);
      }
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSearchOppnent other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          TeamId = new global::NFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.GambleDiamond != 0) {
        GambleDiamond = other.GambleDiamond;
      }
      teamMembers_.Add(other.teamMembers_);
      if (other.opponent_ != null) {
        if (opponent_ == null) {
          Opponent = new global::NFMsg.PVPPlayerInfo();
        }
        Opponent.MergeFrom(other.Opponent);
      }
      buildings_.Add(other.buildings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
          case 18: {
            if (teamId_ == null) {
              TeamId = new global::NFMsg.Ident();
            }
            input.ReadMessage(TeamId);
            break;
          }
          case 24: {
            GambleDiamond = input.ReadInt32();
            break;
          }
          case 42: {
            teamMembers_.AddEntriesFrom(input, _repeated_teamMembers_codec);
            break;
          }
          case 114: {
            if (opponent_ == null) {
              Opponent = new global::NFMsg.PVPPlayerInfo();
            }
            input.ReadMessage(Opponent);
            break;
          }
          case 162: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_CANCEL_SEARCH
  /// </summary>
  public sealed partial class ReqAckCancelSearch : pb::IMessage<ReqAckCancelSearch> {
    private static readonly pb::MessageParser<ReqAckCancelSearch> _parser = new pb::MessageParser<ReqAckCancelSearch>(() => new ReqAckCancelSearch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqAckCancelSearch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCancelSearch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCancelSearch(ReqAckCancelSearch other) : this() {
      selfid_ = other.selfid_ != null ? other.selfid_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqAckCancelSearch Clone() {
      return new ReqAckCancelSearch(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqAckCancelSearch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqAckCancelSearch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqAckCancelSearch other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          Selfid = new global::NFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              Selfid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Selfid);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_REQ_END_OPPNENT
  /// </summary>
  public sealed partial class ReqEndBattle : pb::IMessage<ReqEndBattle> {
    private static readonly pb::MessageParser<ReqEndBattle> _parser = new pb::MessageParser<ReqEndBattle>(() => new ReqEndBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqEndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle(ReqEndBattle other) : this() {
      autoEnd_ = other.autoEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqEndBattle Clone() {
      return new ReqEndBattle(this);
    }

    /// <summary>Field number for the "auto_end" field.</summary>
    public const int AutoEndFieldNumber = 1;
    private int autoEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoEnd {
      get { return autoEnd_; }
      set {
        autoEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqEndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqEndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoEnd != other.AutoEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoEnd != 0) hash ^= AutoEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoEnd != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AutoEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqEndBattle other) {
      if (other == null) {
        return;
      }
      if (other.AutoEnd != 0) {
        AutoEnd = other.AutoEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoEnd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGMI_ACK_END_OPPNENT
  /// </summary>
  public sealed partial class AckEndBattle : pb::IMessage<AckEndBattle> {
    private static readonly pb::MessageParser<AckEndBattle> _parser = new pb::MessageParser<AckEndBattle>(() => new AckEndBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckEndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle(AckEndBattle other) : this() {
      win_ = other.win_;
      star_ = other.star_;
      gold_ = other.gold_;
      cup_ = other.cup_;
      diamond_ = other.diamond_;
      battleMode_ = other.battleMode_;
      teamId_ = other.teamId_ != null ? other.teamId_.Clone() : null;
      matchId_ = other.matchId_ != null ? other.matchId_.Clone() : null;
      members_ = other.members_.Clone();
      itemList_ = other.itemList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckEndBattle Clone() {
      return new AckEndBattle(this);
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 1;
    private int win_;
    /// <summary>
    ///下发的时候则为道具列表
    ///获得的金币等列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private int star_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    /// <summary>
    /// 副本获得的金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "cup" field.</summary>
    public const int CupFieldNumber = 4;
    private int cup_;
    /// <summary>
    /// 副本获得的经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cup {
      get { return cup_; }
      set {
        cup_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 5;
    private int diamond_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "battle_mode" field.</summary>
    public const int BattleModeFieldNumber = 6;
    private global::NFMsg.EBattleType battleMode_ = global::NFMsg.EBattleType.EbtSingleMode;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.EBattleType BattleMode {
      get { return battleMode_; }
      set {
        battleMode_ = value;
      }
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 7;
    private global::NFMsg.Ident teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 8;
    private global::NFMsg.Ident matchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident MatchId {
      get { return matchId_; }
      set {
        matchId_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::NFMsg.Ident> _repeated_members_codec
        = pb::FieldCodec.ForMessage(74, global::NFMsg.Ident.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.Ident> members_ = new pbc::RepeatedField<global::NFMsg.Ident>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.Ident> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 10;
    private static readonly pb::FieldCodec<global::NFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(82, global::NFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::NFMsg.ItemStruct>();
    /// <summary>
    /// 副本获得的道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ItemStruct> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckEndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckEndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Win != other.Win) return false;
      if (Star != other.Star) return false;
      if (Gold != other.Gold) return false;
      if (Cup != other.Cup) return false;
      if (Diamond != other.Diamond) return false;
      if (BattleMode != other.BattleMode) return false;
      if (!object.Equals(TeamId, other.TeamId)) return false;
      if (!object.Equals(MatchId, other.MatchId)) return false;
      if(!members_.Equals(other.members_)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Win != 0) hash ^= Win.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Cup != 0) hash ^= Cup.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) hash ^= BattleMode.GetHashCode();
      if (teamId_ != null) hash ^= TeamId.GetHashCode();
      if (matchId_ != null) hash ^= MatchId.GetHashCode();
      hash ^= members_.GetHashCode();
      hash ^= itemList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Win != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Win);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Star);
      }
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (Cup != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Cup);
      }
      if (Diamond != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Diamond);
      }
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BattleMode);
      }
      if (teamId_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TeamId);
      }
      if (matchId_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MatchId);
      }
      members_.WriteTo(output, _repeated_members_codec);
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Win != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Win);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Cup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cup);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleMode);
      }
      if (teamId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamId);
      }
      if (matchId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchId);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckEndBattle other) {
      if (other == null) {
        return;
      }
      if (other.Win != 0) {
        Win = other.Win;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Cup != 0) {
        Cup = other.Cup;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.BattleMode != global::NFMsg.EBattleType.EbtSingleMode) {
        BattleMode = other.BattleMode;
      }
      if (other.teamId_ != null) {
        if (teamId_ == null) {
          TeamId = new global::NFMsg.Ident();
        }
        TeamId.MergeFrom(other.TeamId);
      }
      if (other.matchId_ != null) {
        if (matchId_ == null) {
          MatchId = new global::NFMsg.Ident();
        }
        MatchId.MergeFrom(other.MatchId);
      }
      members_.Add(other.members_);
      itemList_.Add(other.itemList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Win = input.ReadInt32();
            break;
          }
          case 16: {
            Star = input.ReadInt32();
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 32: {
            Cup = input.ReadInt32();
            break;
          }
          case 40: {
            Diamond = input.ReadInt32();
            break;
          }
          case 48: {
            BattleMode = (global::NFMsg.EBattleType) input.ReadEnum();
            break;
          }
          case 58: {
            if (teamId_ == null) {
              TeamId = new global::NFMsg.Ident();
            }
            input.ReadMessage(TeamId);
            break;
          }
          case 66: {
            if (matchId_ == null) {
              MatchId = new global::NFMsg.Ident();
            }
            input.ReadMessage(MatchId);
            break;
          }
          case 74: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 82: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQ_SEND_MAIL = 700; // 发送邮件
  /// </summary>
  public sealed partial class ReqSendMail : pb::IMessage<ReqSendMail> {
    private static readonly pb::MessageParser<ReqSendMail> _parser = new pb::MessageParser<ReqSendMail>(() => new ReqSendMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSendMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail(ReqSendMail other) : this() {
      reciever_ = other.reciever_ != null ? other.reciever_.Clone() : null;
      itemList_ = other.itemList_.Clone();
      currencyList_ = other.currencyList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSendMail Clone() {
      return new ReqSendMail(this);
    }

    /// <summary>Field number for the "reciever" field.</summary>
    public const int RecieverFieldNumber = 1;
    private global::NFMsg.Ident reciever_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Reciever {
      get { return reciever_; }
      set {
        reciever_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::NFMsg.ItemStruct> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(18, global::NFMsg.ItemStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.ItemStruct> itemList_ = new pbc::RepeatedField<global::NFMsg.ItemStruct>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.ItemStruct> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "currency_list" field.</summary>
    public const int CurrencyListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NFMsg.CurrencyStruct> _repeated_currencyList_codec
        = pb::FieldCodec.ForMessage(26, global::NFMsg.CurrencyStruct.Parser);
    private readonly pbc::RepeatedField<global::NFMsg.CurrencyStruct> currencyList_ = new pbc::RepeatedField<global::NFMsg.CurrencyStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NFMsg.CurrencyStruct> CurrencyList {
      get { return currencyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSendMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSendMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Reciever, other.Reciever)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if(!currencyList_.Equals(other.currencyList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reciever_ != null) hash ^= Reciever.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= currencyList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reciever_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reciever);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      currencyList_.WriteTo(output, _repeated_currencyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reciever_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reciever);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += currencyList_.CalculateSize(_repeated_currencyList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSendMail other) {
      if (other == null) {
        return;
      }
      if (other.reciever_ != null) {
        if (reciever_ == null) {
          Reciever = new global::NFMsg.Ident();
        }
        Reciever.MergeFrom(other.Reciever);
      }
      itemList_.Add(other.itemList_);
      currencyList_.Add(other.currencyList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reciever_ == null) {
              Reciever = new global::NFMsg.Ident();
            }
            input.ReadMessage(Reciever);
            break;
          }
          case 18: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 26: {
            currencyList_.AddEntriesFrom(input, _repeated_currencyList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_REQSWICHSERVER							= 210;		 // 申请转服
  /// </summary>
  public sealed partial class ReqSwitchServer : pb::IMessage<ReqSwitchServer> {
    private static readonly pb::MessageParser<ReqSwitchServer> _parser = new pb::MessageParser<ReqSwitchServer>(() => new ReqSwitchServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer(ReqSwitchServer other) : this() {
      selfid_ = other.selfid_ != null ? other.selfid_.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
      sceneID_ = other.sceneID_;
      clientId_ = other.clientId_ != null ? other.clientId_.Clone() : null;
      groupID_ = other.groupID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqSwitchServer Clone() {
      return new ReqSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int SelfServeridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 本来所在的服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfServerid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int TargetServeridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetServerid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int GateServeridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GateServerid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    /// <summary>Field number for the "SceneID" field.</summary>
    public const int SceneIDFieldNumber = 5;
    private long sceneID_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SceneID {
      get { return sceneID_; }
      set {
        sceneID_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 6;
    private global::NFMsg.Ident clientId_;
    /// <summary>
    /// 客户端id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident ClientId {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "groupID" field.</summary>
    public const int GroupIDFieldNumber = 7;
    private long groupID_;
    /// <summary>
    ///  group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GroupID {
      get { return groupID_; }
      set {
        groupID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (SelfServerid != other.SelfServerid) return false;
      if (TargetServerid != other.TargetServerid) return false;
      if (GateServerid != other.GateServerid) return false;
      if (SceneID != other.SceneID) return false;
      if (!object.Equals(ClientId, other.ClientId)) return false;
      if (GroupID != other.GroupID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (SelfServerid != 0L) hash ^= SelfServerid.GetHashCode();
      if (TargetServerid != 0L) hash ^= TargetServerid.GetHashCode();
      if (GateServerid != 0L) hash ^= GateServerid.GetHashCode();
      if (SceneID != 0L) hash ^= SceneID.GetHashCode();
      if (clientId_ != null) hash ^= ClientId.GetHashCode();
      if (GroupID != 0L) hash ^= GroupID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (SelfServerid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SelfServerid);
      }
      if (TargetServerid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetServerid);
      }
      if (GateServerid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GateServerid);
      }
      if (SceneID != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SceneID);
      }
      if (clientId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ClientId);
      }
      if (GroupID != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(GroupID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (SelfServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfServerid);
      }
      if (TargetServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetServerid);
      }
      if (GateServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateServerid);
      }
      if (SceneID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneID);
      }
      if (clientId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientId);
      }
      if (GroupID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqSwitchServer other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          Selfid = new global::NFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.SelfServerid != 0L) {
        SelfServerid = other.SelfServerid;
      }
      if (other.TargetServerid != 0L) {
        TargetServerid = other.TargetServerid;
      }
      if (other.GateServerid != 0L) {
        GateServerid = other.GateServerid;
      }
      if (other.SceneID != 0L) {
        SceneID = other.SceneID;
      }
      if (other.clientId_ != null) {
        if (clientId_ == null) {
          ClientId = new global::NFMsg.Ident();
        }
        ClientId.MergeFrom(other.ClientId);
      }
      if (other.GroupID != 0L) {
        GroupID = other.GroupID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              Selfid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Selfid);
            break;
          }
          case 16: {
            SelfServerid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetServerid = input.ReadInt64();
            break;
          }
          case 32: {
            GateServerid = input.ReadInt64();
            break;
          }
          case 40: {
            SceneID = input.ReadInt64();
            break;
          }
          case 50: {
            if (clientId_ == null) {
              ClientId = new global::NFMsg.Ident();
            }
            input.ReadMessage(ClientId);
            break;
          }
          case 56: {
            GroupID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///EGEC_ACKSWICHSERVER							= 211;		 // 申请转服
  /// </summary>
  public sealed partial class AckSwitchServer : pb::IMessage<AckSwitchServer> {
    private static readonly pb::MessageParser<AckSwitchServer> _parser = new pb::MessageParser<AckSwitchServer>(() => new AckSwitchServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AckSwitchServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NFMsg.NFMsgShareReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer(AckSwitchServer other) : this() {
      selfid_ = other.selfid_ != null ? other.selfid_.Clone() : null;
      selfServerid_ = other.selfServerid_;
      targetServerid_ = other.targetServerid_;
      gateServerid_ = other.gateServerid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AckSwitchServer Clone() {
      return new AckSwitchServer(this);
    }

    /// <summary>Field number for the "selfid" field.</summary>
    public const int SelfidFieldNumber = 1;
    private global::NFMsg.Ident selfid_;
    /// <summary>
    /// 角色ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NFMsg.Ident Selfid {
      get { return selfid_; }
      set {
        selfid_ = value;
      }
    }

    /// <summary>Field number for the "self_serverid" field.</summary>
    public const int SelfServeridFieldNumber = 2;
    private long selfServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SelfServerid {
      get { return selfServerid_; }
      set {
        selfServerid_ = value;
      }
    }

    /// <summary>Field number for the "target_serverid" field.</summary>
    public const int TargetServeridFieldNumber = 3;
    private long targetServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetServerid {
      get { return targetServerid_; }
      set {
        targetServerid_ = value;
      }
    }

    /// <summary>Field number for the "gate_serverid" field.</summary>
    public const int GateServeridFieldNumber = 4;
    private long gateServerid_;
    /// <summary>
    /// 目标ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GateServerid {
      get { return gateServerid_; }
      set {
        gateServerid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AckSwitchServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AckSwitchServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selfid, other.Selfid)) return false;
      if (SelfServerid != other.SelfServerid) return false;
      if (TargetServerid != other.TargetServerid) return false;
      if (GateServerid != other.GateServerid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selfid_ != null) hash ^= Selfid.GetHashCode();
      if (SelfServerid != 0L) hash ^= SelfServerid.GetHashCode();
      if (TargetServerid != 0L) hash ^= TargetServerid.GetHashCode();
      if (GateServerid != 0L) hash ^= GateServerid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selfid_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selfid);
      }
      if (SelfServerid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SelfServerid);
      }
      if (TargetServerid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TargetServerid);
      }
      if (GateServerid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GateServerid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selfid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selfid);
      }
      if (SelfServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SelfServerid);
      }
      if (TargetServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetServerid);
      }
      if (GateServerid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateServerid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AckSwitchServer other) {
      if (other == null) {
        return;
      }
      if (other.selfid_ != null) {
        if (selfid_ == null) {
          Selfid = new global::NFMsg.Ident();
        }
        Selfid.MergeFrom(other.Selfid);
      }
      if (other.SelfServerid != 0L) {
        SelfServerid = other.SelfServerid;
      }
      if (other.TargetServerid != 0L) {
        TargetServerid = other.TargetServerid;
      }
      if (other.GateServerid != 0L) {
        GateServerid = other.GateServerid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selfid_ == null) {
              Selfid = new global::NFMsg.Ident();
            }
            input.ReadMessage(Selfid);
            break;
          }
          case 16: {
            SelfServerid = input.ReadInt64();
            break;
          }
          case 24: {
            TargetServerid = input.ReadInt64();
            break;
          }
          case 32: {
            GateServerid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
