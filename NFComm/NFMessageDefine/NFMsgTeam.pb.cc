// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgTeam.proto

#include "NFMsgTeam.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgTeam_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamMemberInfo_NFMsgTeam_2eproto;
namespace NFMsg {
class TeamMemberInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamMemberInfo> _instance;
} _TeamMemberInfo_default_instance_;
class ReqAckTeamMemberListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckTeamMemberList> _instance;
} _ReqAckTeamMemberList_default_instance_;
class AckTeamMemberAddDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckTeamMemberAdd> _instance;
} _AckTeamMemberAdd_default_instance_;
class AckTeamMemberLeaveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckTeamMemberLeave> _instance;
} _AckTeamMemberLeave_default_instance_;
class ReqInviteToTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqInviteToTeam> _instance;
} _ReqInviteToTeam_default_instance_;
class ReqCancelInviteToTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCancelInviteToTeam> _instance;
} _ReqCancelInviteToTeam_default_instance_;
class AckInviteToTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckInviteToTeam> _instance;
} _AckInviteToTeam_default_instance_;
class ReqAckAcceptTeamInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckAcceptTeamInvite> _instance;
} _ReqAckAcceptTeamInvite_default_instance_;
class ReqAckRejectTeamInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckRejectTeamInvite> _instance;
} _ReqAckRejectTeamInvite_default_instance_;
}  // namespace NFMsg
static void InitDefaultsscc_info_AckInviteToTeam_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckInviteToTeam_default_instance_;
    new (ptr) ::NFMsg::AckInviteToTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckInviteToTeam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckInviteToTeam_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckInviteToTeam_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_AckTeamMemberAdd_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckTeamMemberAdd_default_instance_;
    new (ptr) ::NFMsg::AckTeamMemberAdd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckTeamMemberAdd::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AckTeamMemberAdd_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AckTeamMemberAdd_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_TeamMemberInfo_NFMsgTeam_2eproto.base,}};

static void InitDefaultsscc_info_AckTeamMemberLeave_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckTeamMemberLeave_default_instance_;
    new (ptr) ::NFMsg::AckTeamMemberLeave();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckTeamMemberLeave::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckTeamMemberLeave_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckTeamMemberLeave_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckAcceptTeamInvite_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckAcceptTeamInvite_default_instance_;
    new (ptr) ::NFMsg::ReqAckAcceptTeamInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckAcceptTeamInvite::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckAcceptTeamInvite_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckAcceptTeamInvite_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckRejectTeamInvite_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckRejectTeamInvite_default_instance_;
    new (ptr) ::NFMsg::ReqAckRejectTeamInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckRejectTeamInvite::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckRejectTeamInvite_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckRejectTeamInvite_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckTeamMemberList_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckTeamMemberList_default_instance_;
    new (ptr) ::NFMsg::ReqAckTeamMemberList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckTeamMemberList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAckTeamMemberList_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqAckTeamMemberList_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_TeamMemberInfo_NFMsgTeam_2eproto.base,}};

static void InitDefaultsscc_info_ReqCancelInviteToTeam_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqCancelInviteToTeam_default_instance_;
    new (ptr) ::NFMsg::ReqCancelInviteToTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqCancelInviteToTeam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqCancelInviteToTeam_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqCancelInviteToTeam_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqInviteToTeam_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqInviteToTeam_default_instance_;
    new (ptr) ::NFMsg::ReqInviteToTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqInviteToTeam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqInviteToTeam_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqInviteToTeam_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_TeamMemberInfo_NFMsgTeam_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_TeamMemberInfo_default_instance_;
    new (ptr) ::NFMsg::TeamMemberInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::TeamMemberInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TeamMemberInfo_NFMsgTeam_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TeamMemberInfo_NFMsgTeam_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NFMsgTeam_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NFMsgTeam_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFMsgTeam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFMsgTeam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::TeamMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::TeamMemberInfo, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::TeamMemberInfo, name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::TeamMemberInfo, bp_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::TeamMemberInfo, leader_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::TeamMemberInfo, pending_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckTeamMemberList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckTeamMemberList, team_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckTeamMemberList, memberlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckTeamMemberAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckTeamMemberAdd, team_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckTeamMemberAdd, member_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckTeamMemberLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckTeamMemberLeave, team_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckTeamMemberLeave, member_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqInviteToTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqInviteToTeam, stranger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCancelInviteToTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCancelInviteToTeam, stranger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckInviteToTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckInviteToTeam, team_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckInviteToTeam, inviter_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckInviteToTeam, name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckInviteToTeam, stranger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckAcceptTeamInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckAcceptTeamInvite, team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckRejectTeamInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckRejectTeamInvite, team_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::TeamMemberInfo)},
  { 10, -1, sizeof(::NFMsg::ReqAckTeamMemberList)},
  { 17, -1, sizeof(::NFMsg::AckTeamMemberAdd)},
  { 24, -1, sizeof(::NFMsg::AckTeamMemberLeave)},
  { 31, -1, sizeof(::NFMsg::ReqInviteToTeam)},
  { 37, -1, sizeof(::NFMsg::ReqCancelInviteToTeam)},
  { 43, -1, sizeof(::NFMsg::AckInviteToTeam)},
  { 52, -1, sizeof(::NFMsg::ReqAckAcceptTeamInvite)},
  { 58, -1, sizeof(::NFMsg::ReqAckRejectTeamInvite)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_TeamMemberInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckTeamMemberList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckTeamMemberAdd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckTeamMemberLeave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqInviteToTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqCancelInviteToTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckInviteToTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckAcceptTeamInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckRejectTeamInvite_default_instance_),
};

const char descriptor_table_protodef_NFMsgTeam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017NFMsgTeam.proto\022\005NFMsg\032\017NFMsgBase.prot"
  "o\"e\n\016TeamMemberInfo\022\030\n\002id\030\001 \001(\0132\014.NFMsg."
  "Ident\022\014\n\004name\030\002 \001(\014\022\n\n\002bp\030\003 \001(\005\022\016\n\006leade"
  "r\030\004 \001(\005\022\017\n\007pending\030\005 \001(\005\"`\n\024ReqAckTeamMe"
  "mberList\022\035\n\007team_id\030\001 \001(\0132\014.NFMsg.Ident\022"
  ")\n\nmemberList\030\002 \003(\0132\025.NFMsg.TeamMemberIn"
  "fo\"X\n\020AckTeamMemberAdd\022\035\n\007team_id\030\001 \001(\0132"
  "\014.NFMsg.Ident\022%\n\006member\030\002 \003(\0132\025.NFMsg.Te"
  "amMemberInfo\"Q\n\022AckTeamMemberLeave\022\035\n\007te"
  "am_id\030\001 \001(\0132\014.NFMsg.Ident\022\034\n\006member\030\002 \003("
  "\0132\014.NFMsg.Ident\"1\n\017ReqInviteToTeam\022\036\n\010st"
  "ranger\030\001 \001(\0132\014.NFMsg.Ident\"7\n\025ReqCancelI"
  "nviteToTeam\022\036\n\010stranger\030\001 \001(\0132\014.NFMsg.Id"
  "ent\"}\n\017AckInviteToTeam\022\035\n\007team_id\030\001 \001(\0132"
  "\014.NFMsg.Ident\022\035\n\007inviter\030\002 \001(\0132\014.NFMsg.I"
  "dent\022\014\n\004name\030\003 \001(\014\022\036\n\010stranger\030\004 \001(\0132\014.N"
  "FMsg.Ident\"7\n\026ReqAckAcceptTeamInvite\022\035\n\007"
  "team_id\030\001 \001(\0132\014.NFMsg.Ident\"7\n\026ReqAckRej"
  "ectTeamInvite\022\035\n\007team_id\030\001 \001(\0132\014.NFMsg.I"
  "dentb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFMsgTeam_2eproto_deps[1] = {
  &::descriptor_table_NFMsgBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFMsgTeam_2eproto_sccs[9] = {
  &scc_info_AckInviteToTeam_NFMsgTeam_2eproto.base,
  &scc_info_AckTeamMemberAdd_NFMsgTeam_2eproto.base,
  &scc_info_AckTeamMemberLeave_NFMsgTeam_2eproto.base,
  &scc_info_ReqAckAcceptTeamInvite_NFMsgTeam_2eproto.base,
  &scc_info_ReqAckRejectTeamInvite_NFMsgTeam_2eproto.base,
  &scc_info_ReqAckTeamMemberList_NFMsgTeam_2eproto.base,
  &scc_info_ReqCancelInviteToTeam_NFMsgTeam_2eproto.base,
  &scc_info_ReqInviteToTeam_NFMsgTeam_2eproto.base,
  &scc_info_TeamMemberInfo_NFMsgTeam_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFMsgTeam_2eproto_once;
static bool descriptor_table_NFMsgTeam_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgTeam_2eproto = {
  &descriptor_table_NFMsgTeam_2eproto_initialized, descriptor_table_protodef_NFMsgTeam_2eproto, "NFMsgTeam.proto", 772,
  &descriptor_table_NFMsgTeam_2eproto_once, descriptor_table_NFMsgTeam_2eproto_sccs, descriptor_table_NFMsgTeam_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_NFMsgTeam_2eproto::offsets,
  file_level_metadata_NFMsgTeam_2eproto, 9, file_level_enum_descriptors_NFMsgTeam_2eproto, file_level_service_descriptors_NFMsgTeam_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFMsgTeam_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFMsgTeam_2eproto), true);
namespace NFMsg {

// ===================================================================

void TeamMemberInfo::InitAsDefaultInstance() {
  ::NFMsg::_TeamMemberInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class TeamMemberInfo::_Internal {
 public:
  static const ::NFMsg::Ident& id(const TeamMemberInfo* msg);
};

const ::NFMsg::Ident&
TeamMemberInfo::_Internal::id(const TeamMemberInfo* msg) {
  return *msg->id_;
}
void TeamMemberInfo::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
TeamMemberInfo::TeamMemberInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.TeamMemberInfo)
}
TeamMemberInfo::TeamMemberInfo(const TeamMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&bp_, &from.bp_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_) -
    reinterpret_cast<char*>(&bp_)) + sizeof(pending_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.TeamMemberInfo)
}

void TeamMemberInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamMemberInfo_NFMsgTeam_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pending_));
}

TeamMemberInfo::~TeamMemberInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.TeamMemberInfo)
  SharedDtor();
}

void TeamMemberInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void TeamMemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamMemberInfo& TeamMemberInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamMemberInfo_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void TeamMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.TeamMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&bp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_) -
      reinterpret_cast<char*>(&bp_)) + sizeof(pending_));
  _internal_metadata_.Clear();
}

const char* TeamMemberInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamMemberInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.TeamMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 bp = 3;
  if (this->bp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bp(), target);
  }

  // int32 leader = 4;
  if (this->leader() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_leader(), target);
  }

  // int32 pending = 5;
  if (this->pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pending(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.TeamMemberInfo)
  return target;
}

size_t TeamMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.TeamMemberInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 bp = 3;
  if (this->bp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bp());
  }

  // int32 leader = 4;
  if (this->leader() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leader());
  }

  // int32 pending = 5;
  if (this->pending() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pending());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamMemberInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.TeamMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamMemberInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamMemberInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.TeamMemberInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.TeamMemberInfo)
    MergeFrom(*source);
  }
}

void TeamMemberInfo::MergeFrom(const TeamMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.TeamMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.bp() != 0) {
    _internal_set_bp(from._internal_bp());
  }
  if (from.leader() != 0) {
    _internal_set_leader(from._internal_leader());
  }
  if (from.pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
}

void TeamMemberInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.TeamMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberInfo::CopyFrom(const TeamMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.TeamMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberInfo::IsInitialized() const {
  return true;
}

void TeamMemberInfo::InternalSwap(TeamMemberInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(bp_, other->bp_);
  swap(leader_, other->leader_);
  swap(pending_, other->pending_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamMemberInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckTeamMemberList::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckTeamMemberList_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckTeamMemberList::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const ReqAckTeamMemberList* msg);
};

const ::NFMsg::Ident&
ReqAckTeamMemberList::_Internal::team_id(const ReqAckTeamMemberList* msg) {
  return *msg->team_id_;
}
void ReqAckTeamMemberList::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
ReqAckTeamMemberList::ReqAckTeamMemberList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckTeamMemberList)
}
ReqAckTeamMemberList::ReqAckTeamMemberList(const ReqAckTeamMemberList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      memberlist_(from.memberlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckTeamMemberList)
}

void ReqAckTeamMemberList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckTeamMemberList_NFMsgTeam_2eproto.base);
  team_id_ = nullptr;
}

ReqAckTeamMemberList::~ReqAckTeamMemberList() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckTeamMemberList)
  SharedDtor();
}

void ReqAckTeamMemberList::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
}

void ReqAckTeamMemberList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckTeamMemberList& ReqAckTeamMemberList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckTeamMemberList_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void ReqAckTeamMemberList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckTeamMemberList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memberlist_.Clear();
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckTeamMemberList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.TeamMemberInfo memberList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_memberlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckTeamMemberList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckTeamMemberList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::team_id(this), target, stream);
  }

  // repeated .NFMsg.TeamMemberInfo memberList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_memberlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_memberlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckTeamMemberList)
  return target;
}

size_t ReqAckTeamMemberList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckTeamMemberList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.TeamMemberInfo memberList = 2;
  total_size += 1UL * this->_internal_memberlist_size();
  for (const auto& msg : this->memberlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckTeamMemberList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckTeamMemberList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckTeamMemberList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckTeamMemberList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckTeamMemberList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckTeamMemberList)
    MergeFrom(*source);
  }
}

void ReqAckTeamMemberList::MergeFrom(const ReqAckTeamMemberList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckTeamMemberList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberlist_.MergeFrom(from.memberlist_);
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
}

void ReqAckTeamMemberList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckTeamMemberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckTeamMemberList::CopyFrom(const ReqAckTeamMemberList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckTeamMemberList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckTeamMemberList::IsInitialized() const {
  return true;
}

void ReqAckTeamMemberList::InternalSwap(ReqAckTeamMemberList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  memberlist_.InternalSwap(&other->memberlist_);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckTeamMemberList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckTeamMemberAdd::InitAsDefaultInstance() {
  ::NFMsg::_AckTeamMemberAdd_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class AckTeamMemberAdd::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const AckTeamMemberAdd* msg);
};

const ::NFMsg::Ident&
AckTeamMemberAdd::_Internal::team_id(const AckTeamMemberAdd* msg) {
  return *msg->team_id_;
}
void AckTeamMemberAdd::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
AckTeamMemberAdd::AckTeamMemberAdd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckTeamMemberAdd)
}
AckTeamMemberAdd::AckTeamMemberAdd(const AckTeamMemberAdd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckTeamMemberAdd)
}

void AckTeamMemberAdd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckTeamMemberAdd_NFMsgTeam_2eproto.base);
  team_id_ = nullptr;
}

AckTeamMemberAdd::~AckTeamMemberAdd() {
  // @@protoc_insertion_point(destructor:NFMsg.AckTeamMemberAdd)
  SharedDtor();
}

void AckTeamMemberAdd::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
}

void AckTeamMemberAdd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckTeamMemberAdd& AckTeamMemberAdd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckTeamMemberAdd_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void AckTeamMemberAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckTeamMemberAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AckTeamMemberAdd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.TeamMemberInfo member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckTeamMemberAdd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckTeamMemberAdd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::team_id(this), target, stream);
  }

  // repeated .NFMsg.TeamMemberInfo member = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_member(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckTeamMemberAdd)
  return target;
}

size_t AckTeamMemberAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckTeamMemberAdd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.TeamMemberInfo member = 2;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTeamMemberAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckTeamMemberAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTeamMemberAdd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckTeamMemberAdd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckTeamMemberAdd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckTeamMemberAdd)
    MergeFrom(*source);
  }
}

void AckTeamMemberAdd::MergeFrom(const AckTeamMemberAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckTeamMemberAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
}

void AckTeamMemberAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckTeamMemberAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamMemberAdd::CopyFrom(const AckTeamMemberAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckTeamMemberAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamMemberAdd::IsInitialized() const {
  return true;
}

void AckTeamMemberAdd::InternalSwap(AckTeamMemberAdd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_.InternalSwap(&other->member_);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckTeamMemberAdd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckTeamMemberLeave::InitAsDefaultInstance() {
  ::NFMsg::_AckTeamMemberLeave_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class AckTeamMemberLeave::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const AckTeamMemberLeave* msg);
};

const ::NFMsg::Ident&
AckTeamMemberLeave::_Internal::team_id(const AckTeamMemberLeave* msg) {
  return *msg->team_id_;
}
void AckTeamMemberLeave::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
void AckTeamMemberLeave::clear_member() {
  member_.Clear();
}
AckTeamMemberLeave::AckTeamMemberLeave()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckTeamMemberLeave)
}
AckTeamMemberLeave::AckTeamMemberLeave(const AckTeamMemberLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_(from.member_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckTeamMemberLeave)
}

void AckTeamMemberLeave::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckTeamMemberLeave_NFMsgTeam_2eproto.base);
  team_id_ = nullptr;
}

AckTeamMemberLeave::~AckTeamMemberLeave() {
  // @@protoc_insertion_point(destructor:NFMsg.AckTeamMemberLeave)
  SharedDtor();
}

void AckTeamMemberLeave::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
}

void AckTeamMemberLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckTeamMemberLeave& AckTeamMemberLeave::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckTeamMemberLeave_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void AckTeamMemberLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckTeamMemberLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AckTeamMemberLeave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Ident member = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckTeamMemberLeave::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckTeamMemberLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::team_id(this), target, stream);
  }

  // repeated .NFMsg.Ident member = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_member(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckTeamMemberLeave)
  return target;
}

size_t AckTeamMemberLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckTeamMemberLeave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident member = 2;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTeamMemberLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckTeamMemberLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTeamMemberLeave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckTeamMemberLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckTeamMemberLeave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckTeamMemberLeave)
    MergeFrom(*source);
  }
}

void AckTeamMemberLeave::MergeFrom(const AckTeamMemberLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckTeamMemberLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
}

void AckTeamMemberLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckTeamMemberLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamMemberLeave::CopyFrom(const AckTeamMemberLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckTeamMemberLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamMemberLeave::IsInitialized() const {
  return true;
}

void AckTeamMemberLeave::InternalSwap(AckTeamMemberLeave* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_.InternalSwap(&other->member_);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckTeamMemberLeave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqInviteToTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqInviteToTeam_default_instance_._instance.get_mutable()->stranger_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqInviteToTeam::_Internal {
 public:
  static const ::NFMsg::Ident& stranger(const ReqInviteToTeam* msg);
};

const ::NFMsg::Ident&
ReqInviteToTeam::_Internal::stranger(const ReqInviteToTeam* msg) {
  return *msg->stranger_;
}
void ReqInviteToTeam::clear_stranger() {
  if (GetArenaNoVirtual() == nullptr && stranger_ != nullptr) {
    delete stranger_;
  }
  stranger_ = nullptr;
}
ReqInviteToTeam::ReqInviteToTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqInviteToTeam)
}
ReqInviteToTeam::ReqInviteToTeam(const ReqInviteToTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stranger()) {
    stranger_ = new ::NFMsg::Ident(*from.stranger_);
  } else {
    stranger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqInviteToTeam)
}

void ReqInviteToTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqInviteToTeam_NFMsgTeam_2eproto.base);
  stranger_ = nullptr;
}

ReqInviteToTeam::~ReqInviteToTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqInviteToTeam)
  SharedDtor();
}

void ReqInviteToTeam::SharedDtor() {
  if (this != internal_default_instance()) delete stranger_;
}

void ReqInviteToTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqInviteToTeam& ReqInviteToTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqInviteToTeam_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void ReqInviteToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqInviteToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stranger_ != nullptr) {
    delete stranger_;
  }
  stranger_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqInviteToTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident stranger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stranger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqInviteToTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqInviteToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident stranger = 1;
  if (this->has_stranger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::stranger(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqInviteToTeam)
  return target;
}

size_t ReqInviteToTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqInviteToTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident stranger = 1;
  if (this->has_stranger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stranger_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqInviteToTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqInviteToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqInviteToTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqInviteToTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqInviteToTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqInviteToTeam)
    MergeFrom(*source);
  }
}

void ReqInviteToTeam::MergeFrom(const ReqInviteToTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqInviteToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stranger()) {
    _internal_mutable_stranger()->::NFMsg::Ident::MergeFrom(from._internal_stranger());
  }
}

void ReqInviteToTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqInviteToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInviteToTeam::CopyFrom(const ReqInviteToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqInviteToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInviteToTeam::IsInitialized() const {
  return true;
}

void ReqInviteToTeam::InternalSwap(ReqInviteToTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stranger_, other->stranger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqInviteToTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCancelInviteToTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqCancelInviteToTeam_default_instance_._instance.get_mutable()->stranger_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqCancelInviteToTeam::_Internal {
 public:
  static const ::NFMsg::Ident& stranger(const ReqCancelInviteToTeam* msg);
};

const ::NFMsg::Ident&
ReqCancelInviteToTeam::_Internal::stranger(const ReqCancelInviteToTeam* msg) {
  return *msg->stranger_;
}
void ReqCancelInviteToTeam::clear_stranger() {
  if (GetArenaNoVirtual() == nullptr && stranger_ != nullptr) {
    delete stranger_;
  }
  stranger_ = nullptr;
}
ReqCancelInviteToTeam::ReqCancelInviteToTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqCancelInviteToTeam)
}
ReqCancelInviteToTeam::ReqCancelInviteToTeam(const ReqCancelInviteToTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stranger()) {
    stranger_ = new ::NFMsg::Ident(*from.stranger_);
  } else {
    stranger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqCancelInviteToTeam)
}

void ReqCancelInviteToTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCancelInviteToTeam_NFMsgTeam_2eproto.base);
  stranger_ = nullptr;
}

ReqCancelInviteToTeam::~ReqCancelInviteToTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqCancelInviteToTeam)
  SharedDtor();
}

void ReqCancelInviteToTeam::SharedDtor() {
  if (this != internal_default_instance()) delete stranger_;
}

void ReqCancelInviteToTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCancelInviteToTeam& ReqCancelInviteToTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCancelInviteToTeam_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void ReqCancelInviteToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqCancelInviteToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && stranger_ != nullptr) {
    delete stranger_;
  }
  stranger_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqCancelInviteToTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident stranger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stranger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCancelInviteToTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqCancelInviteToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident stranger = 1;
  if (this->has_stranger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::stranger(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqCancelInviteToTeam)
  return target;
}

size_t ReqCancelInviteToTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqCancelInviteToTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident stranger = 1;
  if (this->has_stranger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stranger_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCancelInviteToTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqCancelInviteToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCancelInviteToTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCancelInviteToTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqCancelInviteToTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqCancelInviteToTeam)
    MergeFrom(*source);
  }
}

void ReqCancelInviteToTeam::MergeFrom(const ReqCancelInviteToTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqCancelInviteToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stranger()) {
    _internal_mutable_stranger()->::NFMsg::Ident::MergeFrom(from._internal_stranger());
  }
}

void ReqCancelInviteToTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqCancelInviteToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelInviteToTeam::CopyFrom(const ReqCancelInviteToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqCancelInviteToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelInviteToTeam::IsInitialized() const {
  return true;
}

void ReqCancelInviteToTeam::InternalSwap(ReqCancelInviteToTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stranger_, other->stranger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCancelInviteToTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckInviteToTeam::InitAsDefaultInstance() {
  ::NFMsg::_AckInviteToTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckInviteToTeam_default_instance_._instance.get_mutable()->inviter_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckInviteToTeam_default_instance_._instance.get_mutable()->stranger_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class AckInviteToTeam::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const AckInviteToTeam* msg);
  static const ::NFMsg::Ident& inviter(const AckInviteToTeam* msg);
  static const ::NFMsg::Ident& stranger(const AckInviteToTeam* msg);
};

const ::NFMsg::Ident&
AckInviteToTeam::_Internal::team_id(const AckInviteToTeam* msg) {
  return *msg->team_id_;
}
const ::NFMsg::Ident&
AckInviteToTeam::_Internal::inviter(const AckInviteToTeam* msg) {
  return *msg->inviter_;
}
const ::NFMsg::Ident&
AckInviteToTeam::_Internal::stranger(const AckInviteToTeam* msg) {
  return *msg->stranger_;
}
void AckInviteToTeam::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
void AckInviteToTeam::clear_inviter() {
  if (GetArenaNoVirtual() == nullptr && inviter_ != nullptr) {
    delete inviter_;
  }
  inviter_ = nullptr;
}
void AckInviteToTeam::clear_stranger() {
  if (GetArenaNoVirtual() == nullptr && stranger_ != nullptr) {
    delete stranger_;
  }
  stranger_ = nullptr;
}
AckInviteToTeam::AckInviteToTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckInviteToTeam)
}
AckInviteToTeam::AckInviteToTeam(const AckInviteToTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  if (from._internal_has_inviter()) {
    inviter_ = new ::NFMsg::Ident(*from.inviter_);
  } else {
    inviter_ = nullptr;
  }
  if (from._internal_has_stranger()) {
    stranger_ = new ::NFMsg::Ident(*from.stranger_);
  } else {
    stranger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckInviteToTeam)
}

void AckInviteToTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckInviteToTeam_NFMsgTeam_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stranger_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(stranger_));
}

AckInviteToTeam::~AckInviteToTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.AckInviteToTeam)
  SharedDtor();
}

void AckInviteToTeam::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete inviter_;
  if (this != internal_default_instance()) delete stranger_;
}

void AckInviteToTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckInviteToTeam& AckInviteToTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckInviteToTeam_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void AckInviteToTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckInviteToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && inviter_ != nullptr) {
    delete inviter_;
  }
  inviter_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stranger_ != nullptr) {
    delete stranger_;
  }
  stranger_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AckInviteToTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident inviter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident stranger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stranger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckInviteToTeam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckInviteToTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::team_id(this), target, stream);
  }

  // .NFMsg.Ident inviter = 2;
  if (this->has_inviter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::inviter(this), target, stream);
  }

  // bytes name = 3;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .NFMsg.Ident stranger = 4;
  if (this->has_stranger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::stranger(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckInviteToTeam)
  return target;
}

size_t AckInviteToTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckInviteToTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident inviter = 2;
  if (this->has_inviter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inviter_);
  }

  // .NFMsg.Ident stranger = 4;
  if (this->has_stranger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stranger_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckInviteToTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckInviteToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const AckInviteToTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckInviteToTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckInviteToTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckInviteToTeam)
    MergeFrom(*source);
  }
}

void AckInviteToTeam::MergeFrom(const AckInviteToTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckInviteToTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
  if (from.has_inviter()) {
    _internal_mutable_inviter()->::NFMsg::Ident::MergeFrom(from._internal_inviter());
  }
  if (from.has_stranger()) {
    _internal_mutable_stranger()->::NFMsg::Ident::MergeFrom(from._internal_stranger());
  }
}

void AckInviteToTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckInviteToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInviteToTeam::CopyFrom(const AckInviteToTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckInviteToTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInviteToTeam::IsInitialized() const {
  return true;
}

void AckInviteToTeam::InternalSwap(AckInviteToTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(inviter_, other->inviter_);
  swap(stranger_, other->stranger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckInviteToTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckAcceptTeamInvite::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckAcceptTeamInvite_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckAcceptTeamInvite::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const ReqAckAcceptTeamInvite* msg);
};

const ::NFMsg::Ident&
ReqAckAcceptTeamInvite::_Internal::team_id(const ReqAckAcceptTeamInvite* msg) {
  return *msg->team_id_;
}
void ReqAckAcceptTeamInvite::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
ReqAckAcceptTeamInvite::ReqAckAcceptTeamInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckAcceptTeamInvite)
}
ReqAckAcceptTeamInvite::ReqAckAcceptTeamInvite(const ReqAckAcceptTeamInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckAcceptTeamInvite)
}

void ReqAckAcceptTeamInvite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckAcceptTeamInvite_NFMsgTeam_2eproto.base);
  team_id_ = nullptr;
}

ReqAckAcceptTeamInvite::~ReqAckAcceptTeamInvite() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckAcceptTeamInvite)
  SharedDtor();
}

void ReqAckAcceptTeamInvite::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
}

void ReqAckAcceptTeamInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckAcceptTeamInvite& ReqAckAcceptTeamInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckAcceptTeamInvite_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void ReqAckAcceptTeamInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckAcceptTeamInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckAcceptTeamInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckAcceptTeamInvite::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckAcceptTeamInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::team_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckAcceptTeamInvite)
  return target;
}

size_t ReqAckAcceptTeamInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckAcceptTeamInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckAcceptTeamInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckAcceptTeamInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckAcceptTeamInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckAcceptTeamInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckAcceptTeamInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckAcceptTeamInvite)
    MergeFrom(*source);
  }
}

void ReqAckAcceptTeamInvite::MergeFrom(const ReqAckAcceptTeamInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckAcceptTeamInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
}

void ReqAckAcceptTeamInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckAcceptTeamInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckAcceptTeamInvite::CopyFrom(const ReqAckAcceptTeamInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckAcceptTeamInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckAcceptTeamInvite::IsInitialized() const {
  return true;
}

void ReqAckAcceptTeamInvite::InternalSwap(ReqAckAcceptTeamInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckAcceptTeamInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckRejectTeamInvite::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckRejectTeamInvite_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckRejectTeamInvite::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const ReqAckRejectTeamInvite* msg);
};

const ::NFMsg::Ident&
ReqAckRejectTeamInvite::_Internal::team_id(const ReqAckRejectTeamInvite* msg) {
  return *msg->team_id_;
}
void ReqAckRejectTeamInvite::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
ReqAckRejectTeamInvite::ReqAckRejectTeamInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckRejectTeamInvite)
}
ReqAckRejectTeamInvite::ReqAckRejectTeamInvite(const ReqAckRejectTeamInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckRejectTeamInvite)
}

void ReqAckRejectTeamInvite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckRejectTeamInvite_NFMsgTeam_2eproto.base);
  team_id_ = nullptr;
}

ReqAckRejectTeamInvite::~ReqAckRejectTeamInvite() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckRejectTeamInvite)
  SharedDtor();
}

void ReqAckRejectTeamInvite::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
}

void ReqAckRejectTeamInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckRejectTeamInvite& ReqAckRejectTeamInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckRejectTeamInvite_NFMsgTeam_2eproto.base);
  return *internal_default_instance();
}


void ReqAckRejectTeamInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckRejectTeamInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckRejectTeamInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckRejectTeamInvite::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckRejectTeamInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::team_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckRejectTeamInvite)
  return target;
}

size_t ReqAckRejectTeamInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckRejectTeamInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident team_id = 1;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckRejectTeamInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckRejectTeamInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckRejectTeamInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckRejectTeamInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckRejectTeamInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckRejectTeamInvite)
    MergeFrom(*source);
  }
}

void ReqAckRejectTeamInvite::MergeFrom(const ReqAckRejectTeamInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckRejectTeamInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
}

void ReqAckRejectTeamInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckRejectTeamInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckRejectTeamInvite::CopyFrom(const ReqAckRejectTeamInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckRejectTeamInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckRejectTeamInvite::IsInitialized() const {
  return true;
}

void ReqAckRejectTeamInvite::InternalSwap(ReqAckRejectTeamInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckRejectTeamInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFMsg::TeamMemberInfo* Arena::CreateMaybeMessage< ::NFMsg::TeamMemberInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::TeamMemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckTeamMemberList* Arena::CreateMaybeMessage< ::NFMsg::ReqAckTeamMemberList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckTeamMemberList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckTeamMemberAdd* Arena::CreateMaybeMessage< ::NFMsg::AckTeamMemberAdd >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckTeamMemberAdd >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckTeamMemberLeave* Arena::CreateMaybeMessage< ::NFMsg::AckTeamMemberLeave >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckTeamMemberLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqInviteToTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqInviteToTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqInviteToTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqCancelInviteToTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqCancelInviteToTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqCancelInviteToTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckInviteToTeam* Arena::CreateMaybeMessage< ::NFMsg::AckInviteToTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckInviteToTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckAcceptTeamInvite* Arena::CreateMaybeMessage< ::NFMsg::ReqAckAcceptTeamInvite >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckAcceptTeamInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckRejectTeamInvite* Arena::CreateMaybeMessage< ::NFMsg::ReqAckRejectTeamInvite >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckRejectTeamInvite >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
