// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgFriend.proto

#include "NFMsgFriend.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NFMsgFriend_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendData_NFMsgFriend_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFMsgBase_2eproto;
namespace NFMsg {
class FriendDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FriendData> _instance;
} _FriendData_default_instance_;
class ReqAckFriendListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckFriendList> _instance;
} _ReqAckFriendList_default_instance_;
class ReqAckDeleteFriendDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckDeleteFriend> _instance;
} _ReqAckDeleteFriend_default_instance_;
class ReqAckSendInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckSendInvite> _instance;
} _ReqAckSendInvite_default_instance_;
class ReqAckAcceptInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckAcceptInvite> _instance;
} _ReqAckAcceptInvite_default_instance_;
class ReqAckRejectInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckRejectInvite> _instance;
} _ReqAckRejectInvite_default_instance_;
class ReqAckIgnoreInviteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckIgnoreInvite> _instance;
} _ReqAckIgnoreInvite_default_instance_;
class ReqAckBlockPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckBlockPlayer> _instance;
} _ReqAckBlockPlayer_default_instance_;
class ReqAckUnBlockPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckUnBlockPlayer> _instance;
} _ReqAckUnBlockPlayer_default_instance_;
}  // namespace NFMsg
static void InitDefaultsscc_info_FriendData_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_FriendData_default_instance_;
    new (ptr) ::NFMsg::FriendData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::FriendData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FriendData_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FriendData_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckAcceptInvite_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckAcceptInvite_default_instance_;
    new (ptr) ::NFMsg::ReqAckAcceptInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckAcceptInvite::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckAcceptInvite_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckAcceptInvite_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckBlockPlayer_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckBlockPlayer_default_instance_;
    new (ptr) ::NFMsg::ReqAckBlockPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckBlockPlayer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckBlockPlayer_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckBlockPlayer_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckDeleteFriend_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckDeleteFriend_default_instance_;
    new (ptr) ::NFMsg::ReqAckDeleteFriend();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckDeleteFriend::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckDeleteFriend_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckDeleteFriend_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckFriendList_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckFriendList_default_instance_;
    new (ptr) ::NFMsg::ReqAckFriendList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckFriendList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckFriendList_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckFriendList_NFMsgFriend_2eproto}, {
      &scc_info_FriendData_NFMsgFriend_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckIgnoreInvite_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckIgnoreInvite_default_instance_;
    new (ptr) ::NFMsg::ReqAckIgnoreInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckIgnoreInvite::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckIgnoreInvite_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckIgnoreInvite_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckRejectInvite_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckRejectInvite_default_instance_;
    new (ptr) ::NFMsg::ReqAckRejectInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckRejectInvite::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckRejectInvite_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckRejectInvite_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckSendInvite_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSendInvite_default_instance_;
    new (ptr) ::NFMsg::ReqAckSendInvite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSendInvite::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckSendInvite_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckSendInvite_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckUnBlockPlayer_NFMsgFriend_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUnBlockPlayer_default_instance_;
    new (ptr) ::NFMsg::ReqAckUnBlockPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUnBlockPlayer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckUnBlockPlayer_NFMsgFriend_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckUnBlockPlayer_NFMsgFriend_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NFMsgFriend_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NFMsgFriend_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFMsgFriend_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFMsgFriend_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::FriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::FriendData, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::FriendData, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckFriendList, invitelist_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckFriendList, friendlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckDeleteFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckDeleteFriend, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSendInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSendInvite, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSendInvite, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckAcceptInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckAcceptInvite, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckRejectInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckRejectInvite, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckIgnoreInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckIgnoreInvite, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckBlockPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckBlockPlayer, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUnBlockPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUnBlockPlayer, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::FriendData)},
  { 7, -1, sizeof(::NFMsg::ReqAckFriendList)},
  { 14, -1, sizeof(::NFMsg::ReqAckDeleteFriend)},
  { 20, -1, sizeof(::NFMsg::ReqAckSendInvite)},
  { 27, -1, sizeof(::NFMsg::ReqAckAcceptInvite)},
  { 33, -1, sizeof(::NFMsg::ReqAckRejectInvite)},
  { 39, -1, sizeof(::NFMsg::ReqAckIgnoreInvite)},
  { 45, -1, sizeof(::NFMsg::ReqAckBlockPlayer)},
  { 51, -1, sizeof(::NFMsg::ReqAckUnBlockPlayer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_FriendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckDeleteFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckSendInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckAcceptInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckRejectInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckIgnoreInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckBlockPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckUnBlockPlayer_default_instance_),
};

const char descriptor_table_protodef_NFMsgFriend_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021NFMsgFriend.proto\022\005NFMsg\032\017NFMsgBase.pr"
  "oto\"4\n\nFriendData\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Id"
  "ent\022\014\n\004name\030\002 \001(\014\"`\n\020ReqAckFriendList\022%\n"
  "\ninviteList\030\001 \003(\0132\021.NFMsg.FriendData\022%\n\n"
  "friendList\030\002 \003(\0132\021.NFMsg.FriendData\".\n\022R"
  "eqAckDeleteFriend\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Id"
  "ent\":\n\020ReqAckSendInvite\022\030\n\002id\030\001 \001(\0132\014.NF"
  "Msg.Ident\022\014\n\004name\030\002 \001(\014\".\n\022ReqAckAcceptI"
  "nvite\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Ident\".\n\022ReqAc"
  "kRejectInvite\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Ident\""
  ".\n\022ReqAckIgnoreInvite\022\030\n\002id\030\001 \001(\0132\014.NFMs"
  "g.Ident\"-\n\021ReqAckBlockPlayer\022\030\n\002id\030\001 \001(\013"
  "2\014.NFMsg.Ident\"/\n\023ReqAckUnBlockPlayer\022\030\n"
  "\002id\030\001 \001(\0132\014.NFMsg.Identb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFMsgFriend_2eproto_deps[1] = {
  &::descriptor_table_NFMsgBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFMsgFriend_2eproto_sccs[9] = {
  &scc_info_FriendData_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckAcceptInvite_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckBlockPlayer_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckDeleteFriend_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckFriendList_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckIgnoreInvite_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckRejectInvite_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckSendInvite_NFMsgFriend_2eproto.base,
  &scc_info_ReqAckUnBlockPlayer_NFMsgFriend_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFMsgFriend_2eproto_once;
static bool descriptor_table_NFMsgFriend_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgFriend_2eproto = {
  &descriptor_table_NFMsgFriend_2eproto_initialized, descriptor_table_protodef_NFMsgFriend_2eproto, "NFMsgFriend.proto", 551,
  &descriptor_table_NFMsgFriend_2eproto_once, descriptor_table_NFMsgFriend_2eproto_sccs, descriptor_table_NFMsgFriend_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_NFMsgFriend_2eproto::offsets,
  file_level_metadata_NFMsgFriend_2eproto, 9, file_level_enum_descriptors_NFMsgFriend_2eproto, file_level_service_descriptors_NFMsgFriend_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFMsgFriend_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFMsgFriend_2eproto), true);
namespace NFMsg {

// ===================================================================

void FriendData::InitAsDefaultInstance() {
  ::NFMsg::_FriendData_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class FriendData::_Internal {
 public:
  static const ::NFMsg::Ident& id(const FriendData* msg);
};

const ::NFMsg::Ident&
FriendData::_Internal::id(const FriendData* msg) {
  return *msg->id_;
}
void FriendData::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
FriendData::FriendData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.FriendData)
}
FriendData::FriendData(const FriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.FriendData)
}

void FriendData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FriendData_NFMsgFriend_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

FriendData::~FriendData() {
  // @@protoc_insertion_point(destructor:NFMsg.FriendData)
  SharedDtor();
}

void FriendData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void FriendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FriendData& FriendData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FriendData_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void FriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.FriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FriendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FriendData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.FriendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.FriendData)
  return target;
}

size_t FriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.FriendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FriendData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.FriendData)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FriendData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.FriendData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.FriendData)
    MergeFrom(*source);
  }
}

void FriendData::MergeFrom(const FriendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.FriendData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void FriendData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.FriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendData::CopyFrom(const FriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.FriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendData::IsInitialized() const {
  return true;
}

void FriendData::InternalSwap(FriendData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckFriendList::InitAsDefaultInstance() {
}
class ReqAckFriendList::_Internal {
 public:
};

ReqAckFriendList::ReqAckFriendList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckFriendList)
}
ReqAckFriendList::ReqAckFriendList(const ReqAckFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      invitelist_(from.invitelist_),
      friendlist_(from.friendlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckFriendList)
}

void ReqAckFriendList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckFriendList_NFMsgFriend_2eproto.base);
}

ReqAckFriendList::~ReqAckFriendList() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckFriendList)
  SharedDtor();
}

void ReqAckFriendList::SharedDtor() {
}

void ReqAckFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckFriendList& ReqAckFriendList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckFriendList_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitelist_.Clear();
  friendlist_.Clear();
  _internal_metadata_.Clear();
}

const char* ReqAckFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.FriendData inviteList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invitelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.FriendData friendList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friendlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckFriendList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.FriendData inviteList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invitelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_invitelist(i), target, stream);
  }

  // repeated .NFMsg.FriendData friendList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friendlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_friendlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckFriendList)
  return target;
}

size_t ReqAckFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.FriendData inviteList = 1;
  total_size += 1UL * this->_internal_invitelist_size();
  for (const auto& msg : this->invitelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.FriendData friendList = 2;
  total_size += 1UL * this->_internal_friendlist_size();
  for (const auto& msg : this->friendlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckFriendList)
    MergeFrom(*source);
  }
}

void ReqAckFriendList::MergeFrom(const ReqAckFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invitelist_.MergeFrom(from.invitelist_);
  friendlist_.MergeFrom(from.friendlist_);
}

void ReqAckFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckFriendList::CopyFrom(const ReqAckFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckFriendList::IsInitialized() const {
  return true;
}

void ReqAckFriendList::InternalSwap(ReqAckFriendList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  invitelist_.InternalSwap(&other->invitelist_);
  friendlist_.InternalSwap(&other->friendlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckFriendList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckDeleteFriend::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckDeleteFriend_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckDeleteFriend::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqAckDeleteFriend* msg);
};

const ::NFMsg::Ident&
ReqAckDeleteFriend::_Internal::id(const ReqAckDeleteFriend* msg) {
  return *msg->id_;
}
void ReqAckDeleteFriend::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqAckDeleteFriend::ReqAckDeleteFriend()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckDeleteFriend)
}
ReqAckDeleteFriend::ReqAckDeleteFriend(const ReqAckDeleteFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckDeleteFriend)
}

void ReqAckDeleteFriend::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckDeleteFriend_NFMsgFriend_2eproto.base);
  id_ = nullptr;
}

ReqAckDeleteFriend::~ReqAckDeleteFriend() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckDeleteFriend)
  SharedDtor();
}

void ReqAckDeleteFriend::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ReqAckDeleteFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckDeleteFriend& ReqAckDeleteFriend::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckDeleteFriend_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckDeleteFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckDeleteFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckDeleteFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckDeleteFriend::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckDeleteFriend)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckDeleteFriend)
  return target;
}

size_t ReqAckDeleteFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckDeleteFriend)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckDeleteFriend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckDeleteFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckDeleteFriend* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckDeleteFriend>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckDeleteFriend)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckDeleteFriend)
    MergeFrom(*source);
  }
}

void ReqAckDeleteFriend::MergeFrom(const ReqAckDeleteFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckDeleteFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void ReqAckDeleteFriend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckDeleteFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckDeleteFriend::CopyFrom(const ReqAckDeleteFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckDeleteFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckDeleteFriend::IsInitialized() const {
  return true;
}

void ReqAckDeleteFriend::InternalSwap(ReqAckDeleteFriend* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckDeleteFriend::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckSendInvite::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckSendInvite_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckSendInvite::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqAckSendInvite* msg);
};

const ::NFMsg::Ident&
ReqAckSendInvite::_Internal::id(const ReqAckSendInvite* msg) {
  return *msg->id_;
}
void ReqAckSendInvite::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqAckSendInvite::ReqAckSendInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSendInvite)
}
ReqAckSendInvite::ReqAckSendInvite(const ReqAckSendInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSendInvite)
}

void ReqAckSendInvite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckSendInvite_NFMsgFriend_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = nullptr;
}

ReqAckSendInvite::~ReqAckSendInvite() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSendInvite)
  SharedDtor();
}

void ReqAckSendInvite::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqAckSendInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckSendInvite& ReqAckSendInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckSendInvite_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckSendInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSendInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckSendInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckSendInvite::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSendInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSendInvite)
  return target;
}

size_t ReqAckSendInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSendInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSendInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSendInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSendInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckSendInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSendInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSendInvite)
    MergeFrom(*source);
  }
}

void ReqAckSendInvite::MergeFrom(const ReqAckSendInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSendInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void ReqAckSendInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSendInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSendInvite::CopyFrom(const ReqAckSendInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSendInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSendInvite::IsInitialized() const {
  return true;
}

void ReqAckSendInvite::InternalSwap(ReqAckSendInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckSendInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckAcceptInvite::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckAcceptInvite_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckAcceptInvite::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqAckAcceptInvite* msg);
};

const ::NFMsg::Ident&
ReqAckAcceptInvite::_Internal::id(const ReqAckAcceptInvite* msg) {
  return *msg->id_;
}
void ReqAckAcceptInvite::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqAckAcceptInvite::ReqAckAcceptInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckAcceptInvite)
}
ReqAckAcceptInvite::ReqAckAcceptInvite(const ReqAckAcceptInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckAcceptInvite)
}

void ReqAckAcceptInvite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckAcceptInvite_NFMsgFriend_2eproto.base);
  id_ = nullptr;
}

ReqAckAcceptInvite::~ReqAckAcceptInvite() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckAcceptInvite)
  SharedDtor();
}

void ReqAckAcceptInvite::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ReqAckAcceptInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckAcceptInvite& ReqAckAcceptInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckAcceptInvite_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckAcceptInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckAcceptInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckAcceptInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckAcceptInvite::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckAcceptInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckAcceptInvite)
  return target;
}

size_t ReqAckAcceptInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckAcceptInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckAcceptInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckAcceptInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckAcceptInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckAcceptInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckAcceptInvite)
    MergeFrom(*source);
  }
}

void ReqAckAcceptInvite::MergeFrom(const ReqAckAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckAcceptInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void ReqAckAcceptInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckAcceptInvite::CopyFrom(const ReqAckAcceptInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckAcceptInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckAcceptInvite::IsInitialized() const {
  return true;
}

void ReqAckAcceptInvite::InternalSwap(ReqAckAcceptInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckAcceptInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckRejectInvite::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckRejectInvite_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckRejectInvite::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqAckRejectInvite* msg);
};

const ::NFMsg::Ident&
ReqAckRejectInvite::_Internal::id(const ReqAckRejectInvite* msg) {
  return *msg->id_;
}
void ReqAckRejectInvite::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqAckRejectInvite::ReqAckRejectInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckRejectInvite)
}
ReqAckRejectInvite::ReqAckRejectInvite(const ReqAckRejectInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckRejectInvite)
}

void ReqAckRejectInvite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckRejectInvite_NFMsgFriend_2eproto.base);
  id_ = nullptr;
}

ReqAckRejectInvite::~ReqAckRejectInvite() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckRejectInvite)
  SharedDtor();
}

void ReqAckRejectInvite::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ReqAckRejectInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckRejectInvite& ReqAckRejectInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckRejectInvite_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckRejectInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckRejectInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckRejectInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckRejectInvite::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckRejectInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckRejectInvite)
  return target;
}

size_t ReqAckRejectInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckRejectInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckRejectInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckRejectInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckRejectInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckRejectInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckRejectInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckRejectInvite)
    MergeFrom(*source);
  }
}

void ReqAckRejectInvite::MergeFrom(const ReqAckRejectInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckRejectInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void ReqAckRejectInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckRejectInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckRejectInvite::CopyFrom(const ReqAckRejectInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckRejectInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckRejectInvite::IsInitialized() const {
  return true;
}

void ReqAckRejectInvite::InternalSwap(ReqAckRejectInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckRejectInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckIgnoreInvite::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckIgnoreInvite_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckIgnoreInvite::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqAckIgnoreInvite* msg);
};

const ::NFMsg::Ident&
ReqAckIgnoreInvite::_Internal::id(const ReqAckIgnoreInvite* msg) {
  return *msg->id_;
}
void ReqAckIgnoreInvite::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqAckIgnoreInvite::ReqAckIgnoreInvite()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckIgnoreInvite)
}
ReqAckIgnoreInvite::ReqAckIgnoreInvite(const ReqAckIgnoreInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckIgnoreInvite)
}

void ReqAckIgnoreInvite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckIgnoreInvite_NFMsgFriend_2eproto.base);
  id_ = nullptr;
}

ReqAckIgnoreInvite::~ReqAckIgnoreInvite() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckIgnoreInvite)
  SharedDtor();
}

void ReqAckIgnoreInvite::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ReqAckIgnoreInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckIgnoreInvite& ReqAckIgnoreInvite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckIgnoreInvite_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckIgnoreInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckIgnoreInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckIgnoreInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckIgnoreInvite::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckIgnoreInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckIgnoreInvite)
  return target;
}

size_t ReqAckIgnoreInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckIgnoreInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckIgnoreInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckIgnoreInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckIgnoreInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckIgnoreInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckIgnoreInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckIgnoreInvite)
    MergeFrom(*source);
  }
}

void ReqAckIgnoreInvite::MergeFrom(const ReqAckIgnoreInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckIgnoreInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void ReqAckIgnoreInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckIgnoreInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckIgnoreInvite::CopyFrom(const ReqAckIgnoreInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckIgnoreInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckIgnoreInvite::IsInitialized() const {
  return true;
}

void ReqAckIgnoreInvite::InternalSwap(ReqAckIgnoreInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckIgnoreInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckBlockPlayer::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckBlockPlayer_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckBlockPlayer::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqAckBlockPlayer* msg);
};

const ::NFMsg::Ident&
ReqAckBlockPlayer::_Internal::id(const ReqAckBlockPlayer* msg) {
  return *msg->id_;
}
void ReqAckBlockPlayer::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqAckBlockPlayer::ReqAckBlockPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckBlockPlayer)
}
ReqAckBlockPlayer::ReqAckBlockPlayer(const ReqAckBlockPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckBlockPlayer)
}

void ReqAckBlockPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckBlockPlayer_NFMsgFriend_2eproto.base);
  id_ = nullptr;
}

ReqAckBlockPlayer::~ReqAckBlockPlayer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckBlockPlayer)
  SharedDtor();
}

void ReqAckBlockPlayer::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ReqAckBlockPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckBlockPlayer& ReqAckBlockPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckBlockPlayer_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckBlockPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckBlockPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckBlockPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckBlockPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckBlockPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckBlockPlayer)
  return target;
}

size_t ReqAckBlockPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckBlockPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckBlockPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckBlockPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckBlockPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckBlockPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckBlockPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckBlockPlayer)
    MergeFrom(*source);
  }
}

void ReqAckBlockPlayer::MergeFrom(const ReqAckBlockPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckBlockPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void ReqAckBlockPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckBlockPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckBlockPlayer::CopyFrom(const ReqAckBlockPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckBlockPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckBlockPlayer::IsInitialized() const {
  return true;
}

void ReqAckBlockPlayer::InternalSwap(ReqAckBlockPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckBlockPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckUnBlockPlayer::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUnBlockPlayer_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckUnBlockPlayer::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqAckUnBlockPlayer* msg);
};

const ::NFMsg::Ident&
ReqAckUnBlockPlayer::_Internal::id(const ReqAckUnBlockPlayer* msg) {
  return *msg->id_;
}
void ReqAckUnBlockPlayer::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqAckUnBlockPlayer::ReqAckUnBlockPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUnBlockPlayer)
}
ReqAckUnBlockPlayer::ReqAckUnBlockPlayer(const ReqAckUnBlockPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUnBlockPlayer)
}

void ReqAckUnBlockPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckUnBlockPlayer_NFMsgFriend_2eproto.base);
  id_ = nullptr;
}

ReqAckUnBlockPlayer::~ReqAckUnBlockPlayer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUnBlockPlayer)
  SharedDtor();
}

void ReqAckUnBlockPlayer::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ReqAckUnBlockPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckUnBlockPlayer& ReqAckUnBlockPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckUnBlockPlayer_NFMsgFriend_2eproto.base);
  return *internal_default_instance();
}


void ReqAckUnBlockPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUnBlockPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckUnBlockPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckUnBlockPlayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUnBlockPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUnBlockPlayer)
  return target;
}

size_t ReqAckUnBlockPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUnBlockPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUnBlockPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUnBlockPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUnBlockPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckUnBlockPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUnBlockPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUnBlockPlayer)
    MergeFrom(*source);
  }
}

void ReqAckUnBlockPlayer::MergeFrom(const ReqAckUnBlockPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUnBlockPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
}

void ReqAckUnBlockPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUnBlockPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUnBlockPlayer::CopyFrom(const ReqAckUnBlockPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUnBlockPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUnBlockPlayer::IsInitialized() const {
  return true;
}

void ReqAckUnBlockPlayer::InternalSwap(ReqAckUnBlockPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckUnBlockPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFMsg::FriendData* Arena::CreateMaybeMessage< ::NFMsg::FriendData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::FriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckFriendList* Arena::CreateMaybeMessage< ::NFMsg::ReqAckFriendList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckDeleteFriend* Arena::CreateMaybeMessage< ::NFMsg::ReqAckDeleteFriend >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckDeleteFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckSendInvite* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSendInvite >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSendInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckAcceptInvite* Arena::CreateMaybeMessage< ::NFMsg::ReqAckAcceptInvite >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckAcceptInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckRejectInvite* Arena::CreateMaybeMessage< ::NFMsg::ReqAckRejectInvite >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckRejectInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckIgnoreInvite* Arena::CreateMaybeMessage< ::NFMsg::ReqAckIgnoreInvite >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckIgnoreInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckBlockPlayer* Arena::CreateMaybeMessage< ::NFMsg::ReqAckBlockPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckBlockPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckUnBlockPlayer* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUnBlockPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUnBlockPlayer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
