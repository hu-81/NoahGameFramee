// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#include "NFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyStruct_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EffectData_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemStruct_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PVPPlayerInfo_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerEntryInfo_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_NFMsgBase_2eproto;
namespace NFMsg {
class ReqEnterGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqEnterGameServer> _instance;
} _ReqEnterGameServer_default_instance_;
class ReqAckEnterGameSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckEnterGameSuccess> _instance;
} _ReqAckEnterGameSuccess_default_instance_;
class ReqHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqHeartBeat> _instance;
} _ReqHeartBeat_default_instance_;
class ReqLeaveGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqLeaveGameServer> _instance;
} _ReqLeaveGameServer_default_instance_;
class PlayerEntryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerEntryInfo> _instance;
} _PlayerEntryInfo_default_instance_;
class AckPlayerEntryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckPlayerEntryList> _instance;
} _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckPlayerLeaveList> _instance;
} _AckPlayerLeaveList_default_instance_;
class ReqAckSynDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckSynData> _instance;
} _ReqAckSynData_default_instance_;
class ReqAckPlayerMoveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckPlayerMove> _instance;
} _ReqAckPlayerMove_default_instance_;
class ReqAckPlayerChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckPlayerChat> _instance;
} _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerPosSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckPlayerPosSync> _instance;
} _ReqAckPlayerPosSync_default_instance_;
class EffectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectData> _instance;
} _EffectData_default_instance_;
class ReqAckUseSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckUseSkill> _instance;
} _ReqAckUseSkill_default_instance_;
class ReqAckUseItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckUseItem> _instance;
} _ReqAckUseItem_default_instance_;
class ReqAckSwapSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckSwapScene> _instance;
} _ReqAckSwapScene_default_instance_;
class ReqAckHomeSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckHomeScene> _instance;
} _ReqAckHomeScene_default_instance_;
class ItemStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemStruct> _instance;
} _ItemStruct_default_instance_;
class CurrencyStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrencyStruct> _instance;
} _CurrencyStruct_default_instance_;
class ReqAckReliveHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckReliveHero> _instance;
} _ReqAckReliveHero_default_instance_;
class ReqPickDropItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqPickDropItem> _instance;
} _ReqPickDropItem_default_instance_;
class ReqAcceptTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAcceptTask> _instance;
} _ReqAcceptTask_default_instance_;
class ReqCompeleteTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqCompeleteTask> _instance;
} _ReqCompeleteTask_default_instance_;
class ReqAddSceneBuildingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAddSceneBuilding> _instance;
} _ReqAddSceneBuilding_default_instance_;
class ReqSceneBuildingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSceneBuildings> _instance;
} _ReqSceneBuildings_default_instance_;
class AckSceneBuildingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckSceneBuildings> _instance;
} _AckSceneBuildings_default_instance_;
class ReqStoreSceneBuildingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqStoreSceneBuildings> _instance;
} _ReqStoreSceneBuildings_default_instance_;
class ReqAckCreateClanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckCreateClan> _instance;
} _ReqAckCreateClan_default_instance_;
class ReqSearchClanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSearchClan> _instance;
} _ReqSearchClan_default_instance_;
class AckSearchClan_SearchClanObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckSearchClan_SearchClanObject> _instance;
} _AckSearchClan_SearchClanObject_default_instance_;
class AckSearchClanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckSearchClan> _instance;
} _AckSearchClan_default_instance_;
class ReqAckJoinClanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckJoinClan> _instance;
} _ReqAckJoinClan_default_instance_;
class ReqAckLeaveClanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckLeaveClan> _instance;
} _ReqAckLeaveClan_default_instance_;
class ReqAckOprClanMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckOprClanMember> _instance;
} _ReqAckOprClanMember_default_instance_;
class ReqEnterClanEctypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqEnterClanEctype> _instance;
} _ReqEnterClanEctype_default_instance_;
class ReqSetFightHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSetFightHero> _instance;
} _ReqSetFightHero_default_instance_;
class ReqSwitchFightHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSwitchFightHero> _instance;
} _ReqSwitchFightHero_default_instance_;
class ReqBuyItemFromShopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqBuyItemFromShop> _instance;
} _ReqBuyItemFromShop_default_instance_;
class PVPPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PVPPlayerInfo> _instance;
} _PVPPlayerInfo_default_instance_;
class ReqSearchOppnentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSearchOppnent> _instance;
} _ReqSearchOppnent_default_instance_;
class AckSearchOppnentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckSearchOppnent> _instance;
} _AckSearchOppnent_default_instance_;
class ReqAckCancelSearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckCancelSearch> _instance;
} _ReqAckCancelSearch_default_instance_;
class ReqEndBattleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqEndBattle> _instance;
} _ReqEndBattle_default_instance_;
class AckEndBattleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckEndBattle> _instance;
} _AckEndBattle_default_instance_;
class ReqSendMailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSendMail> _instance;
} _ReqSendMail_default_instance_;
class ReqSwitchServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqSwitchServer> _instance;
} _ReqSwitchServer_default_instance_;
class AckSwitchServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckSwitchServer> _instance;
} _AckSwitchServer_default_instance_;
}  // namespace NFMsg
static void InitDefaultsscc_info_AckEndBattle_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckEndBattle_default_instance_;
    new (ptr) ::NFMsg::AckEndBattle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckEndBattle::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AckEndBattle_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AckEndBattle_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_ItemStruct_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_AckPlayerEntryList_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerEntryList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerEntryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerEntryList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckPlayerEntryList_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckPlayerEntryList_NFMsgShare_2eproto}, {
      &scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_AckPlayerLeaveList_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerLeaveList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerLeaveList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerLeaveList::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckPlayerLeaveList_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckPlayerLeaveList_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_AckSceneBuildings_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSceneBuildings_default_instance_;
    new (ptr) ::NFMsg::AckSceneBuildings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSceneBuildings::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckSceneBuildings_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckSceneBuildings_NFMsgShare_2eproto}, {
      &scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_AckSearchClan_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchClan_default_instance_;
    new (ptr) ::NFMsg::AckSearchClan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckSearchClan_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckSearchClan_NFMsgShare_2eproto}, {
      &scc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchClan_SearchClanObject_default_instance_;
    new (ptr) ::NFMsg::AckSearchClan_SearchClanObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchClan_SearchClanObject::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_AckSearchOppnent_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchOppnent_default_instance_;
    new (ptr) ::NFMsg::AckSearchOppnent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchOppnent::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AckSearchOppnent_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AckSearchOppnent_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_PVPPlayerInfo_NFMsgShare_2eproto.base,
      &scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_AckSwitchServer_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSwitchServer_default_instance_;
    new (ptr) ::NFMsg::AckSwitchServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSwitchServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckSwitchServer_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckSwitchServer_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_CurrencyStruct_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_CurrencyStruct_default_instance_;
    new (ptr) ::NFMsg::CurrencyStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::CurrencyStruct::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyStruct_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurrencyStruct_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_EffectData_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_EffectData_default_instance_;
    new (ptr) ::NFMsg::EffectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::EffectData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EffectData_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EffectData_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ItemStruct_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ItemStruct_default_instance_;
    new (ptr) ::NFMsg::ItemStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ItemStruct::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ItemStruct_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ItemStruct_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_PVPPlayerInfo_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PVPPlayerInfo_default_instance_;
    new (ptr) ::NFMsg::PVPPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PVPPlayerInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PVPPlayerInfo_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PVPPlayerInfo_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_PlayerEntryInfo_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PlayerEntryInfo_default_instance_;
    new (ptr) ::NFMsg::PlayerEntryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PlayerEntryInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerEntryInfo_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerEntryInfo_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAcceptTask_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAcceptTask_default_instance_;
    new (ptr) ::NFMsg::ReqAcceptTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAcceptTask::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAcceptTask_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAcceptTask_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckCancelSearch_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckCancelSearch_default_instance_;
    new (ptr) ::NFMsg::ReqAckCancelSearch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckCancelSearch::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckCancelSearch_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckCancelSearch_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckCreateClan_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckCreateClan_default_instance_;
    new (ptr) ::NFMsg::ReqAckCreateClan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckCreateClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckCreateClan_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckCreateClan_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckEnterGameSuccess_default_instance_;
    new (ptr) ::NFMsg::ReqAckEnterGameSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckEnterGameSuccess::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckHomeScene_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckHomeScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckHomeScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckHomeScene::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckHomeScene_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAckHomeScene_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckJoinClan_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckJoinClan_default_instance_;
    new (ptr) ::NFMsg::ReqAckJoinClan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckJoinClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckJoinClan_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckJoinClan_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckLeaveClan_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckLeaveClan_default_instance_;
    new (ptr) ::NFMsg::ReqAckLeaveClan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckLeaveClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckLeaveClan_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckLeaveClan_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckOprClanMember_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckOprClanMember_default_instance_;
    new (ptr) ::NFMsg::ReqAckOprClanMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckOprClanMember::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckOprClanMember_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckOprClanMember_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckPlayerChat_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerChat_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerChat::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckPlayerChat_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckPlayerChat_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckPlayerMove_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerMove_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerMove();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerMove::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAckPlayerMove_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqAckPlayerMove_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerPosSync_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerPosSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerPosSync::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckReliveHero_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckReliveHero_default_instance_;
    new (ptr) ::NFMsg::ReqAckReliveHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckReliveHero::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckReliveHero_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckReliveHero_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckSwapScene_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSwapScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckSwapScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSwapScene::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckSwapScene_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAckSwapScene_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckSynData_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSynData_default_instance_;
    new (ptr) ::NFMsg::ReqAckSynData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSynData::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckSynData_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckSynData_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckUseItem_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUseItem_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseItem::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ReqAckUseItem_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ReqAckUseItem_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_EffectData_NFMsgShare_2eproto.base,
      &scc_info_ItemStruct_NFMsgShare_2eproto.base,
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckUseSkill_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUseSkill_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseSkill::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAckUseSkill_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqAckUseSkill_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_EffectData_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqAddSceneBuilding_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAddSceneBuilding_default_instance_;
    new (ptr) ::NFMsg::ReqAddSceneBuilding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAddSceneBuilding::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqAddSceneBuilding_NFMsgShare_2eproto}, {
      &scc_info_Vector3_NFMsgBase_2eproto.base,
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqBuyItemFromShop_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqBuyItemFromShop_default_instance_;
    new (ptr) ::NFMsg::ReqBuyItemFromShop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqBuyItemFromShop::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqBuyItemFromShop_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqBuyItemFromShop_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqCompeleteTask_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqCompeleteTask_default_instance_;
    new (ptr) ::NFMsg::ReqCompeleteTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqCompeleteTask::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqCompeleteTask_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqCompeleteTask_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqEndBattle_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEndBattle_default_instance_;
    new (ptr) ::NFMsg::ReqEndBattle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEndBattle::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqEndBattle_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqEndBattle_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqEnterClanEctype_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEnterClanEctype_default_instance_;
    new (ptr) ::NFMsg::ReqEnterClanEctype();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterClanEctype::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqEnterClanEctype_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqEnterClanEctype_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqEnterGameServer_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEnterGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqEnterGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterGameServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqEnterGameServer_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqEnterGameServer_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqHeartBeat_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqHeartBeat_default_instance_;
    new (ptr) ::NFMsg::ReqHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHeartBeat::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqHeartBeat_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqHeartBeat_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqLeaveGameServer_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqLeaveGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqLeaveGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqLeaveGameServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqLeaveGameServer_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqLeaveGameServer_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqPickDropItem_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqPickDropItem_default_instance_;
    new (ptr) ::NFMsg::ReqPickDropItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqPickDropItem::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqPickDropItem_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqPickDropItem_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqSceneBuildings_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSceneBuildings_default_instance_;
    new (ptr) ::NFMsg::ReqSceneBuildings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSceneBuildings::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSceneBuildings_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqSceneBuildings_NFMsgShare_2eproto}, {
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqSearchClan_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSearchClan_default_instance_;
    new (ptr) ::NFMsg::ReqSearchClan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSearchClan::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqSearchClan_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqSearchClan_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqSearchOppnent_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSearchOppnent_default_instance_;
    new (ptr) ::NFMsg::ReqSearchOppnent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSearchOppnent::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSearchOppnent_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqSearchOppnent_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqSendMail_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSendMail_default_instance_;
    new (ptr) ::NFMsg::ReqSendMail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSendMail::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReqSendMail_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReqSendMail_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_ItemStruct_NFMsgShare_2eproto.base,
      &scc_info_CurrencyStruct_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqSetFightHero_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSetFightHero_default_instance_;
    new (ptr) ::NFMsg::ReqSetFightHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSetFightHero::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSetFightHero_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqSetFightHero_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqStoreSceneBuildings_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqStoreSceneBuildings_default_instance_;
    new (ptr) ::NFMsg::ReqStoreSceneBuildings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqStoreSceneBuildings::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqStoreSceneBuildings_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqStoreSceneBuildings_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqSwitchFightHero_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSwitchFightHero_default_instance_;
    new (ptr) ::NFMsg::ReqSwitchFightHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSwitchFightHero::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSwitchFightHero_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqSwitchFightHero_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqSwitchServer_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSwitchServer_default_instance_;
    new (ptr) ::NFMsg::ReqSwitchServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSwitchServer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqSwitchServer_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqSwitchServer_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NFMsgShare_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_NFMsgShare_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFMsgShare_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFMsgShare_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, account_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, game_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqHeartBeat, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, object_guid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, x_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, y_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, z_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, career_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, player_state_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, config_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, class_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSynData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSynData, syser_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSynData, object_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSynData, data_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSynData, syn_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSynData, msg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, mover_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, movetype_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, speed_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, time_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, laststate_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, target_pos_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, source_pos_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, move_direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_hero_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_hero_level_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_channel_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_info_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, mover_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, time_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, interpolationtime_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, position_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, direction_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, status_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, effect_ident_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, effect_value_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, effect_rlt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, user_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, skill_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, use_index_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, effect_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseItem, user_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseItem, item_guid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseItem, effect_data_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseItem, item_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseItem, targetid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseItem, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, transfer_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, line_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, x_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, y_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, z_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckHomeScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckHomeScene, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ItemStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ItemStruct, item_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ItemStruct, item_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::CurrencyStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::CurrencyStruct, currency_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::CurrencyStruct, currency_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckReliveHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckReliveHero, diamond_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckReliveHero, hero_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqPickDropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqPickDropItem, item_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAcceptTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAcceptTask, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCompeleteTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqCompeleteTask, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, pos_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, guid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, master_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, config_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, master_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, is_home_scene_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAddSceneBuilding, is_building_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSceneBuildings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSceneBuildings, scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSceneBuildings, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSceneBuildings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSceneBuildings, buildings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, guid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, home_scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqStoreSceneBuildings, buildings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_desc_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_player_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCreateClan, clan_player_bp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchClan, clan_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_icon_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_member_count_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_member_max_count_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_honor_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan_SearchClanObject, clan_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchClan, clan_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, clan_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, clan_player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, clan_player_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckJoinClan, clan_player_bp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckLeaveClan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckLeaveClan, clan_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckLeaveClan, clan_player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, clan_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, member_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckOprClanMember, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterClanEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterClanEctype, clan_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSetFightHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSetFightHero, heroid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSetFightHero, set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchFightHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchFightHero, heroid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqBuyItemFromShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqBuyItemFromShop, itemid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqBuyItemFromShop, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, battle_mode_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, level_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, battle_point_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, head_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, gold_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, diamond_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_cnf1_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_cnf2_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_cnf3_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_star1_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_star2_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_star3_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_id1_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_id2_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PVPPlayerInfo, hero_id3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, self_scene_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, diamond_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, battle_point_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, battle_mode_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchOppnent, scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchOppnent, team_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchOppnent, gamble_diamond_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchOppnent, team_members_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchOppnent, opponent_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSearchOppnent, buildings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCancelSearch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckCancelSearch, selfid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEndBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEndBattle, auto_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, win_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, star_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, gold_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, cup_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, diamond_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, battle_mode_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, team_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, match_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, members_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckEndBattle, item_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSendMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSendMail, reciever_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSendMail, item_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSendMail, currency_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, selfid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, self_serverid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, target_serverid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, gate_serverid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, sceneid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, client_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqSwitchServer, groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSwitchServer, selfid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSwitchServer, self_serverid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSwitchServer, target_serverid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckSwitchServer, gate_serverid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::ReqEnterGameServer)},
  { 9, -1, sizeof(::NFMsg::ReqAckEnterGameSuccess)},
  { 15, -1, sizeof(::NFMsg::ReqHeartBeat)},
  { 21, -1, sizeof(::NFMsg::ReqLeaveGameServer)},
  { 27, -1, sizeof(::NFMsg::PlayerEntryInfo)},
  { 41, -1, sizeof(::NFMsg::AckPlayerEntryList)},
  { 47, -1, sizeof(::NFMsg::AckPlayerLeaveList)},
  { 53, -1, sizeof(::NFMsg::ReqAckSynData)},
  { 63, -1, sizeof(::NFMsg::ReqAckPlayerMove)},
  { 76, -1, sizeof(::NFMsg::ReqAckPlayerChat)},
  { 89, -1, sizeof(::NFMsg::ReqAckPlayerPosSync)},
  { 101, -1, sizeof(::NFMsg::EffectData)},
  { 109, -1, sizeof(::NFMsg::ReqAckUseSkill)},
  { 118, -1, sizeof(::NFMsg::ReqAckUseItem)},
  { 129, -1, sizeof(::NFMsg::ReqAckSwapScene)},
  { 141, -1, sizeof(::NFMsg::ReqAckHomeScene)},
  { 147, -1, sizeof(::NFMsg::ItemStruct)},
  { 154, -1, sizeof(::NFMsg::CurrencyStruct)},
  { 161, -1, sizeof(::NFMsg::ReqAckReliveHero)},
  { 168, -1, sizeof(::NFMsg::ReqPickDropItem)},
  { 174, -1, sizeof(::NFMsg::ReqAcceptTask)},
  { 180, -1, sizeof(::NFMsg::ReqCompeleteTask)},
  { 186, -1, sizeof(::NFMsg::ReqAddSceneBuilding)},
  { 199, -1, sizeof(::NFMsg::ReqSceneBuildings)},
  { 206, -1, sizeof(::NFMsg::AckSceneBuildings)},
  { 212, -1, sizeof(::NFMsg::ReqStoreSceneBuildings)},
  { 220, -1, sizeof(::NFMsg::ReqAckCreateClan)},
  { 231, -1, sizeof(::NFMsg::ReqSearchClan)},
  { 237, -1, sizeof(::NFMsg::AckSearchClan_SearchClanObject)},
  { 249, -1, sizeof(::NFMsg::AckSearchClan)},
  { 255, -1, sizeof(::NFMsg::ReqAckJoinClan)},
  { 264, -1, sizeof(::NFMsg::ReqAckLeaveClan)},
  { 271, -1, sizeof(::NFMsg::ReqAckOprClanMember)},
  { 280, -1, sizeof(::NFMsg::ReqEnterClanEctype)},
  { 286, -1, sizeof(::NFMsg::ReqSetFightHero)},
  { 293, -1, sizeof(::NFMsg::ReqSwitchFightHero)},
  { 299, -1, sizeof(::NFMsg::ReqBuyItemFromShop)},
  { 306, -1, sizeof(::NFMsg::PVPPlayerInfo)},
  { 328, -1, sizeof(::NFMsg::ReqSearchOppnent)},
  { 338, -1, sizeof(::NFMsg::AckSearchOppnent)},
  { 349, -1, sizeof(::NFMsg::ReqAckCancelSearch)},
  { 355, -1, sizeof(::NFMsg::ReqEndBattle)},
  { 361, -1, sizeof(::NFMsg::AckEndBattle)},
  { 376, -1, sizeof(::NFMsg::ReqSendMail)},
  { 384, -1, sizeof(::NFMsg::ReqSwitchServer)},
  { 396, -1, sizeof(::NFMsg::AckSwitchServer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqEnterGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckEnterGameSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckSynData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckPlayerMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckPlayerChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckPlayerPosSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_EffectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckUseSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckUseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckSwapScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckHomeScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ItemStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_CurrencyStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckReliveHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqPickDropItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAcceptTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqCompeleteTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAddSceneBuilding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqSceneBuildings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckSceneBuildings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqStoreSceneBuildings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckCreateClan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqSearchClan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckSearchClan_SearchClanObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckSearchClan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckJoinClan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckLeaveClan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckOprClanMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqEnterClanEctype_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqSetFightHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqSwitchFightHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqBuyItemFromShop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PVPPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqSearchOppnent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckSearchOppnent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckCancelSearch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqEndBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckEndBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqSendMail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqSwitchServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckSwitchServer_default_instance_),
};

const char descriptor_table_protodef_NFMsgShare_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020NFMsgShare.proto\022\005NFMsg\032\016NFDefine.prot"
  "o\032\017NFMsgBase.proto\"^\n\022ReqEnterGameServer"
  "\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Ident\022\017\n\007account\030\002 "
  "\001(\014\022\017\n\007game_id\030\003 \001(\005\022\014\n\004name\030\004 \001(\014\"%\n\026Re"
  "qAckEnterGameSuccess\022\013\n\003arg\030\001 \001(\005\"\033\n\014Req"
  "HeartBeat\022\013\n\003arg\030\001 \001(\005\"!\n\022ReqLeaveGameSe"
  "rver\022\013\n\003arg\030\001 \001(\005\"\267\001\n\017PlayerEntryInfo\022!\n"
  "\013object_guid\030\001 \001(\0132\014.NFMsg.Ident\022\t\n\001x\030\002 "
  "\001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\023\n\013career_type"
  "\030\005 \001(\005\022\024\n\014player_state\030\006 \001(\005\022\021\n\tconfig_i"
  "d\030\007 \001(\014\022\020\n\010scene_id\030\010 \001(\005\022\020\n\010class_id\030\t "
  "\001(\014\"A\n\022AckPlayerEntryList\022+\n\013object_list"
  "\030\001 \003(\0132\026.NFMsg.PlayerEntryInfo\"7\n\022AckPla"
  "yerLeaveList\022!\n\013object_list\030\001 \003(\0132\014.NFMs"
  "g.Ident\"\206\002\n\rReqAckSynData\022\033\n\005syser\030\001 \001(\013"
  "2\014.NFMsg.Ident\022!\n\013object_list\030\002 \003(\0132\014.NF"
  "Msg.Ident\022\014\n\004data\030\003 \001(\014\022.\n\010syn_type\030\004 \001("
  "\0162\034.NFMsg.ReqAckSynData.SynType\022 \n\006msg_i"
  "d\030\005 \001(\0162\020.NFMsg.ESynMsgID\"U\n\007SynType\022\016\n\n"
  "EST_UNKNOW\020\000\022\r\n\tEST_GROUP\020\001\022\r\n\tEST_SCENE"
  "\020\002\022\014\n\010EST_CLAN\020\003\022\016\n\nEST_FRIEND\020\004\"\341\001\n\020Req"
  "AckPlayerMove\022\033\n\005mover\030\001 \001(\0132\014.NFMsg.Ide"
  "nt\022\020\n\010moveType\030\002 \001(\005\022\r\n\005speed\030\003 \001(\002\022\014\n\004t"
  "ime\030\004 \001(\005\022\021\n\tlastState\030\005 \001(\005\022\"\n\ntarget_p"
  "os\030\006 \003(\0132\016.NFMsg.Vector3\022\"\n\nsource_pos\030\007"
  " \003(\0132\016.NFMsg.Vector3\022&\n\016move_direction\030\010"
  " \003(\0132\016.NFMsg.Vector3\"\244\004\n\020ReqAckPlayerCha"
  "t\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ident\022\023\n\013pl"
  "ayer_name\030\002 \001(\014\022\026\n\016player_hero_id\030\003 \001(\014\022"
  "\031\n\021player_hero_level\030\004 \001(\014\022>\n\014chat_chann"
  "el\030\005 \001(\0162(.NFMsg.ReqAckPlayerChat.EGameC"
  "hatChannel\0228\n\tchat_type\030\006 \001(\0162%.NFMsg.Re"
  "qAckPlayerChat.EGameChatType\022\021\n\tchat_inf"
  "o\030\007 \001(\014\022\037\n\ttarget_id\030\010 \001(\0132\014.NFMsg.Ident"
  "\"r\n\020EGameChatChannel\022\017\n\013EGCC_GLOBAL\020\000\022\r\n"
  "\tEGCC_CLAN\020\001\022\017\n\013EGCC_FRIEND\020\002\022\017\n\013EGCC_BA"
  "TTLE\020\003\022\r\n\tEGCC_TEAM\020\004\022\r\n\tEGCC_ROOM\020\005\"\204\001\n"
  "\rEGameChatType\022\r\n\tEGCT_TEXT\020\000\022\016\n\nEGCT_VO"
  "ICE\020\001\022\016\n\nEGCT_EMOJI\020\002\022\024\n\020EGCT_DONATE_HER"
  "O\020\n\022\030\n\024EGCT_DONATE_BUILDING\020\013\022\024\n\020EGCT_DO"
  "NATE_ITEM\020\014\"\277\001\n\023ReqAckPlayerPosSync\022\033\n\005m"
  "over\030\001 \001(\0132\014.NFMsg.Ident\022\014\n\004time\030\002 \001(\005\022\031"
  "\n\021InterpolationTime\030\003 \001(\002\022 \n\010position\030\004 "
  "\001(\0132\016.NFMsg.Vector3\022!\n\tdirection\030\005 \001(\0132\016"
  ".NFMsg.Vector3\022\016\n\006status\030\006 \001(\005\022\r\n\005frame\030"
  "\007 \001(\005\"\323\001\n\nEffectData\022\"\n\014effect_ident\030\001 \001"
  "(\0132\014.NFMsg.Ident\022\024\n\014effect_value\030\002 \001(\005\0221"
  "\n\neffect_rlt\030\003 \001(\0162\035.NFMsg.EffectData.ER"
  "esultType\"X\n\013EResultType\022\014\n\010EET_FAIL\020\000\022\017"
  "\n\013EET_SUCCESS\020\001\022\016\n\nEET_REFUSE\020\002\022\014\n\010EET_M"
  "ISS\020\003\022\014\n\010EET_CRIT\020\004\"y\n\016ReqAckUseSkill\022\032\n"
  "\004user\030\001 \001(\0132\014.NFMsg.Ident\022\020\n\010skill_id\030\002 "
  "\001(\014\022\021\n\tuse_index\030\003 \001(\005\022&\n\013effect_data\030\004 "
  "\003(\0132\021.NFMsg.EffectData\"\327\001\n\rReqAckUseItem"
  "\022\032\n\004user\030\001 \001(\0132\014.NFMsg.Ident\022\037\n\titem_gui"
  "d\030\002 \001(\0132\014.NFMsg.Ident\022&\n\013effect_data\030\003 \003"
  "(\0132\021.NFMsg.EffectData\022\037\n\004item\030\004 \001(\0132\021.NF"
  "Msg.ItemStruct\022\036\n\010targetid\030\005 \001(\0132\014.NFMsg"
  ".Ident\022 \n\010position\030\006 \001(\0132\016.NFMsg.Vector3"
  "\"\363\001\n\017ReqAckSwapScene\022;\n\rtransfer_type\030\001 "
  "\001(\0162$.NFMsg.ReqAckSwapScene.EGameSwapTyp"
  "e\022\020\n\010scene_id\030\002 \001(\005\022\017\n\007line_id\030\003 \001(\005\022\t\n\001"
  "x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001(\002\022\014\n\004data\030\007 "
  "\001(\014\"Q\n\rEGameSwapType\022\017\n\013EGST_NARMAL\020\000\022\016\n"
  "\nEGST_CLONE\020\001\022\016\n\nEGST_ARENA\020\002\022\017\n\013EGST_MI"
  "RROR\020\003\"\037\n\017ReqAckHomeScene\022\014\n\004data\030\001 \001(\014\""
  "1\n\nItemStruct\022\017\n\007item_id\030\001 \001(\014\022\022\n\nitem_c"
  "ount\030\002 \001(\005\"\?\n\016CurrencyStruct\022\025\n\rcurrency"
  "_type\030\001 \001(\005\022\026\n\016currency_count\030\002 \001(\005\"B\n\020R"
  "eqAckReliveHero\022\017\n\007diamond\030\001 \001(\005\022\035\n\007hero"
  "_id\030\002 \001(\0132\014.NFMsg.Ident\"2\n\017ReqPickDropIt"
  "em\022\037\n\titem_guid\030\002 \001(\0132\014.NFMsg.Ident\" \n\rR"
  "eqAcceptTask\022\017\n\007task_id\030\001 \001(\014\"#\n\020ReqComp"
  "eleteTask\022\017\n\007task_id\030\001 \001(\014\"\322\001\n\023ReqAddSce"
  "neBuilding\022\033\n\003pos\030\001 \001(\0132\016.NFMsg.Vector3\022"
  "\032\n\004guid\030\002 \001(\0132\014.NFMsg.Ident\022\034\n\006master\030\003 "
  "\001(\0132\014.NFMsg.Ident\022\021\n\tconfig_id\030\004 \001(\014\022\020\n\010"
  "scene_id\030\005 \001(\005\022\023\n\013master_name\030\006 \001(\014\022\025\n\ri"
  "s_home_scene\030\007 \001(\005\022\023\n\013is_building\030\010 \001(\005\""
  "B\n\021ReqSceneBuildings\022\020\n\010scene_id\030\001 \001(\005\022\033"
  "\n\003pos\030\002 \001(\0132\016.NFMsg.Vector3\"B\n\021AckSceneB"
  "uildings\022-\n\tbuildings\030\001 \003(\0132\032.NFMsg.ReqA"
  "ddSceneBuilding\"z\n\026ReqStoreSceneBuilding"
  "s\022\032\n\004guid\030\001 \001(\0132\014.NFMsg.Ident\022\025\n\rhome_sc"
  "ene_id\030\002 \001(\005\022-\n\tbuildings\030\003 \003(\0132\032.NFMsg."
  "ReqAddSceneBuilding\"\257\001\n\020ReqAckCreateClan"
  "\022\035\n\007clan_id\030\001 \001(\0132\014.NFMsg.Ident\022\021\n\tclan_"
  "name\030\002 \001(\014\022\021\n\tclan_desc\030\003 \001(\014\022$\n\016clan_pl"
  "ayer_id\030\004 \001(\0132\014.NFMsg.Ident\022\030\n\020clan_play"
  "er_name\030\005 \001(\014\022\026\n\016clan_player_bp\030\006 \001(\005\"\"\n"
  "\rReqSearchClan\022\021\n\tclan_name\030\001 \001(\014\"\204\002\n\rAc"
  "kSearchClan\0228\n\tclan_list\030\001 \003(\0132%.NFMsg.A"
  "ckSearchClan.SearchClanObject\032\270\001\n\020Search"
  "ClanObject\022\035\n\007clan_ID\030\001 \001(\0132\014.NFMsg.Iden"
  "t\022\021\n\tclan_name\030\002 \001(\014\022\021\n\tclan_icon\030\003 \001(\014\022"
  "\031\n\021clan_member_count\030\004 \001(\005\022\035\n\025clan_membe"
  "r_max_count\030\005 \001(\005\022\022\n\nclan_honor\030\006 \001(\005\022\021\n"
  "\tclan_rank\030\007 \001(\005\"\207\001\n\016ReqAckJoinClan\022\035\n\007c"
  "lan_id\030\001 \001(\0132\014.NFMsg.Ident\022$\n\016clan_playe"
  "r_id\030\004 \001(\0132\014.NFMsg.Ident\022\030\n\020clan_player_"
  "name\030\005 \001(\014\022\026\n\016clan_player_bp\030\006 \001(\005\"V\n\017Re"
  "qAckLeaveClan\022\035\n\007clan_id\030\001 \001(\0132\014.NFMsg.I"
  "dent\022$\n\016clan_player_id\030\002 \001(\0132\014.NFMsg.Ide"
  "nt\"\366\001\n\023ReqAckOprClanMember\022\035\n\007clan_id\030\001 "
  "\001(\0132\014.NFMsg.Ident\022\037\n\tplayer_id\030\002 \001(\0132\014.N"
  "FMsg.Ident\022\037\n\tmember_id\030\003 \001(\0132\014.NFMsg.Id"
  "ent\022<\n\004type\030\004 \001(\0162..NFMsg.ReqAckOprClanM"
  "ember.EGClanMemberOprType\"@\n\023EGClanMembe"
  "rOprType\022\r\n\tEGAT_DOWN\020\000\022\013\n\007EGAT_UP\020\001\022\r\n\t"
  "EGAT_KICK\020\002\"3\n\022ReqEnterClanEctype\022\035\n\007cla"
  "n_id\030\001 \001(\0132\014.NFMsg.Ident\"<\n\017ReqSetFightH"
  "ero\022\034\n\006Heroid\030\001 \001(\0132\014.NFMsg.Ident\022\013\n\003Set"
  "\030\002 \001(\005\"2\n\022ReqSwitchFightHero\022\034\n\006Heroid\030\001"
  " \001(\0132\014.NFMsg.Ident\"3\n\022ReqBuyItemFromShop"
  "\022\016\n\006itemID\030\001 \001(\014\022\r\n\005count\030\002 \001(\005\"\207\003\n\rPVPP"
  "layerInfo\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Ident\022\'\n\013b"
  "attle_mode\030\002 \001(\0162\022.NFMsg.EBattleType\022\r\n\005"
  "level\030\004 \001(\005\022\024\n\014battle_point\030\005 \001(\005\022\014\n\004nam"
  "e\030\006 \001(\014\022\014\n\004head\030\007 \001(\014\022\014\n\004gold\030\010 \001(\005\022\017\n\007d"
  "iamond\030\t \001(\005\022\021\n\thero_cnf1\030\024 \001(\014\022\021\n\thero_"
  "cnf2\030\025 \001(\014\022\021\n\thero_cnf3\030\026 \001(\014\022\022\n\nhero_st"
  "ar1\030\031 \001(\005\022\022\n\nhero_star2\030\032 \001(\005\022\022\n\nhero_st"
  "ar3\030\033 \001(\005\022\036\n\010hero_id1\030\034 \001(\0132\014.NFMsg.Iden"
  "t\022\036\n\010hero_id2\030\035 \001(\0132\014.NFMsg.Ident\022\036\n\010her"
  "o_id3\030\036 \001(\0132\014.NFMsg.Ident\"\225\001\n\020ReqSearchO"
  "ppnent\022\022\n\nself_scene\030\001 \001(\005\022\017\n\007diamond\030\002 "
  "\001(\005\022\024\n\014battle_point\030\003 \001(\005\022\'\n\013battle_mode"
  "\030\004 \001(\0162\022.NFMsg.EBattleType\022\035\n\007friends\030\n "
  "\003(\0132\014.NFMsg.Ident\"\326\001\n\020AckSearchOppnent\022\020"
  "\n\010scene_id\030\001 \001(\005\022\035\n\007team_id\030\002 \001(\0132\014.NFMs"
  "g.Ident\022\026\n\016gamble_diamond\030\003 \001(\005\022\"\n\014team_"
  "members\030\005 \003(\0132\014.NFMsg.Ident\022&\n\010opponent\030"
  "\016 \001(\0132\024.NFMsg.PVPPlayerInfo\022-\n\tbuildings"
  "\030\024 \003(\0132\032.NFMsg.ReqAddSceneBuilding\"2\n\022Re"
  "qAckCancelSearch\022\034\n\006selfid\030\001 \001(\0132\014.NFMsg"
  ".Ident\" \n\014ReqEndBattle\022\020\n\010auto_end\030\001 \001(\005"
  "\"\202\002\n\014AckEndBattle\022\013\n\003win\030\001 \001(\005\022\014\n\004star\030\002"
  " \001(\005\022\014\n\004gold\030\003 \001(\005\022\013\n\003cup\030\004 \001(\005\022\017\n\007diamo"
  "nd\030\005 \001(\005\022\'\n\013battle_mode\030\006 \001(\0162\022.NFMsg.EB"
  "attleType\022\035\n\007team_id\030\007 \001(\0132\014.NFMsg.Ident"
  "\022\036\n\010match_id\030\010 \001(\0132\014.NFMsg.Ident\022\035\n\007memb"
  "ers\030\t \003(\0132\014.NFMsg.Ident\022$\n\titem_list\030\n \003"
  "(\0132\021.NFMsg.ItemStruct\"\201\001\n\013ReqSendMail\022\036\n"
  "\010reciever\030\001 \001(\0132\014.NFMsg.Ident\022$\n\titem_li"
  "st\030\002 \003(\0132\021.NFMsg.ItemStruct\022,\n\rcurrency_"
  "list\030\003 \003(\0132\025.NFMsg.CurrencyStruct\"\271\001\n\017Re"
  "qSwitchServer\022\034\n\006selfid\030\001 \001(\0132\014.NFMsg.Id"
  "ent\022\025\n\rself_serverid\030\002 \001(\003\022\027\n\017target_ser"
  "verid\030\003 \001(\003\022\025\n\rgate_serverid\030\004 \001(\003\022\017\n\007Sc"
  "eneID\030\005 \001(\003\022\037\n\tclient_id\030\006 \001(\0132\014.NFMsg.I"
  "dent\022\017\n\007groupID\030\007 \001(\003\"v\n\017AckSwitchServer"
  "\022\034\n\006selfid\030\001 \001(\0132\014.NFMsg.Ident\022\025\n\rself_s"
  "erverid\030\002 \001(\003\022\027\n\017target_serverid\030\003 \001(\003\022\025"
  "\n\rgate_serverid\030\004 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFMsgShare_2eproto_deps[2] = {
  &::descriptor_table_NFDefine_2eproto,
  &::descriptor_table_NFMsgBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFMsgShare_2eproto_sccs[46] = {
  &scc_info_AckEndBattle_NFMsgShare_2eproto.base,
  &scc_info_AckPlayerEntryList_NFMsgShare_2eproto.base,
  &scc_info_AckPlayerLeaveList_NFMsgShare_2eproto.base,
  &scc_info_AckSceneBuildings_NFMsgShare_2eproto.base,
  &scc_info_AckSearchClan_NFMsgShare_2eproto.base,
  &scc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto.base,
  &scc_info_AckSearchOppnent_NFMsgShare_2eproto.base,
  &scc_info_AckSwitchServer_NFMsgShare_2eproto.base,
  &scc_info_CurrencyStruct_NFMsgShare_2eproto.base,
  &scc_info_EffectData_NFMsgShare_2eproto.base,
  &scc_info_ItemStruct_NFMsgShare_2eproto.base,
  &scc_info_PVPPlayerInfo_NFMsgShare_2eproto.base,
  &scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base,
  &scc_info_ReqAcceptTask_NFMsgShare_2eproto.base,
  &scc_info_ReqAckCancelSearch_NFMsgShare_2eproto.base,
  &scc_info_ReqAckCreateClan_NFMsgShare_2eproto.base,
  &scc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto.base,
  &scc_info_ReqAckHomeScene_NFMsgShare_2eproto.base,
  &scc_info_ReqAckJoinClan_NFMsgShare_2eproto.base,
  &scc_info_ReqAckLeaveClan_NFMsgShare_2eproto.base,
  &scc_info_ReqAckOprClanMember_NFMsgShare_2eproto.base,
  &scc_info_ReqAckPlayerChat_NFMsgShare_2eproto.base,
  &scc_info_ReqAckPlayerMove_NFMsgShare_2eproto.base,
  &scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto.base,
  &scc_info_ReqAckReliveHero_NFMsgShare_2eproto.base,
  &scc_info_ReqAckSwapScene_NFMsgShare_2eproto.base,
  &scc_info_ReqAckSynData_NFMsgShare_2eproto.base,
  &scc_info_ReqAckUseItem_NFMsgShare_2eproto.base,
  &scc_info_ReqAckUseSkill_NFMsgShare_2eproto.base,
  &scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto.base,
  &scc_info_ReqBuyItemFromShop_NFMsgShare_2eproto.base,
  &scc_info_ReqCompeleteTask_NFMsgShare_2eproto.base,
  &scc_info_ReqEndBattle_NFMsgShare_2eproto.base,
  &scc_info_ReqEnterClanEctype_NFMsgShare_2eproto.base,
  &scc_info_ReqEnterGameServer_NFMsgShare_2eproto.base,
  &scc_info_ReqHeartBeat_NFMsgShare_2eproto.base,
  &scc_info_ReqLeaveGameServer_NFMsgShare_2eproto.base,
  &scc_info_ReqPickDropItem_NFMsgShare_2eproto.base,
  &scc_info_ReqSceneBuildings_NFMsgShare_2eproto.base,
  &scc_info_ReqSearchClan_NFMsgShare_2eproto.base,
  &scc_info_ReqSearchOppnent_NFMsgShare_2eproto.base,
  &scc_info_ReqSendMail_NFMsgShare_2eproto.base,
  &scc_info_ReqSetFightHero_NFMsgShare_2eproto.base,
  &scc_info_ReqStoreSceneBuildings_NFMsgShare_2eproto.base,
  &scc_info_ReqSwitchFightHero_NFMsgShare_2eproto.base,
  &scc_info_ReqSwitchServer_NFMsgShare_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFMsgShare_2eproto_once;
static bool descriptor_table_NFMsgShare_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgShare_2eproto = {
  &descriptor_table_NFMsgShare_2eproto_initialized, descriptor_table_protodef_NFMsgShare_2eproto, "NFMsgShare.proto", 6149,
  &descriptor_table_NFMsgShare_2eproto_once, descriptor_table_NFMsgShare_2eproto_sccs, descriptor_table_NFMsgShare_2eproto_deps, 46, 2,
  schemas, file_default_instances, TableStruct_NFMsgShare_2eproto::offsets,
  file_level_metadata_NFMsgShare_2eproto, 46, file_level_enum_descriptors_NFMsgShare_2eproto, file_level_service_descriptors_NFMsgShare_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFMsgShare_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFMsgShare_2eproto), true);
namespace NFMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckSynData_SynType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[0];
}
bool ReqAckSynData_SynType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckSynData_SynType ReqAckSynData::EST_UNKNOW;
constexpr ReqAckSynData_SynType ReqAckSynData::EST_GROUP;
constexpr ReqAckSynData_SynType ReqAckSynData::EST_SCENE;
constexpr ReqAckSynData_SynType ReqAckSynData::EST_CLAN;
constexpr ReqAckSynData_SynType ReqAckSynData::EST_FRIEND;
constexpr ReqAckSynData_SynType ReqAckSynData::SynType_MIN;
constexpr ReqAckSynData_SynType ReqAckSynData::SynType_MAX;
constexpr int ReqAckSynData::SynType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[1];
}
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_CLAN;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_FRIEND;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_BATTLE;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_TEAM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_ROOM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MIN;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MAX;
constexpr int ReqAckPlayerChat::EGameChatChannel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[2];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_VOICE;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_EMOJI;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_DONATE_HERO;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_DONATE_BUILDING;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_DONATE_ITEM;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
constexpr int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectData_EResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[3];
}
bool EffectData_EResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EffectData_EResultType EffectData::EET_FAIL;
constexpr EffectData_EResultType EffectData::EET_SUCCESS;
constexpr EffectData_EResultType EffectData::EET_REFUSE;
constexpr EffectData_EResultType EffectData::EET_MISS;
constexpr EffectData_EResultType EffectData::EET_CRIT;
constexpr EffectData_EResultType EffectData::EResultType_MIN;
constexpr EffectData_EResultType EffectData::EResultType_MAX;
constexpr int EffectData::EResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[4];
}
bool ReqAckSwapScene_EGameSwapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_NARMAL;
constexpr ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_CLONE;
constexpr ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_ARENA;
constexpr ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_MIRROR;
constexpr ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MIN;
constexpr ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MAX;
constexpr int ReqAckSwapScene::EGameSwapType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckOprClanMember_EGClanMemberOprType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[5];
}
bool ReqAckOprClanMember_EGClanMemberOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGAT_DOWN;
constexpr ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGAT_UP;
constexpr ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGAT_KICK;
constexpr ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGClanMemberOprType_MIN;
constexpr ReqAckOprClanMember_EGClanMemberOprType ReqAckOprClanMember::EGClanMemberOprType_MAX;
constexpr int ReqAckOprClanMember::EGClanMemberOprType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ReqEnterGameServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterGameServer_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqEnterGameServer::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqEnterGameServer* msg);
};

const ::NFMsg::Ident&
ReqEnterGameServer::_Internal::id(const ReqEnterGameServer* msg) {
  return *msg->id_;
}
void ReqEnterGameServer::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqEnterGameServer::ReqEnterGameServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterGameServer)
}
ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqEnterGameServer_NFMsgShare_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(game_id_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqEnterGameServer_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  game_id_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqEnterGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEnterGameServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_id(), target);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterGameServer)
  return target;
}

size_t ReqEnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEnterGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void ReqEnterGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  return true;
}

void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEnterGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckEnterGameSuccess::InitAsDefaultInstance() {
}
class ReqAckEnterGameSuccess::_Internal {
 public:
};

ReqAckEnterGameSuccess::ReqAckEnterGameSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckEnterGameSuccess)
}
ReqAckEnterGameSuccess::ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckEnterGameSuccess)
}

void ReqAckEnterGameSuccess::SharedCtor() {
  arg_ = 0;
}

ReqAckEnterGameSuccess::~ReqAckEnterGameSuccess() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckEnterGameSuccess)
  SharedDtor();
}

void ReqAckEnterGameSuccess::SharedDtor() {
}

void ReqAckEnterGameSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckEnterGameSuccess& ReqAckEnterGameSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckEnterGameSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckEnterGameSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckEnterGameSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckEnterGameSuccess::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckEnterGameSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckEnterGameSuccess)
  return target;
}

size_t ReqAckEnterGameSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckEnterGameSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckEnterGameSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckEnterGameSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckEnterGameSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckEnterGameSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckEnterGameSuccess)
    MergeFrom(*source);
  }
}

void ReqAckEnterGameSuccess::MergeFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    _internal_set_arg(from._internal_arg());
  }
}

void ReqAckEnterGameSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEnterGameSuccess::CopyFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEnterGameSuccess::IsInitialized() const {
  return true;
}

void ReqAckEnterGameSuccess::InternalSwap(ReqAckEnterGameSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckEnterGameSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqHeartBeat::InitAsDefaultInstance() {
}
class ReqHeartBeat::_Internal {
 public:
};

ReqHeartBeat::ReqHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHeartBeat)
}
ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHeartBeat)
}

void ReqHeartBeat::SharedCtor() {
  arg_ = 0;
}

ReqHeartBeat::~ReqHeartBeat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHeartBeat)
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
}

void ReqHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqHeartBeat& ReqHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqHeartBeat_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqHeartBeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHeartBeat)
  return target;
}

size_t ReqHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHeartBeat)
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    _internal_set_arg(from._internal_arg());
  }
}

void ReqHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {
  return true;
}

void ReqHeartBeat::InternalSwap(ReqHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqLeaveGameServer::InitAsDefaultInstance() {
}
class ReqLeaveGameServer::_Internal {
 public:
};

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
  arg_ = 0;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqLeaveGameServer_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqLeaveGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveGameServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqLeaveGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    _internal_set_arg(from._internal_arg());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerEntryInfo::InitAsDefaultInstance() {
  ::NFMsg::_PlayerEntryInfo_default_instance_._instance.get_mutable()->object_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class PlayerEntryInfo::_Internal {
 public:
  static const ::NFMsg::Ident& object_guid(const PlayerEntryInfo* msg);
};

const ::NFMsg::Ident&
PlayerEntryInfo::_Internal::object_guid(const PlayerEntryInfo* msg) {
  return *msg->object_guid_;
}
void PlayerEntryInfo::clear_object_guid() {
  if (GetArenaNoVirtual() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
}
PlayerEntryInfo::PlayerEntryInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_id().empty()) {
    class_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from._internal_has_object_guid()) {
    object_guid_ = new ::NFMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PlayerEntryInfo)
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

const char* PlayerEntryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident object_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 career_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          career_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          player_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_config_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes class_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_class_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerEntryInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::object_guid(this), target, stream);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_career_type(), target);
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_player_state(), target);
  }

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_config_id(), target);
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_scene_id(), target);
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_class_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PlayerEntryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_class_id());
  }

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_guid_);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_career_type());
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_state());
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerEntryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PlayerEntryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  if (from.class_id().size() > 0) {

    class_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    _internal_mutable_object_guid()->::NFMsg::Ident::MergeFrom(from._internal_object_guid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from.career_type() != 0) {
    _internal_set_career_type(from._internal_career_type());
  }
  if (from.player_state() != 0) {
    _internal_set_player_state(from._internal_player_state());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  return true;
}

void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_id_.Swap(&other->config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class_id_.Swap(&other->class_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(object_guid_, other->object_guid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(career_type_, other->career_type_);
  swap(player_state_, other->player_state_);
  swap(scene_id_, other->scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerEntryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckPlayerEntryList::InitAsDefaultInstance() {
}
class AckPlayerEntryList::_Internal {
 public:
};

AckPlayerEntryList::AckPlayerEntryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckPlayerEntryList_NFMsgShare_2eproto.base);
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerEntryList)
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckPlayerEntryList_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

const char* AckPlayerEntryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.PlayerEntryInfo object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerEntryList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerEntryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerEntryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerEntryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  return true;
}

void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerEntryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckPlayerLeaveList::InitAsDefaultInstance() {
}
class AckPlayerLeaveList::_Internal {
 public:
};

void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
AckPlayerLeaveList::AckPlayerLeaveList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckPlayerLeaveList_NFMsgShare_2eproto.base);
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerLeaveList)
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckPlayerLeaveList_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

const char* AckPlayerLeaveList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.Ident object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerLeaveList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerLeaveList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerLeaveList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  return true;
}

void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerLeaveList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckSynData::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckSynData_default_instance_._instance.get_mutable()->syser_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckSynData::_Internal {
 public:
  static const ::NFMsg::Ident& syser(const ReqAckSynData* msg);
};

const ::NFMsg::Ident&
ReqAckSynData::_Internal::syser(const ReqAckSynData* msg) {
  return *msg->syser_;
}
void ReqAckSynData::clear_syser() {
  if (GetArenaNoVirtual() == nullptr && syser_ != nullptr) {
    delete syser_;
  }
  syser_ = nullptr;
}
void ReqAckSynData::clear_object_list() {
  object_list_.Clear();
}
ReqAckSynData::ReqAckSynData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSynData)
}
ReqAckSynData::ReqAckSynData(const ReqAckSynData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_syser()) {
    syser_ = new ::NFMsg::Ident(*from.syser_);
  } else {
    syser_ = nullptr;
  }
  ::memcpy(&syn_type_, &from.syn_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&syn_type_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSynData)
}

void ReqAckSynData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckSynData_NFMsgShare_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&syser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&syser_)) + sizeof(msg_id_));
}

ReqAckSynData::~ReqAckSynData() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSynData)
  SharedDtor();
}

void ReqAckSynData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syser_;
}

void ReqAckSynData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckSynData& ReqAckSynData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckSynData_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckSynData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSynData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && syser_ != nullptr) {
    delete syser_;
  }
  syser_ = nullptr;
  ::memset(&syn_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&syn_type_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

const char* ReqAckSynData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident syser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_syser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Ident object_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ReqAckSynData.SynType syn_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_syn_type(static_cast<::NFMsg::ReqAckSynData_SynType>(val));
        } else goto handle_unusual;
        continue;
      // .NFMsg.ESynMsgID msg_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_msg_id(static_cast<::NFMsg::ESynMsgID>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckSynData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSynData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident syser = 1;
  if (this->has_syser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::syser(this), target, stream);
  }

  // repeated .NFMsg.Ident object_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_object_list(i), target, stream);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_syn_type(), target);
  }

  // .NFMsg.ESynMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSynData)
  return target;
}

size_t ReqAckSynData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSynData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 2;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .NFMsg.Ident syser = 1;
  if (this->has_syser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *syser_);
  }

  // .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (this->syn_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_syn_type());
  }

  // .NFMsg.ESynMsgID msg_id = 5;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSynData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSynData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckSynData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSynData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSynData)
    MergeFrom(*source);
  }
}

void ReqAckSynData::MergeFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_syser()) {
    _internal_mutable_syser()->::NFMsg::Ident::MergeFrom(from._internal_syser());
  }
  if (from.syn_type() != 0) {
    _internal_set_syn_type(from._internal_syn_type());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
}

void ReqAckSynData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSynData::CopyFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSynData::IsInitialized() const {
  return true;
}

void ReqAckSynData::InternalSwap(ReqAckSynData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syser_, other->syser_);
  swap(syn_type_, other->syn_type_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckSynData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckPlayerMove::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerMove_default_instance_._instance.get_mutable()->mover_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckPlayerMove::_Internal {
 public:
  static const ::NFMsg::Ident& mover(const ReqAckPlayerMove* msg);
};

const ::NFMsg::Ident&
ReqAckPlayerMove::_Internal::mover(const ReqAckPlayerMove* msg) {
  return *msg->mover_;
}
void ReqAckPlayerMove::clear_mover() {
  if (GetArenaNoVirtual() == nullptr && mover_ != nullptr) {
    delete mover_;
  }
  mover_ = nullptr;
}
void ReqAckPlayerMove::clear_target_pos() {
  target_pos_.Clear();
}
void ReqAckPlayerMove::clear_source_pos() {
  source_pos_.Clear();
}
void ReqAckPlayerMove::clear_move_direction() {
  move_direction_.Clear();
}
ReqAckPlayerMove::ReqAckPlayerMove()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerMove)
}
ReqAckPlayerMove::ReqAckPlayerMove(const ReqAckPlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      target_pos_(from.target_pos_),
      source_pos_(from.source_pos_),
      move_direction_(from.move_direction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mover()) {
    mover_ = new ::NFMsg::Ident(*from.mover_);
  } else {
    mover_ = nullptr;
  }
  ::memcpy(&movetype_, &from.movetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&laststate_) -
    reinterpret_cast<char*>(&movetype_)) + sizeof(laststate_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerMove)
}

void ReqAckPlayerMove::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckPlayerMove_NFMsgShare_2eproto.base);
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laststate_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(laststate_));
}

ReqAckPlayerMove::~ReqAckPlayerMove() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerMove)
  SharedDtor();
}

void ReqAckPlayerMove::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
}

void ReqAckPlayerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckPlayerMove& ReqAckPlayerMove::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckPlayerMove_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pos_.Clear();
  source_pos_.Clear();
  move_direction_.Clear();
  if (GetArenaNoVirtual() == nullptr && mover_ != nullptr) {
    delete mover_;
  }
  mover_ = nullptr;
  ::memset(&movetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&laststate_) -
      reinterpret_cast<char*>(&movetype_)) + sizeof(laststate_));
  _internal_metadata_.Clear();
}

const char* ReqAckPlayerMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident mover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 moveType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          movetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lastState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          laststate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Vector3 target_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Vector3 source_pos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Vector3 move_direction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_move_direction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerMove::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::mover(this), target, stream);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_movetype(), target);
  }

  // float speed = 3;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_speed(), target);
  }

  // int32 time = 4;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_time(), target);
  }

  // int32 lastState = 5;
  if (this->laststate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_laststate(), target);
  }

  // repeated .NFMsg.Vector3 target_pos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_target_pos(i), target, stream);
  }

  // repeated .NFMsg.Vector3 source_pos = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(7, this->_internal_source_pos(i), target, stream);
  }

  // repeated .NFMsg.Vector3 move_direction = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_move_direction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(8, this->_internal_move_direction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerMove)
  return target;
}

size_t ReqAckPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Vector3 target_pos = 6;
  total_size += 1UL * this->_internal_target_pos_size();
  for (const auto& msg : this->target_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.Vector3 source_pos = 7;
  total_size += 1UL * this->_internal_source_pos_size();
  for (const auto& msg : this->source_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.Vector3 move_direction = 8;
  total_size += 1UL * this->_internal_move_direction_size();
  for (const auto& msg : this->move_direction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mover_);
  }

  // int32 moveType = 2;
  if (this->movetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_movetype());
  }

  // float speed = 3;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 lastState = 5;
  if (this->laststate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_laststate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerMove)
    MergeFrom(*source);
  }
}

void ReqAckPlayerMove::MergeFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pos_.MergeFrom(from.target_pos_);
  source_pos_.MergeFrom(from.source_pos_);
  move_direction_.MergeFrom(from.move_direction_);
  if (from.has_mover()) {
    _internal_mutable_mover()->::NFMsg::Ident::MergeFrom(from._internal_mover());
  }
  if (from.movetype() != 0) {
    _internal_set_movetype(from._internal_movetype());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    _internal_set_speed(from._internal_speed());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.laststate() != 0) {
    _internal_set_laststate(from._internal_laststate());
  }
}

void ReqAckPlayerMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerMove::CopyFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerMove::IsInitialized() const {
  return true;
}

void ReqAckPlayerMove::InternalSwap(ReqAckPlayerMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  target_pos_.InternalSwap(&other->target_pos_);
  source_pos_.InternalSwap(&other->source_pos_);
  move_direction_.InternalSwap(&other->move_direction_);
  swap(mover_, other->mover_);
  swap(movetype_, other->movetype_);
  swap(speed_, other->speed_);
  swap(time_, other->time_);
  swap(laststate_, other->laststate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckPlayerChat::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckPlayerChat::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ReqAckPlayerChat* msg);
  static const ::NFMsg::Ident& target_id(const ReqAckPlayerChat* msg);
};

const ::NFMsg::Ident&
ReqAckPlayerChat::_Internal::player_id(const ReqAckPlayerChat* msg) {
  return *msg->player_id_;
}
const ::NFMsg::Ident&
ReqAckPlayerChat::_Internal::target_id(const ReqAckPlayerChat* msg) {
  return *msg->target_id_;
}
void ReqAckPlayerChat::clear_player_id() {
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqAckPlayerChat::clear_target_id() {
  if (GetArenaNoVirtual() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
}
ReqAckPlayerChat::ReqAckPlayerChat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  player_hero_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_hero_id().empty()) {
    player_hero_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_hero_id_);
  }
  player_hero_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_hero_level().empty()) {
    player_hero_level_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_hero_level_);
  }
  chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_info().empty()) {
    chat_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_target_id()) {
    target_id_ = new ::NFMsg::Ident(*from.target_id_);
  } else {
    target_id_ = nullptr;
  }
  ::memcpy(&chat_channel_, &from.chat_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckPlayerChat_NFMsgShare_2eproto.base);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_hero_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_hero_level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(chat_type_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerChat)
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_hero_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_hero_level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckPlayerChat_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_hero_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_hero_level_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && target_id_ != nullptr) {
    delete target_id_;
  }
  target_id_ = nullptr;
  ::memset(&chat_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  _internal_metadata_.Clear();
}

const char* ReqAckPlayerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_player_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes player_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_player_hero_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes player_hero_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_player_hero_level(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_chat_channel(static_cast<::NFMsg::ReqAckPlayerChat_EGameChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_chat_type(static_cast<::NFMsg::ReqAckPlayerChat_EGameChatType>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_chat_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident target_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerChat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes player_name = 2;
  if (this->player_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // bytes player_hero_id = 3;
  if (this->player_hero_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_player_hero_id(), target);
  }

  // bytes player_hero_level = 4;
  if (this->player_hero_level().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_player_hero_level(), target);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  if (this->chat_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_chat_channel(), target);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  if (this->chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_chat_type(), target);
  }

  // bytes chat_info = 7;
  if (this->chat_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_chat_info(), target);
  }

  // .NFMsg.Ident target_id = 8;
  if (this->has_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::target_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes player_name = 2;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_name());
  }

  // bytes player_hero_id = 3;
  if (this->player_hero_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_hero_id());
  }

  // bytes player_hero_level = 4;
  if (this->player_hero_level().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_hero_level());
  }

  // bytes chat_info = 7;
  if (this->chat_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_info());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .NFMsg.Ident target_id = 8;
  if (this->has_target_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  if (this->chat_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_channel());
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.player_hero_id().size() > 0) {

    player_hero_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_hero_id_);
  }
  if (from.player_hero_level().size() > 0) {

    player_hero_level_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_hero_level_);
  }
  if (from.chat_info().size() > 0) {

    chat_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_target_id()) {
    _internal_mutable_target_id()->::NFMsg::Ident::MergeFrom(from._internal_target_id());
  }
  if (from.chat_channel() != 0) {
    _internal_set_chat_channel(from._internal_chat_channel());
  }
  if (from.chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_hero_id_.Swap(&other->player_hero_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  player_hero_level_.Swap(&other->player_hero_level_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_info_.Swap(&other->chat_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(target_id_, other->target_id_);
  swap(chat_channel_, other->chat_channel_);
  swap(chat_type_, other->chat_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckPlayerPosSync::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerPosSync_default_instance_._instance.get_mutable()->mover_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckPlayerPosSync_default_instance_._instance.get_mutable()->position_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ReqAckPlayerPosSync_default_instance_._instance.get_mutable()->direction_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
class ReqAckPlayerPosSync::_Internal {
 public:
  static const ::NFMsg::Ident& mover(const ReqAckPlayerPosSync* msg);
  static const ::NFMsg::Vector3& position(const ReqAckPlayerPosSync* msg);
  static const ::NFMsg::Vector3& direction(const ReqAckPlayerPosSync* msg);
};

const ::NFMsg::Ident&
ReqAckPlayerPosSync::_Internal::mover(const ReqAckPlayerPosSync* msg) {
  return *msg->mover_;
}
const ::NFMsg::Vector3&
ReqAckPlayerPosSync::_Internal::position(const ReqAckPlayerPosSync* msg) {
  return *msg->position_;
}
const ::NFMsg::Vector3&
ReqAckPlayerPosSync::_Internal::direction(const ReqAckPlayerPosSync* msg) {
  return *msg->direction_;
}
void ReqAckPlayerPosSync::clear_mover() {
  if (GetArenaNoVirtual() == nullptr && mover_ != nullptr) {
    delete mover_;
  }
  mover_ = nullptr;
}
void ReqAckPlayerPosSync::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void ReqAckPlayerPosSync::clear_direction() {
  if (GetArenaNoVirtual() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerPosSync)
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mover()) {
    mover_ = new ::NFMsg::Ident(*from.mover_);
  } else {
    mover_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::NFMsg::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_direction()) {
    direction_ = new ::NFMsg::Vector3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&time_)) + sizeof(frame_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerPosSync)
}

void ReqAckPlayerPosSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto.base);
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(frame_));
}

ReqAckPlayerPosSync::~ReqAckPlayerPosSync() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerPosSync)
  SharedDtor();
}

void ReqAckPlayerPosSync::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete direction_;
}

void ReqAckPlayerPosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckPlayerPosSync& ReqAckPlayerPosSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckPlayerPosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mover_ != nullptr) {
    delete mover_;
  }
  mover_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_) -
      reinterpret_cast<char*>(&time_)) + sizeof(frame_));
  _internal_metadata_.Clear();
}

const char* ReqAckPlayerPosSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident mover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float InterpolationTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          interpolationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 direction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerPosSync::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::mover(this), target, stream);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  // float InterpolationTime = 3;
  if (!(this->interpolationtime() <= 0 && this->interpolationtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_interpolationtime(), target);
  }

  // .NFMsg.Vector3 position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::position(this), target, stream);
  }

  // .NFMsg.Vector3 direction = 5;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::direction(this), target, stream);
  }

  // int32 status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_status(), target);
  }

  // int32 frame = 7;
  if (this->frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerPosSync)
  return target;
}

size_t ReqAckPlayerPosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerPosSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mover_);
  }

  // .NFMsg.Vector3 position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .NFMsg.Vector3 direction = 5;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // float InterpolationTime = 3;
  if (!(this->interpolationtime() <= 0 && this->interpolationtime() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 frame = 7;
  if (this->frame() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerPosSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerPosSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerPosSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerPosSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerPosSync)
    MergeFrom(*source);
  }
}

void ReqAckPlayerPosSync::MergeFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mover()) {
    _internal_mutable_mover()->::NFMsg::Ident::MergeFrom(from._internal_mover());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::NFMsg::Vector3::MergeFrom(from._internal_position());
  }
  if (from.has_direction()) {
    _internal_mutable_direction()->::NFMsg::Vector3::MergeFrom(from._internal_direction());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.interpolationtime() <= 0 && from.interpolationtime() >= 0)) {
    _internal_set_interpolationtime(from._internal_interpolationtime());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
}

void ReqAckPlayerPosSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerPosSync::CopyFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerPosSync::IsInitialized() const {
  return true;
}

void ReqAckPlayerPosSync::InternalSwap(ReqAckPlayerPosSync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mover_, other->mover_);
  swap(position_, other->position_);
  swap(direction_, other->direction_);
  swap(time_, other->time_);
  swap(interpolationtime_, other->interpolationtime_);
  swap(status_, other->status_);
  swap(frame_, other->frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerPosSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EffectData::InitAsDefaultInstance() {
  ::NFMsg::_EffectData_default_instance_._instance.get_mutable()->effect_ident_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class EffectData::_Internal {
 public:
  static const ::NFMsg::Ident& effect_ident(const EffectData* msg);
};

const ::NFMsg::Ident&
EffectData::_Internal::effect_ident(const EffectData* msg) {
  return *msg->effect_ident_;
}
void EffectData::clear_effect_ident() {
  if (GetArenaNoVirtual() == nullptr && effect_ident_ != nullptr) {
    delete effect_ident_;
  }
  effect_ident_ = nullptr;
}
EffectData::EffectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.EffectData)
}
EffectData::EffectData(const EffectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_effect_ident()) {
    effect_ident_ = new ::NFMsg::Ident(*from.effect_ident_);
  } else {
    effect_ident_ = nullptr;
  }
  ::memcpy(&effect_value_, &from.effect_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_rlt_) -
    reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.EffectData)
}

void EffectData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EffectData_NFMsgShare_2eproto.base);
  ::memset(&effect_ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_ident_)) + sizeof(effect_rlt_));
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:NFMsg.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != internal_default_instance()) delete effect_ident_;
}

void EffectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectData& EffectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectData_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.EffectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && effect_ident_ != nullptr) {
    delete effect_ident_;
  }
  effect_ident_ = nullptr;
  ::memset(&effect_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  _internal_metadata_.Clear();
}

const char* EffectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident effect_ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 effect_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          effect_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.EffectData.EResultType effect_rlt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_effect_rlt(static_cast<::NFMsg::EffectData_EResultType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.EffectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::effect_ident(this), target, stream);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_effect_value(), target);
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_effect_rlt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.EffectData)
  return target;
}

size_t EffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.EffectData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_ident_);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_value());
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_effect_rlt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.EffectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_effect_ident()) {
    _internal_mutable_effect_ident()->::NFMsg::Ident::MergeFrom(from._internal_effect_ident());
  }
  if (from.effect_value() != 0) {
    _internal_set_effect_value(from._internal_effect_value());
  }
  if (from.effect_rlt() != 0) {
    _internal_set_effect_rlt(from._internal_effect_rlt());
  }
}

void EffectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  return true;
}

void EffectData::InternalSwap(EffectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(effect_ident_, other->effect_ident_);
  swap(effect_value_, other->effect_value_);
  swap(effect_rlt_, other->effect_rlt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckUseSkill::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckUseSkill::_Internal {
 public:
  static const ::NFMsg::Ident& user(const ReqAckUseSkill* msg);
};

const ::NFMsg::Ident&
ReqAckUseSkill::_Internal::user(const ReqAckUseSkill* msg) {
  return *msg->user_;
}
void ReqAckUseSkill::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
ReqAckUseSkill::ReqAckUseSkill()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseSkill)
}
ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      effect_data_(from.effect_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skill_id().empty()) {
    skill_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from._internal_has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = nullptr;
  }
  use_index_ = from.use_index_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckUseSkill_NFMsgShare_2eproto.base);
  skill_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_index_) -
      reinterpret_cast<char*>(&user_)) + sizeof(use_index_));
}

ReqAckUseSkill::~ReqAckUseSkill() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseSkill)
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  skill_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckUseSkill_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  skill_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  use_index_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckUseSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes skill_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_skill_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 use_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.EffectData effect_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effect_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckUseSkill::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::user(this), target, stream);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_skill_id(), target);
  }

  // int32 use_index = 3;
  if (this->use_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_use_index(), target);
  }

  // repeated .NFMsg.EffectData effect_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effect_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_effect_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseSkill)
  return target;
}

size_t ReqAckUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.EffectData effect_data = 4;
  total_size += 1UL * this->_internal_effect_data_size();
  for (const auto& msg : this->effect_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skill_id());
  }

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int32 use_index = 3;
  if (this->use_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_use_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckUseSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseSkill)
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.skill_id().size() > 0) {

    skill_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::NFMsg::Ident::MergeFrom(from._internal_user());
  }
  if (from.use_index() != 0) {
    _internal_set_use_index(from._internal_use_index());
  }
}

void ReqAckUseSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  return true;
}

void ReqAckUseSkill::InternalSwap(ReqAckUseSkill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  effect_data_.InternalSwap(&other->effect_data_);
  skill_id_.Swap(&other->skill_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(use_index_, other->use_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckUseSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckUseItem::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::NFMsg::ItemStruct*>(
      ::NFMsg::ItemStruct::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->position_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
class ReqAckUseItem::_Internal {
 public:
  static const ::NFMsg::Ident& user(const ReqAckUseItem* msg);
  static const ::NFMsg::Ident& item_guid(const ReqAckUseItem* msg);
  static const ::NFMsg::ItemStruct& item(const ReqAckUseItem* msg);
  static const ::NFMsg::Ident& targetid(const ReqAckUseItem* msg);
  static const ::NFMsg::Vector3& position(const ReqAckUseItem* msg);
};

const ::NFMsg::Ident&
ReqAckUseItem::_Internal::user(const ReqAckUseItem* msg) {
  return *msg->user_;
}
const ::NFMsg::Ident&
ReqAckUseItem::_Internal::item_guid(const ReqAckUseItem* msg) {
  return *msg->item_guid_;
}
const ::NFMsg::ItemStruct&
ReqAckUseItem::_Internal::item(const ReqAckUseItem* msg) {
  return *msg->item_;
}
const ::NFMsg::Ident&
ReqAckUseItem::_Internal::targetid(const ReqAckUseItem* msg) {
  return *msg->targetid_;
}
const ::NFMsg::Vector3&
ReqAckUseItem::_Internal::position(const ReqAckUseItem* msg) {
  return *msg->position_;
}
void ReqAckUseItem::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
void ReqAckUseItem::clear_item_guid() {
  if (GetArenaNoVirtual() == nullptr && item_guid_ != nullptr) {
    delete item_guid_;
  }
  item_guid_ = nullptr;
}
void ReqAckUseItem::clear_targetid() {
  if (GetArenaNoVirtual() == nullptr && targetid_ != nullptr) {
    delete targetid_;
  }
  targetid_ = nullptr;
}
void ReqAckUseItem::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
ReqAckUseItem::ReqAckUseItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseItem)
}
ReqAckUseItem::ReqAckUseItem(const ReqAckUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      effect_data_(from.effect_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = nullptr;
  }
  if (from._internal_has_item_guid()) {
    item_guid_ = new ::NFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::NFMsg::ItemStruct(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from._internal_has_targetid()) {
    targetid_ = new ::NFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::NFMsg::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseItem)
}

void ReqAckUseItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckUseItem_NFMsgShare_2eproto.base);
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&user_)) + sizeof(position_));
}

ReqAckUseItem::~ReqAckUseItem() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseItem)
  SharedDtor();
}

void ReqAckUseItem::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete item_guid_;
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete targetid_;
  if (this != internal_default_instance()) delete position_;
}

void ReqAckUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckUseItem& ReqAckUseItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckUseItem_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_guid_ != nullptr) {
    delete item_guid_;
  }
  item_guid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && targetid_ != nullptr) {
    delete targetid_;
  }
  targetid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident item_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.EffectData effect_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effect_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .NFMsg.ItemStruct item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident targetid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckUseItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::user(this), target, stream);
  }

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::item_guid(this), target, stream);
  }

  // repeated .NFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effect_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_effect_data(i), target, stream);
  }

  // .NFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::item(this), target, stream);
  }

  // .NFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::targetid(this), target, stream);
  }

  // .NFMsg.Vector3 position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseItem)
  return target;
}

size_t ReqAckUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.EffectData effect_data = 3;
  total_size += 1UL * this->_internal_effect_data_size();
  for (const auto& msg : this->effect_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }

  // .NFMsg.ItemStruct item = 4;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // .NFMsg.Ident targetid = 5;
  if (this->has_targetid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  // .NFMsg.Vector3 position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckUseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseItem)
    MergeFrom(*source);
  }
}

void ReqAckUseItem::MergeFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.has_user()) {
    _internal_mutable_user()->::NFMsg::Ident::MergeFrom(from._internal_user());
  }
  if (from.has_item_guid()) {
    _internal_mutable_item_guid()->::NFMsg::Ident::MergeFrom(from._internal_item_guid());
  }
  if (from.has_item()) {
    _internal_mutable_item()->::NFMsg::ItemStruct::MergeFrom(from._internal_item());
  }
  if (from.has_targetid()) {
    _internal_mutable_targetid()->::NFMsg::Ident::MergeFrom(from._internal_targetid());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::NFMsg::Vector3::MergeFrom(from._internal_position());
  }
}

void ReqAckUseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseItem::CopyFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseItem::IsInitialized() const {
  return true;
}

void ReqAckUseItem::InternalSwap(ReqAckUseItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  effect_data_.InternalSwap(&other->effect_data_);
  swap(user_, other->user_);
  swap(item_guid_, other->item_guid_);
  swap(item_, other->item_);
  swap(targetid_, other->targetid_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckUseItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckSwapScene::InitAsDefaultInstance() {
}
class ReqAckSwapScene::_Internal {
 public:
};

ReqAckSwapScene::ReqAckSwapScene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSwapScene)
}
ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&transfer_type_, &from.transfer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckSwapScene_NFMsgShare_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
}

ReqAckSwapScene::~ReqAckSwapScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSwapScene)
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckSwapScene_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* ReqAckSwapScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_transfer_type(static_cast<::NFMsg::ReqAckSwapScene_EGameSwapType>(val));
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          line_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckSwapScene::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_transfer_type(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_line_id(), target);
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // float z = 6;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_z(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSwapScene)
  return target;
}

size_t ReqAckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSwapScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (this->transfer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transfer_type());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_id());
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 6;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSwapScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckSwapScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSwapScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSwapScene)
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.transfer_type() != 0) {
    _internal_set_transfer_type(from._internal_transfer_type());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.line_id() != 0) {
    _internal_set_line_id(from._internal_line_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void ReqAckSwapScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  return true;
}

void ReqAckSwapScene::InternalSwap(ReqAckSwapScene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transfer_type_, other->transfer_type_);
  swap(scene_id_, other->scene_id_);
  swap(line_id_, other->line_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckSwapScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckHomeScene::InitAsDefaultInstance() {
}
class ReqAckHomeScene::_Internal {
 public:
};

ReqAckHomeScene::ReqAckHomeScene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckHomeScene)
}
ReqAckHomeScene::ReqAckHomeScene(const ReqAckHomeScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckHomeScene)
}

void ReqAckHomeScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckHomeScene_NFMsgShare_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqAckHomeScene::~ReqAckHomeScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckHomeScene)
  SharedDtor();
}

void ReqAckHomeScene::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAckHomeScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckHomeScene& ReqAckHomeScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckHomeScene_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckHomeScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckHomeScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReqAckHomeScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckHomeScene::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckHomeScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckHomeScene)
  return target;
}

size_t ReqAckHomeScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckHomeScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckHomeScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckHomeScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckHomeScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckHomeScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckHomeScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckHomeScene)
    MergeFrom(*source);
  }
}

void ReqAckHomeScene::MergeFrom(const ReqAckHomeScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckHomeScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ReqAckHomeScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckHomeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckHomeScene::CopyFrom(const ReqAckHomeScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckHomeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckHomeScene::IsInitialized() const {
  return true;
}

void ReqAckHomeScene::InternalSwap(ReqAckHomeScene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckHomeScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemStruct::InitAsDefaultInstance() {
}
class ItemStruct::_Internal {
 public:
};

ItemStruct::ItemStruct()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ItemStruct)
}
ItemStruct::ItemStruct(const ItemStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_item_id().empty()) {
    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ItemStruct)
}

void ItemStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ItemStruct_NFMsgShare_2eproto.base);
  item_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
}

ItemStruct::~ItemStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.ItemStruct)
  SharedDtor();
}

void ItemStruct::SharedDtor() {
  item_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ItemStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemStruct& ItemStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ItemStruct_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ItemStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ItemStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
  _internal_metadata_.Clear();
}

const char* ItemStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_item_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemStruct::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ItemStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes item_id = 1;
  if (this->item_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_item_id(), target);
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ItemStruct)
  return target;
}

size_t ItemStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ItemStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes item_id = 1;
  if (this->item_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_item_id());
  }

  // int32 item_count = 2;
  if (this->item_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ItemStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ItemStruct)
    MergeFrom(*source);
  }
}

void ItemStruct::MergeFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item_id().size() > 0) {

    item_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  if (from.item_count() != 0) {
    _internal_set_item_count(from._internal_item_count());
  }
}

void ItemStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemStruct::CopyFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemStruct::IsInitialized() const {
  return true;
}

void ItemStruct::InternalSwap(ItemStruct* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  item_id_.Swap(&other->item_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_count_, other->item_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrencyStruct::InitAsDefaultInstance() {
}
class CurrencyStruct::_Internal {
 public:
};

CurrencyStruct::CurrencyStruct()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.CurrencyStruct)
}
CurrencyStruct::CurrencyStruct(const CurrencyStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currency_type_, &from.currency_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_count_) -
    reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.CurrencyStruct)
}

void CurrencyStruct::SharedCtor() {
  ::memset(&currency_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_count_) -
      reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
}

CurrencyStruct::~CurrencyStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.CurrencyStruct)
  SharedDtor();
}

void CurrencyStruct::SharedDtor() {
}

void CurrencyStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrencyStruct& CurrencyStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrencyStruct_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void CurrencyStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.CurrencyStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&currency_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_count_) -
      reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  _internal_metadata_.Clear();
}

const char* CurrencyStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 currency_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          currency_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currency_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          currency_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrencyStruct::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.CurrencyStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_currency_type(), target);
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_currency_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.CurrencyStruct)
  return target;
}

size_t CurrencyStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.CurrencyStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 currency_type = 1;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currency_type());
  }

  // int32 currency_count = 2;
  if (this->currency_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currency_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrencyStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.CurrencyStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.CurrencyStruct)
    MergeFrom(*source);
  }
}

void CurrencyStruct::MergeFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency_type() != 0) {
    _internal_set_currency_type(from._internal_currency_type());
  }
  if (from.currency_count() != 0) {
    _internal_set_currency_count(from._internal_currency_count());
  }
}

void CurrencyStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyStruct::CopyFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyStruct::IsInitialized() const {
  return true;
}

void CurrencyStruct::InternalSwap(CurrencyStruct* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(currency_type_, other->currency_type_);
  swap(currency_count_, other->currency_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckReliveHero::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckReliveHero_default_instance_._instance.get_mutable()->hero_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckReliveHero::_Internal {
 public:
  static const ::NFMsg::Ident& hero_id(const ReqAckReliveHero* msg);
};

const ::NFMsg::Ident&
ReqAckReliveHero::_Internal::hero_id(const ReqAckReliveHero* msg) {
  return *msg->hero_id_;
}
void ReqAckReliveHero::clear_hero_id() {
  if (GetArenaNoVirtual() == nullptr && hero_id_ != nullptr) {
    delete hero_id_;
  }
  hero_id_ = nullptr;
}
ReqAckReliveHero::ReqAckReliveHero()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckReliveHero)
}
ReqAckReliveHero::ReqAckReliveHero(const ReqAckReliveHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_hero_id()) {
    hero_id_ = new ::NFMsg::Ident(*from.hero_id_);
  } else {
    hero_id_ = nullptr;
  }
  diamond_ = from.diamond_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckReliveHero)
}

void ReqAckReliveHero::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckReliveHero_NFMsgShare_2eproto.base);
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diamond_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(diamond_));
}

ReqAckReliveHero::~ReqAckReliveHero() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckReliveHero)
  SharedDtor();
}

void ReqAckReliveHero::SharedDtor() {
  if (this != internal_default_instance()) delete hero_id_;
}

void ReqAckReliveHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckReliveHero& ReqAckReliveHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckReliveHero_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckReliveHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckReliveHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hero_id_ != nullptr) {
    delete hero_id_;
  }
  hero_id_ = nullptr;
  diamond_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckReliveHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 diamond = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckReliveHero::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckReliveHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diamond = 1;
  if (this->diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_diamond(), target);
  }

  // .NFMsg.Ident hero_id = 2;
  if (this->has_hero_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::hero_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckReliveHero)
  return target;
}

size_t ReqAckReliveHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckReliveHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident hero_id = 2;
  if (this->has_hero_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hero_id_);
  }

  // int32 diamond = 1;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_diamond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckReliveHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckReliveHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckReliveHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckReliveHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckReliveHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckReliveHero)
    MergeFrom(*source);
  }
}

void ReqAckReliveHero::MergeFrom(const ReqAckReliveHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckReliveHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hero_id()) {
    _internal_mutable_hero_id()->::NFMsg::Ident::MergeFrom(from._internal_hero_id());
  }
  if (from.diamond() != 0) {
    _internal_set_diamond(from._internal_diamond());
  }
}

void ReqAckReliveHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckReliveHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckReliveHero::CopyFrom(const ReqAckReliveHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckReliveHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckReliveHero::IsInitialized() const {
  return true;
}

void ReqAckReliveHero::InternalSwap(ReqAckReliveHero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hero_id_, other->hero_id_);
  swap(diamond_, other->diamond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckReliveHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqPickDropItem::InitAsDefaultInstance() {
  ::NFMsg::_ReqPickDropItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqPickDropItem::_Internal {
 public:
  static const ::NFMsg::Ident& item_guid(const ReqPickDropItem* msg);
};

const ::NFMsg::Ident&
ReqPickDropItem::_Internal::item_guid(const ReqPickDropItem* msg) {
  return *msg->item_guid_;
}
void ReqPickDropItem::clear_item_guid() {
  if (GetArenaNoVirtual() == nullptr && item_guid_ != nullptr) {
    delete item_guid_;
  }
  item_guid_ = nullptr;
}
ReqPickDropItem::ReqPickDropItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqPickDropItem)
}
ReqPickDropItem::ReqPickDropItem(const ReqPickDropItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_item_guid()) {
    item_guid_ = new ::NFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqPickDropItem)
}

void ReqPickDropItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqPickDropItem_NFMsgShare_2eproto.base);
  item_guid_ = nullptr;
}

ReqPickDropItem::~ReqPickDropItem() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqPickDropItem)
  SharedDtor();
}

void ReqPickDropItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_guid_;
}

void ReqPickDropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqPickDropItem& ReqPickDropItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqPickDropItem_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqPickDropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqPickDropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && item_guid_ != nullptr) {
    delete item_guid_;
  }
  item_guid_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqPickDropItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident item_guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqPickDropItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqPickDropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::item_guid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqPickDropItem)
  return target;
}

size_t ReqPickDropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqPickDropItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident item_guid = 2;
  if (this->has_item_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqPickDropItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPickDropItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqPickDropItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqPickDropItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqPickDropItem)
    MergeFrom(*source);
  }
}

void ReqPickDropItem::MergeFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_guid()) {
    _internal_mutable_item_guid()->::NFMsg::Ident::MergeFrom(from._internal_item_guid());
  }
}

void ReqPickDropItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickDropItem::CopyFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickDropItem::IsInitialized() const {
  return true;
}

void ReqPickDropItem::InternalSwap(ReqPickDropItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(item_guid_, other->item_guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPickDropItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAcceptTask::InitAsDefaultInstance() {
}
class ReqAcceptTask::_Internal {
 public:
};

ReqAcceptTask::ReqAcceptTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAcceptTask)
}
ReqAcceptTask::ReqAcceptTask(const ReqAcceptTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAcceptTask)
}

void ReqAcceptTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAcceptTask_NFMsgShare_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqAcceptTask::~ReqAcceptTask() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAcceptTask)
  SharedDtor();
}

void ReqAcceptTask::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAcceptTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAcceptTask& ReqAcceptTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAcceptTask_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAcceptTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAcceptTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReqAcceptTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_task_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAcceptTask::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAcceptTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAcceptTask)
  return target;
}

size_t ReqAcceptTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAcceptTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAcceptTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAcceptTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAcceptTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAcceptTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAcceptTask)
    MergeFrom(*source);
  }
}

void ReqAcceptTask::MergeFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqAcceptTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptTask::CopyFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAcceptTask::IsInitialized() const {
  return true;
}

void ReqAcceptTask::InternalSwap(ReqAcceptTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAcceptTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqCompeleteTask::InitAsDefaultInstance() {
}
class ReqCompeleteTask::_Internal {
 public:
};

ReqCompeleteTask::ReqCompeleteTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqCompeleteTask)
}
ReqCompeleteTask::ReqCompeleteTask(const ReqCompeleteTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqCompeleteTask)
}

void ReqCompeleteTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqCompeleteTask_NFMsgShare_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqCompeleteTask::~ReqCompeleteTask() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqCompeleteTask)
  SharedDtor();
}

void ReqCompeleteTask::SharedDtor() {
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqCompeleteTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqCompeleteTask& ReqCompeleteTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqCompeleteTask_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqCompeleteTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqCompeleteTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReqCompeleteTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_task_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCompeleteTask::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqCompeleteTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqCompeleteTask)
  return target;
}

size_t ReqCompeleteTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqCompeleteTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCompeleteTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCompeleteTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCompeleteTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqCompeleteTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqCompeleteTask)
    MergeFrom(*source);
  }
}

void ReqCompeleteTask::MergeFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqCompeleteTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCompeleteTask::CopyFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCompeleteTask::IsInitialized() const {
  return true;
}

void ReqCompeleteTask::InternalSwap(ReqCompeleteTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCompeleteTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAddSceneBuilding::InitAsDefaultInstance() {
  ::NFMsg::_ReqAddSceneBuilding_default_instance_._instance.get_mutable()->pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ReqAddSceneBuilding_default_instance_._instance.get_mutable()->guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAddSceneBuilding_default_instance_._instance.get_mutable()->master_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAddSceneBuilding::_Internal {
 public:
  static const ::NFMsg::Vector3& pos(const ReqAddSceneBuilding* msg);
  static const ::NFMsg::Ident& guid(const ReqAddSceneBuilding* msg);
  static const ::NFMsg::Ident& master(const ReqAddSceneBuilding* msg);
};

const ::NFMsg::Vector3&
ReqAddSceneBuilding::_Internal::pos(const ReqAddSceneBuilding* msg) {
  return *msg->pos_;
}
const ::NFMsg::Ident&
ReqAddSceneBuilding::_Internal::guid(const ReqAddSceneBuilding* msg) {
  return *msg->guid_;
}
const ::NFMsg::Ident&
ReqAddSceneBuilding::_Internal::master(const ReqAddSceneBuilding* msg) {
  return *msg->master_;
}
void ReqAddSceneBuilding::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void ReqAddSceneBuilding::clear_guid() {
  if (GetArenaNoVirtual() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
}
void ReqAddSceneBuilding::clear_master() {
  if (GetArenaNoVirtual() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
}
ReqAddSceneBuilding::ReqAddSceneBuilding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAddSceneBuilding)
}
ReqAddSceneBuilding::ReqAddSceneBuilding(const ReqAddSceneBuilding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  master_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_master_name().empty()) {
    master_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.master_name_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::NFMsg::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_guid()) {
    guid_ = new ::NFMsg::Ident(*from.guid_);
  } else {
    guid_ = nullptr;
  }
  if (from._internal_has_master()) {
    master_ = new ::NFMsg::Ident(*from.master_);
  } else {
    master_ = nullptr;
  }
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_building_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(is_building_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAddSceneBuilding)
}

void ReqAddSceneBuilding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto.base);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  master_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_building_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(is_building_));
}

ReqAddSceneBuilding::~ReqAddSceneBuilding() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAddSceneBuilding)
  SharedDtor();
}

void ReqAddSceneBuilding::SharedDtor() {
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  master_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete guid_;
  if (this != internal_default_instance()) delete master_;
}

void ReqAddSceneBuilding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAddSceneBuilding& ReqAddSceneBuilding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAddSceneBuilding_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAddSceneBuilding::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAddSceneBuilding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  master_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && master_ != nullptr) {
    delete master_;
  }
  master_ = nullptr;
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_building_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(is_building_));
  _internal_metadata_.Clear();
}

const char* ReqAddSceneBuilding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Vector3 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident master = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_config_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes master_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_master_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_home_scene = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_home_scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_building = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_building_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAddSceneBuilding::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAddSceneBuilding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Vector3 pos = 1;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pos(this), target, stream);
  }

  // .NFMsg.Ident guid = 2;
  if (this->has_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::guid(this), target, stream);
  }

  // .NFMsg.Ident master = 3;
  if (this->has_master()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::master(this), target, stream);
  }

  // bytes config_id = 4;
  if (this->config_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_config_id(), target);
  }

  // int32 scene_id = 5;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_scene_id(), target);
  }

  // bytes master_name = 6;
  if (this->master_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_master_name(), target);
  }

  // int32 is_home_scene = 7;
  if (this->is_home_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_is_home_scene(), target);
  }

  // int32 is_building = 8;
  if (this->is_building() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_is_building(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAddSceneBuilding)
  return target;
}

size_t ReqAddSceneBuilding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAddSceneBuilding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_id = 4;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // bytes master_name = 6;
  if (this->master_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_master_name());
  }

  // .NFMsg.Vector3 pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .NFMsg.Ident guid = 2;
  if (this->has_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guid_);
  }

  // .NFMsg.Ident master = 3;
  if (this->has_master()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *master_);
  }

  // int32 scene_id = 5;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  // int32 is_home_scene = 7;
  if (this->is_home_scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_home_scene());
  }

  // int32 is_building = 8;
  if (this->is_building() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_building());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAddSceneBuilding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAddSceneBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAddSceneBuilding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAddSceneBuilding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAddSceneBuilding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAddSceneBuilding)
    MergeFrom(*source);
  }
}

void ReqAddSceneBuilding::MergeFrom(const ReqAddSceneBuilding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAddSceneBuilding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  if (from.master_name().size() > 0) {

    master_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.master_name_);
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::NFMsg::Vector3::MergeFrom(from._internal_pos());
  }
  if (from.has_guid()) {
    _internal_mutable_guid()->::NFMsg::Ident::MergeFrom(from._internal_guid());
  }
  if (from.has_master()) {
    _internal_mutable_master()->::NFMsg::Ident::MergeFrom(from._internal_master());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.is_home_scene() != 0) {
    _internal_set_is_home_scene(from._internal_is_home_scene());
  }
  if (from.is_building() != 0) {
    _internal_set_is_building(from._internal_is_building());
  }
}

void ReqAddSceneBuilding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAddSceneBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAddSceneBuilding::CopyFrom(const ReqAddSceneBuilding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAddSceneBuilding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAddSceneBuilding::IsInitialized() const {
  return true;
}

void ReqAddSceneBuilding::InternalSwap(ReqAddSceneBuilding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_id_.Swap(&other->config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  master_name_.Swap(&other->master_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(guid_, other->guid_);
  swap(master_, other->master_);
  swap(scene_id_, other->scene_id_);
  swap(is_home_scene_, other->is_home_scene_);
  swap(is_building_, other->is_building_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAddSceneBuilding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSceneBuildings::InitAsDefaultInstance() {
  ::NFMsg::_ReqSceneBuildings_default_instance_._instance.get_mutable()->pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
class ReqSceneBuildings::_Internal {
 public:
  static const ::NFMsg::Vector3& pos(const ReqSceneBuildings* msg);
};

const ::NFMsg::Vector3&
ReqSceneBuildings::_Internal::pos(const ReqSceneBuildings* msg) {
  return *msg->pos_;
}
void ReqSceneBuildings::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
ReqSceneBuildings::ReqSceneBuildings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSceneBuildings)
}
ReqSceneBuildings::ReqSceneBuildings(const ReqSceneBuildings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::NFMsg::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSceneBuildings)
}

void ReqSceneBuildings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSceneBuildings_NFMsgShare_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(scene_id_));
}

ReqSceneBuildings::~ReqSceneBuildings() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSceneBuildings)
  SharedDtor();
}

void ReqSceneBuildings::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void ReqSceneBuildings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSceneBuildings& ReqSceneBuildings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSceneBuildings_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqSceneBuildings::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSceneBuildings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  scene_id_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqSceneBuildings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSceneBuildings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSceneBuildings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene_id(), target);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSceneBuildings)
  return target;
}

size_t ReqSceneBuildings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSceneBuildings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSceneBuildings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSceneBuildings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSceneBuildings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSceneBuildings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSceneBuildings)
    MergeFrom(*source);
  }
}

void ReqSceneBuildings::MergeFrom(const ReqSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::NFMsg::Vector3::MergeFrom(from._internal_pos());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void ReqSceneBuildings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSceneBuildings::CopyFrom(const ReqSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSceneBuildings::IsInitialized() const {
  return true;
}

void ReqSceneBuildings::InternalSwap(ReqSceneBuildings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(scene_id_, other->scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSceneBuildings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckSceneBuildings::InitAsDefaultInstance() {
}
class AckSceneBuildings::_Internal {
 public:
};

AckSceneBuildings::AckSceneBuildings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSceneBuildings)
}
AckSceneBuildings::AckSceneBuildings(const AckSceneBuildings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSceneBuildings)
}

void AckSceneBuildings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckSceneBuildings_NFMsgShare_2eproto.base);
}

AckSceneBuildings::~AckSceneBuildings() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSceneBuildings)
  SharedDtor();
}

void AckSceneBuildings::SharedDtor() {
}

void AckSceneBuildings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckSceneBuildings& AckSceneBuildings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckSceneBuildings_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckSceneBuildings::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSceneBuildings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildings_.Clear();
  _internal_metadata_.Clear();
}

const char* AckSceneBuildings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSceneBuildings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSceneBuildings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_buildings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSceneBuildings)
  return target;
}

size_t AckSceneBuildings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSceneBuildings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 1;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSceneBuildings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSceneBuildings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSceneBuildings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSceneBuildings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSceneBuildings)
    MergeFrom(*source);
  }
}

void AckSceneBuildings::MergeFrom(const AckSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildings_.MergeFrom(from.buildings_);
}

void AckSceneBuildings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSceneBuildings::CopyFrom(const AckSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSceneBuildings::IsInitialized() const {
  return true;
}

void AckSceneBuildings::InternalSwap(AckSceneBuildings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buildings_.InternalSwap(&other->buildings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSceneBuildings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqStoreSceneBuildings::InitAsDefaultInstance() {
  ::NFMsg::_ReqStoreSceneBuildings_default_instance_._instance.get_mutable()->guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqStoreSceneBuildings::_Internal {
 public:
  static const ::NFMsg::Ident& guid(const ReqStoreSceneBuildings* msg);
};

const ::NFMsg::Ident&
ReqStoreSceneBuildings::_Internal::guid(const ReqStoreSceneBuildings* msg) {
  return *msg->guid_;
}
void ReqStoreSceneBuildings::clear_guid() {
  if (GetArenaNoVirtual() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
}
ReqStoreSceneBuildings::ReqStoreSceneBuildings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqStoreSceneBuildings)
}
ReqStoreSceneBuildings::ReqStoreSceneBuildings(const ReqStoreSceneBuildings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_guid()) {
    guid_ = new ::NFMsg::Ident(*from.guid_);
  } else {
    guid_ = nullptr;
  }
  home_scene_id_ = from.home_scene_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqStoreSceneBuildings)
}

void ReqStoreSceneBuildings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqStoreSceneBuildings_NFMsgShare_2eproto.base);
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&home_scene_id_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(home_scene_id_));
}

ReqStoreSceneBuildings::~ReqStoreSceneBuildings() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqStoreSceneBuildings)
  SharedDtor();
}

void ReqStoreSceneBuildings::SharedDtor() {
  if (this != internal_default_instance()) delete guid_;
}

void ReqStoreSceneBuildings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqStoreSceneBuildings& ReqStoreSceneBuildings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqStoreSceneBuildings_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqStoreSceneBuildings::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqStoreSceneBuildings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildings_.Clear();
  if (GetArenaNoVirtual() == nullptr && guid_ != nullptr) {
    delete guid_;
  }
  guid_ = nullptr;
  home_scene_id_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqStoreSceneBuildings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 home_scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          home_scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqStoreSceneBuildings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqStoreSceneBuildings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident guid = 1;
  if (this->has_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::guid(this), target, stream);
  }

  // int32 home_scene_id = 2;
  if (this->home_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_home_scene_id(), target);
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_buildings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqStoreSceneBuildings)
  return target;
}

size_t ReqStoreSceneBuildings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqStoreSceneBuildings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 3;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident guid = 1;
  if (this->has_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guid_);
  }

  // int32 home_scene_id = 2;
  if (this->home_scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_home_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqStoreSceneBuildings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqStoreSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqStoreSceneBuildings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqStoreSceneBuildings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqStoreSceneBuildings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqStoreSceneBuildings)
    MergeFrom(*source);
  }
}

void ReqStoreSceneBuildings::MergeFrom(const ReqStoreSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqStoreSceneBuildings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildings_.MergeFrom(from.buildings_);
  if (from.has_guid()) {
    _internal_mutable_guid()->::NFMsg::Ident::MergeFrom(from._internal_guid());
  }
  if (from.home_scene_id() != 0) {
    _internal_set_home_scene_id(from._internal_home_scene_id());
  }
}

void ReqStoreSceneBuildings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqStoreSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStoreSceneBuildings::CopyFrom(const ReqStoreSceneBuildings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqStoreSceneBuildings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStoreSceneBuildings::IsInitialized() const {
  return true;
}

void ReqStoreSceneBuildings::InternalSwap(ReqStoreSceneBuildings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  buildings_.InternalSwap(&other->buildings_);
  swap(guid_, other->guid_);
  swap(home_scene_id_, other->home_scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqStoreSceneBuildings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckCreateClan::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckCreateClan_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckCreateClan_default_instance_._instance.get_mutable()->clan_player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckCreateClan::_Internal {
 public:
  static const ::NFMsg::Ident& clan_id(const ReqAckCreateClan* msg);
  static const ::NFMsg::Ident& clan_player_id(const ReqAckCreateClan* msg);
};

const ::NFMsg::Ident&
ReqAckCreateClan::_Internal::clan_id(const ReqAckCreateClan* msg) {
  return *msg->clan_id_;
}
const ::NFMsg::Ident&
ReqAckCreateClan::_Internal::clan_player_id(const ReqAckCreateClan* msg) {
  return *msg->clan_player_id_;
}
void ReqAckCreateClan::clear_clan_id() {
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
}
void ReqAckCreateClan::clear_clan_player_id() {
  if (GetArenaNoVirtual() == nullptr && clan_player_id_ != nullptr) {
    delete clan_player_id_;
  }
  clan_player_id_ = nullptr;
}
ReqAckCreateClan::ReqAckCreateClan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckCreateClan)
}
ReqAckCreateClan::ReqAckCreateClan(const ReqAckCreateClan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clan_name().empty()) {
    clan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  clan_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clan_desc().empty()) {
    clan_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_desc_);
  }
  clan_player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clan_player_name().empty()) {
    clan_player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_player_name_);
  }
  if (from._internal_has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = nullptr;
  }
  if (from._internal_has_clan_player_id()) {
    clan_player_id_ = new ::NFMsg::Ident(*from.clan_player_id_);
  } else {
    clan_player_id_ = nullptr;
  }
  clan_player_bp_ = from.clan_player_bp_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckCreateClan)
}

void ReqAckCreateClan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckCreateClan_NFMsgShare_2eproto.base);
  clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clan_player_bp_) -
      reinterpret_cast<char*>(&clan_id_)) + sizeof(clan_player_bp_));
}

ReqAckCreateClan::~ReqAckCreateClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckCreateClan)
  SharedDtor();
}

void ReqAckCreateClan::SharedDtor() {
  clan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_id_;
  if (this != internal_default_instance()) delete clan_player_id_;
}

void ReqAckCreateClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckCreateClan& ReqAckCreateClan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckCreateClan_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckCreateClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckCreateClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_player_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clan_player_id_ != nullptr) {
    delete clan_player_id_;
  }
  clan_player_id_ = nullptr;
  clan_player_bp_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckCreateClan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident clan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes clan_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_clan_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes clan_desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_clan_desc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident clan_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes clan_player_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_clan_player_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clan_player_bp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          clan_player_bp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckCreateClan::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckCreateClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::clan_id(this), target, stream);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_clan_name(), target);
  }

  // bytes clan_desc = 3;
  if (this->clan_desc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_clan_desc(), target);
  }

  // .NFMsg.Ident clan_player_id = 4;
  if (this->has_clan_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::clan_player_id(this), target, stream);
  }

  // bytes clan_player_name = 5;
  if (this->clan_player_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_clan_player_name(), target);
  }

  // int32 clan_player_bp = 6;
  if (this->clan_player_bp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_clan_player_bp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckCreateClan)
  return target;
}

size_t ReqAckCreateClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckCreateClan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clan_name());
  }

  // bytes clan_desc = 3;
  if (this->clan_desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clan_desc());
  }

  // bytes clan_player_name = 5;
  if (this->clan_player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clan_player_name());
  }

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  // .NFMsg.Ident clan_player_id = 4;
  if (this->has_clan_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_player_id_);
  }

  // int32 clan_player_bp = 6;
  if (this->clan_player_bp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clan_player_bp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckCreateClan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckCreateClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateClan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckCreateClan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckCreateClan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckCreateClan)
    MergeFrom(*source);
  }
}

void ReqAckCreateClan::MergeFrom(const ReqAckCreateClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckCreateClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.clan_desc().size() > 0) {

    clan_desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_desc_);
  }
  if (from.clan_player_name().size() > 0) {

    clan_player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_player_name_);
  }
  if (from.has_clan_id()) {
    _internal_mutable_clan_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_id());
  }
  if (from.has_clan_player_id()) {
    _internal_mutable_clan_player_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_player_id());
  }
  if (from.clan_player_bp() != 0) {
    _internal_set_clan_player_bp(from._internal_clan_player_bp());
  }
}

void ReqAckCreateClan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckCreateClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateClan::CopyFrom(const ReqAckCreateClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckCreateClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateClan::IsInitialized() const {
  return true;
}

void ReqAckCreateClan::InternalSwap(ReqAckCreateClan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clan_name_.Swap(&other->clan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clan_desc_.Swap(&other->clan_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clan_player_name_.Swap(&other->clan_player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_id_, other->clan_id_);
  swap(clan_player_id_, other->clan_player_id_);
  swap(clan_player_bp_, other->clan_player_bp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckCreateClan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSearchClan::InitAsDefaultInstance() {
}
class ReqSearchClan::_Internal {
 public:
};

ReqSearchClan::ReqSearchClan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSearchClan)
}
ReqSearchClan::ReqSearchClan(const ReqSearchClan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clan_name().empty()) {
    clan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSearchClan)
}

void ReqSearchClan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSearchClan_NFMsgShare_2eproto.base);
  clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqSearchClan::~ReqSearchClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSearchClan)
  SharedDtor();
}

void ReqSearchClan::SharedDtor() {
  clan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqSearchClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSearchClan& ReqSearchClan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSearchClan_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqSearchClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSearchClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReqSearchClan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes clan_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_clan_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSearchClan::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSearchClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes clan_name = 1;
  if (this->clan_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_clan_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSearchClan)
  return target;
}

size_t ReqSearchClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSearchClan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clan_name = 1;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clan_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSearchClan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchClan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSearchClan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSearchClan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSearchClan)
    MergeFrom(*source);
  }
}

void ReqSearchClan::MergeFrom(const ReqSearchClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
}

void ReqSearchClan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchClan::CopyFrom(const ReqSearchClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchClan::IsInitialized() const {
  return true;
}

void ReqSearchClan::InternalSwap(ReqSearchClan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clan_name_.Swap(&other->clan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSearchClan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckSearchClan_SearchClanObject::InitAsDefaultInstance() {
  ::NFMsg::_AckSearchClan_SearchClanObject_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class AckSearchClan_SearchClanObject::_Internal {
 public:
  static const ::NFMsg::Ident& clan_id(const AckSearchClan_SearchClanObject* msg);
};

const ::NFMsg::Ident&
AckSearchClan_SearchClanObject::_Internal::clan_id(const AckSearchClan_SearchClanObject* msg) {
  return *msg->clan_id_;
}
void AckSearchClan_SearchClanObject::clear_clan_id() {
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
}
AckSearchClan_SearchClanObject::AckSearchClan_SearchClanObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchClan.SearchClanObject)
}
AckSearchClan_SearchClanObject::AckSearchClan_SearchClanObject(const AckSearchClan_SearchClanObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clan_name().empty()) {
    clan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  clan_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clan_icon().empty()) {
    clan_icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_icon_);
  }
  if (from._internal_has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = nullptr;
  }
  ::memcpy(&clan_member_count_, &from.clan_member_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&clan_rank_) -
    reinterpret_cast<char*>(&clan_member_count_)) + sizeof(clan_rank_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchClan.SearchClanObject)
}

void AckSearchClan_SearchClanObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto.base);
  clan_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clan_rank_) -
      reinterpret_cast<char*>(&clan_id_)) + sizeof(clan_rank_));
}

AckSearchClan_SearchClanObject::~AckSearchClan_SearchClanObject() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchClan.SearchClanObject)
  SharedDtor();
}

void AckSearchClan_SearchClanObject::SharedDtor() {
  clan_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_id_;
}

void AckSearchClan_SearchClanObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckSearchClan_SearchClanObject& AckSearchClan_SearchClanObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckSearchClan_SearchClanObject_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckSearchClan_SearchClanObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchClan.SearchClanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clan_icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
  ::memset(&clan_member_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clan_rank_) -
      reinterpret_cast<char*>(&clan_member_count_)) + sizeof(clan_rank_));
  _internal_metadata_.Clear();
}

const char* AckSearchClan_SearchClanObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident clan_ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes clan_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_clan_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes clan_icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_clan_icon(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clan_member_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          clan_member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clan_member_max_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          clan_member_max_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clan_honor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          clan_honor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clan_rank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          clan_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSearchClan_SearchClanObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchClan.SearchClanObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_ID = 1;
  if (this->has_clan_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::clan_id(this), target, stream);
  }

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_clan_name(), target);
  }

  // bytes clan_icon = 3;
  if (this->clan_icon().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_clan_icon(), target);
  }

  // int32 clan_member_count = 4;
  if (this->clan_member_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_clan_member_count(), target);
  }

  // int32 clan_member_max_count = 5;
  if (this->clan_member_max_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_clan_member_max_count(), target);
  }

  // int32 clan_honor = 6;
  if (this->clan_honor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_clan_honor(), target);
  }

  // int32 clan_rank = 7;
  if (this->clan_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_clan_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchClan.SearchClanObject)
  return target;
}

size_t AckSearchClan_SearchClanObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchClan.SearchClanObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clan_name = 2;
  if (this->clan_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clan_name());
  }

  // bytes clan_icon = 3;
  if (this->clan_icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clan_icon());
  }

  // .NFMsg.Ident clan_ID = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  // int32 clan_member_count = 4;
  if (this->clan_member_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clan_member_count());
  }

  // int32 clan_member_max_count = 5;
  if (this->clan_member_max_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clan_member_max_count());
  }

  // int32 clan_honor = 6;
  if (this->clan_honor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clan_honor());
  }

  // int32 clan_rank = 7;
  if (this->clan_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clan_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchClan_SearchClanObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchClan.SearchClanObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchClan_SearchClanObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSearchClan_SearchClanObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchClan.SearchClanObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchClan.SearchClanObject)
    MergeFrom(*source);
  }
}

void AckSearchClan_SearchClanObject::MergeFrom(const AckSearchClan_SearchClanObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchClan.SearchClanObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_name().size() > 0) {

    clan_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_name_);
  }
  if (from.clan_icon().size() > 0) {

    clan_icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_icon_);
  }
  if (from.has_clan_id()) {
    _internal_mutable_clan_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_id());
  }
  if (from.clan_member_count() != 0) {
    _internal_set_clan_member_count(from._internal_clan_member_count());
  }
  if (from.clan_member_max_count() != 0) {
    _internal_set_clan_member_max_count(from._internal_clan_member_max_count());
  }
  if (from.clan_honor() != 0) {
    _internal_set_clan_honor(from._internal_clan_honor());
  }
  if (from.clan_rank() != 0) {
    _internal_set_clan_rank(from._internal_clan_rank());
  }
}

void AckSearchClan_SearchClanObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchClan.SearchClanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchClan_SearchClanObject::CopyFrom(const AckSearchClan_SearchClanObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchClan.SearchClanObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchClan_SearchClanObject::IsInitialized() const {
  return true;
}

void AckSearchClan_SearchClanObject::InternalSwap(AckSearchClan_SearchClanObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clan_name_.Swap(&other->clan_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  clan_icon_.Swap(&other->clan_icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_id_, other->clan_id_);
  swap(clan_member_count_, other->clan_member_count_);
  swap(clan_member_max_count_, other->clan_member_max_count_);
  swap(clan_honor_, other->clan_honor_);
  swap(clan_rank_, other->clan_rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSearchClan_SearchClanObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckSearchClan::InitAsDefaultInstance() {
}
class AckSearchClan::_Internal {
 public:
};

AckSearchClan::AckSearchClan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchClan)
}
AckSearchClan::AckSearchClan(const AckSearchClan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      clan_list_(from.clan_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchClan)
}

void AckSearchClan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckSearchClan_NFMsgShare_2eproto.base);
}

AckSearchClan::~AckSearchClan() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchClan)
  SharedDtor();
}

void AckSearchClan::SharedDtor() {
}

void AckSearchClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckSearchClan& AckSearchClan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckSearchClan_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckSearchClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_list_.Clear();
  _internal_metadata_.Clear();
}

const char* AckSearchClan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clan_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSearchClan::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_clan_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_clan_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchClan)
  return target;
}

size_t AckSearchClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchClan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.AckSearchClan.SearchClanObject clan_list = 1;
  total_size += 1UL * this->_internal_clan_list_size();
  for (const auto& msg : this->clan_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchClan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchClan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSearchClan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchClan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchClan)
    MergeFrom(*source);
  }
}

void AckSearchClan::MergeFrom(const AckSearchClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  clan_list_.MergeFrom(from.clan_list_);
}

void AckSearchClan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchClan::CopyFrom(const AckSearchClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchClan::IsInitialized() const {
  return true;
}

void AckSearchClan::InternalSwap(AckSearchClan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clan_list_.InternalSwap(&other->clan_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSearchClan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckJoinClan::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckJoinClan_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckJoinClan_default_instance_._instance.get_mutable()->clan_player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckJoinClan::_Internal {
 public:
  static const ::NFMsg::Ident& clan_id(const ReqAckJoinClan* msg);
  static const ::NFMsg::Ident& clan_player_id(const ReqAckJoinClan* msg);
};

const ::NFMsg::Ident&
ReqAckJoinClan::_Internal::clan_id(const ReqAckJoinClan* msg) {
  return *msg->clan_id_;
}
const ::NFMsg::Ident&
ReqAckJoinClan::_Internal::clan_player_id(const ReqAckJoinClan* msg) {
  return *msg->clan_player_id_;
}
void ReqAckJoinClan::clear_clan_id() {
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
}
void ReqAckJoinClan::clear_clan_player_id() {
  if (GetArenaNoVirtual() == nullptr && clan_player_id_ != nullptr) {
    delete clan_player_id_;
  }
  clan_player_id_ = nullptr;
}
ReqAckJoinClan::ReqAckJoinClan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckJoinClan)
}
ReqAckJoinClan::ReqAckJoinClan(const ReqAckJoinClan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clan_player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clan_player_name().empty()) {
    clan_player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_player_name_);
  }
  if (from._internal_has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = nullptr;
  }
  if (from._internal_has_clan_player_id()) {
    clan_player_id_ = new ::NFMsg::Ident(*from.clan_player_id_);
  } else {
    clan_player_id_ = nullptr;
  }
  clan_player_bp_ = from.clan_player_bp_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckJoinClan)
}

void ReqAckJoinClan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckJoinClan_NFMsgShare_2eproto.base);
  clan_player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clan_player_bp_) -
      reinterpret_cast<char*>(&clan_id_)) + sizeof(clan_player_bp_));
}

ReqAckJoinClan::~ReqAckJoinClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckJoinClan)
  SharedDtor();
}

void ReqAckJoinClan::SharedDtor() {
  clan_player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clan_id_;
  if (this != internal_default_instance()) delete clan_player_id_;
}

void ReqAckJoinClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckJoinClan& ReqAckJoinClan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckJoinClan_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckJoinClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckJoinClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clan_player_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clan_player_id_ != nullptr) {
    delete clan_player_id_;
  }
  clan_player_id_ = nullptr;
  clan_player_bp_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckJoinClan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident clan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident clan_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes clan_player_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_clan_player_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 clan_player_bp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          clan_player_bp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckJoinClan::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckJoinClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::clan_id(this), target, stream);
  }

  // .NFMsg.Ident clan_player_id = 4;
  if (this->has_clan_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::clan_player_id(this), target, stream);
  }

  // bytes clan_player_name = 5;
  if (this->clan_player_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_clan_player_name(), target);
  }

  // int32 clan_player_bp = 6;
  if (this->clan_player_bp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_clan_player_bp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckJoinClan)
  return target;
}

size_t ReqAckJoinClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckJoinClan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clan_player_name = 5;
  if (this->clan_player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clan_player_name());
  }

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  // .NFMsg.Ident clan_player_id = 4;
  if (this->has_clan_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_player_id_);
  }

  // int32 clan_player_bp = 6;
  if (this->clan_player_bp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clan_player_bp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckJoinClan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckJoinClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinClan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckJoinClan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckJoinClan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckJoinClan)
    MergeFrom(*source);
  }
}

void ReqAckJoinClan::MergeFrom(const ReqAckJoinClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckJoinClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clan_player_name().size() > 0) {

    clan_player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clan_player_name_);
  }
  if (from.has_clan_id()) {
    _internal_mutable_clan_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_id());
  }
  if (from.has_clan_player_id()) {
    _internal_mutable_clan_player_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_player_id());
  }
  if (from.clan_player_bp() != 0) {
    _internal_set_clan_player_bp(from._internal_clan_player_bp());
  }
}

void ReqAckJoinClan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckJoinClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinClan::CopyFrom(const ReqAckJoinClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckJoinClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinClan::IsInitialized() const {
  return true;
}

void ReqAckJoinClan::InternalSwap(ReqAckJoinClan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clan_player_name_.Swap(&other->clan_player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clan_id_, other->clan_id_);
  swap(clan_player_id_, other->clan_player_id_);
  swap(clan_player_bp_, other->clan_player_bp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckJoinClan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckLeaveClan::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckLeaveClan_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckLeaveClan_default_instance_._instance.get_mutable()->clan_player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckLeaveClan::_Internal {
 public:
  static const ::NFMsg::Ident& clan_id(const ReqAckLeaveClan* msg);
  static const ::NFMsg::Ident& clan_player_id(const ReqAckLeaveClan* msg);
};

const ::NFMsg::Ident&
ReqAckLeaveClan::_Internal::clan_id(const ReqAckLeaveClan* msg) {
  return *msg->clan_id_;
}
const ::NFMsg::Ident&
ReqAckLeaveClan::_Internal::clan_player_id(const ReqAckLeaveClan* msg) {
  return *msg->clan_player_id_;
}
void ReqAckLeaveClan::clear_clan_id() {
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
}
void ReqAckLeaveClan::clear_clan_player_id() {
  if (GetArenaNoVirtual() == nullptr && clan_player_id_ != nullptr) {
    delete clan_player_id_;
  }
  clan_player_id_ = nullptr;
}
ReqAckLeaveClan::ReqAckLeaveClan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckLeaveClan)
}
ReqAckLeaveClan::ReqAckLeaveClan(const ReqAckLeaveClan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = nullptr;
  }
  if (from._internal_has_clan_player_id()) {
    clan_player_id_ = new ::NFMsg::Ident(*from.clan_player_id_);
  } else {
    clan_player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckLeaveClan)
}

void ReqAckLeaveClan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckLeaveClan_NFMsgShare_2eproto.base);
  ::memset(&clan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clan_player_id_) -
      reinterpret_cast<char*>(&clan_id_)) + sizeof(clan_player_id_));
}

ReqAckLeaveClan::~ReqAckLeaveClan() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckLeaveClan)
  SharedDtor();
}

void ReqAckLeaveClan::SharedDtor() {
  if (this != internal_default_instance()) delete clan_id_;
  if (this != internal_default_instance()) delete clan_player_id_;
}

void ReqAckLeaveClan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckLeaveClan& ReqAckLeaveClan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckLeaveClan_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckLeaveClan::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckLeaveClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clan_player_id_ != nullptr) {
    delete clan_player_id_;
  }
  clan_player_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckLeaveClan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident clan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident clan_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckLeaveClan::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckLeaveClan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::clan_id(this), target, stream);
  }

  // .NFMsg.Ident clan_player_id = 2;
  if (this->has_clan_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::clan_player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckLeaveClan)
  return target;
}

size_t ReqAckLeaveClan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckLeaveClan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  // .NFMsg.Ident clan_player_id = 2;
  if (this->has_clan_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLeaveClan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckLeaveClan)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLeaveClan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckLeaveClan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckLeaveClan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckLeaveClan)
    MergeFrom(*source);
  }
}

void ReqAckLeaveClan::MergeFrom(const ReqAckLeaveClan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckLeaveClan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clan_id()) {
    _internal_mutable_clan_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_id());
  }
  if (from.has_clan_player_id()) {
    _internal_mutable_clan_player_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_player_id());
  }
}

void ReqAckLeaveClan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckLeaveClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveClan::CopyFrom(const ReqAckLeaveClan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckLeaveClan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveClan::IsInitialized() const {
  return true;
}

void ReqAckLeaveClan::InternalSwap(ReqAckLeaveClan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(clan_id_, other->clan_id_);
  swap(clan_player_id_, other->clan_player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckLeaveClan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckOprClanMember::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckOprClanMember_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprClanMember_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprClanMember_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckOprClanMember::_Internal {
 public:
  static const ::NFMsg::Ident& clan_id(const ReqAckOprClanMember* msg);
  static const ::NFMsg::Ident& player_id(const ReqAckOprClanMember* msg);
  static const ::NFMsg::Ident& member_id(const ReqAckOprClanMember* msg);
};

const ::NFMsg::Ident&
ReqAckOprClanMember::_Internal::clan_id(const ReqAckOprClanMember* msg) {
  return *msg->clan_id_;
}
const ::NFMsg::Ident&
ReqAckOprClanMember::_Internal::player_id(const ReqAckOprClanMember* msg) {
  return *msg->player_id_;
}
const ::NFMsg::Ident&
ReqAckOprClanMember::_Internal::member_id(const ReqAckOprClanMember* msg) {
  return *msg->member_id_;
}
void ReqAckOprClanMember::clear_clan_id() {
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
}
void ReqAckOprClanMember::clear_player_id() {
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ReqAckOprClanMember::clear_member_id() {
  if (GetArenaNoVirtual() == nullptr && member_id_ != nullptr) {
    delete member_id_;
  }
  member_id_ = nullptr;
}
ReqAckOprClanMember::ReqAckOprClanMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckOprClanMember)
}
ReqAckOprClanMember::ReqAckOprClanMember(const ReqAckOprClanMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = nullptr;
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_member_id()) {
    member_id_ = new ::NFMsg::Ident(*from.member_id_);
  } else {
    member_id_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckOprClanMember)
}

void ReqAckOprClanMember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckOprClanMember_NFMsgShare_2eproto.base);
  ::memset(&clan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&clan_id_)) + sizeof(type_));
}

ReqAckOprClanMember::~ReqAckOprClanMember() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckOprClanMember)
  SharedDtor();
}

void ReqAckOprClanMember::SharedDtor() {
  if (this != internal_default_instance()) delete clan_id_;
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete member_id_;
}

void ReqAckOprClanMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckOprClanMember& ReqAckOprClanMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckOprClanMember_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckOprClanMember::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckOprClanMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && member_id_ != nullptr) {
    delete member_id_;
  }
  member_id_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckOprClanMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident clan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident member_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_member_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::NFMsg::ReqAckOprClanMember_EGClanMemberOprType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckOprClanMember::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckOprClanMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::clan_id(this), target, stream);
  }

  // .NFMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player_id(this), target, stream);
  }

  // .NFMsg.Ident member_id = 3;
  if (this->has_member_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::member_id(this), target, stream);
  }

  // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckOprClanMember)
  return target;
}

size_t ReqAckOprClanMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckOprClanMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  // .NFMsg.Ident player_id = 2;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .NFMsg.Ident member_id = 3;
  if (this->has_member_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  // .NFMsg.ReqAckOprClanMember.EGClanMemberOprType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckOprClanMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckOprClanMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprClanMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckOprClanMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckOprClanMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckOprClanMember)
    MergeFrom(*source);
  }
}

void ReqAckOprClanMember::MergeFrom(const ReqAckOprClanMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckOprClanMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clan_id()) {
    _internal_mutable_clan_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_member_id()) {
    _internal_mutable_member_id()->::NFMsg::Ident::MergeFrom(from._internal_member_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ReqAckOprClanMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckOprClanMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprClanMember::CopyFrom(const ReqAckOprClanMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckOprClanMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprClanMember::IsInitialized() const {
  return true;
}

void ReqAckOprClanMember::InternalSwap(ReqAckOprClanMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(clan_id_, other->clan_id_);
  swap(player_id_, other->player_id_);
  swap(member_id_, other->member_id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckOprClanMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqEnterClanEctype::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterClanEctype_default_instance_._instance.get_mutable()->clan_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqEnterClanEctype::_Internal {
 public:
  static const ::NFMsg::Ident& clan_id(const ReqEnterClanEctype* msg);
};

const ::NFMsg::Ident&
ReqEnterClanEctype::_Internal::clan_id(const ReqEnterClanEctype* msg) {
  return *msg->clan_id_;
}
void ReqEnterClanEctype::clear_clan_id() {
  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
}
ReqEnterClanEctype::ReqEnterClanEctype()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterClanEctype)
}
ReqEnterClanEctype::ReqEnterClanEctype(const ReqEnterClanEctype& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_clan_id()) {
    clan_id_ = new ::NFMsg::Ident(*from.clan_id_);
  } else {
    clan_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterClanEctype)
}

void ReqEnterClanEctype::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqEnterClanEctype_NFMsgShare_2eproto.base);
  clan_id_ = nullptr;
}

ReqEnterClanEctype::~ReqEnterClanEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterClanEctype)
  SharedDtor();
}

void ReqEnterClanEctype::SharedDtor() {
  if (this != internal_default_instance()) delete clan_id_;
}

void ReqEnterClanEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqEnterClanEctype& ReqEnterClanEctype::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqEnterClanEctype_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqEnterClanEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterClanEctype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && clan_id_ != nullptr) {
    delete clan_id_;
  }
  clan_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqEnterClanEctype::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident clan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clan_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEnterClanEctype::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterClanEctype)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::clan_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterClanEctype)
  return target;
}

size_t ReqEnterClanEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterClanEctype)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident clan_id = 1;
  if (this->has_clan_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clan_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterClanEctype::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterClanEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterClanEctype* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEnterClanEctype>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterClanEctype)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterClanEctype)
    MergeFrom(*source);
  }
}

void ReqEnterClanEctype::MergeFrom(const ReqEnterClanEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterClanEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clan_id()) {
    _internal_mutable_clan_id()->::NFMsg::Ident::MergeFrom(from._internal_clan_id());
  }
}

void ReqEnterClanEctype::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterClanEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterClanEctype::CopyFrom(const ReqEnterClanEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterClanEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterClanEctype::IsInitialized() const {
  return true;
}

void ReqEnterClanEctype::InternalSwap(ReqEnterClanEctype* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(clan_id_, other->clan_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEnterClanEctype::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSetFightHero::InitAsDefaultInstance() {
  ::NFMsg::_ReqSetFightHero_default_instance_._instance.get_mutable()->heroid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqSetFightHero::_Internal {
 public:
  static const ::NFMsg::Ident& heroid(const ReqSetFightHero* msg);
};

const ::NFMsg::Ident&
ReqSetFightHero::_Internal::heroid(const ReqSetFightHero* msg) {
  return *msg->heroid_;
}
void ReqSetFightHero::clear_heroid() {
  if (GetArenaNoVirtual() == nullptr && heroid_ != nullptr) {
    delete heroid_;
  }
  heroid_ = nullptr;
}
ReqSetFightHero::ReqSetFightHero()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSetFightHero)
}
ReqSetFightHero::ReqSetFightHero(const ReqSetFightHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_heroid()) {
    heroid_ = new ::NFMsg::Ident(*from.heroid_);
  } else {
    heroid_ = nullptr;
  }
  set_ = from.set_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSetFightHero)
}

void ReqSetFightHero::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSetFightHero_NFMsgShare_2eproto.base);
  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(set_));
}

ReqSetFightHero::~ReqSetFightHero() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSetFightHero)
  SharedDtor();
}

void ReqSetFightHero::SharedDtor() {
  if (this != internal_default_instance()) delete heroid_;
}

void ReqSetFightHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSetFightHero& ReqSetFightHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSetFightHero_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqSetFightHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSetFightHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && heroid_ != nullptr) {
    delete heroid_;
  }
  heroid_ = nullptr;
  set_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqSetFightHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident Heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heroid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSetFightHero::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSetFightHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::heroid(this), target, stream);
  }

  // int32 Set = 2;
  if (this->set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSetFightHero)
  return target;
}

size_t ReqSetFightHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSetFightHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heroid_);
  }

  // int32 Set = 2;
  if (this->set() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_set());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetFightHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetFightHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSetFightHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSetFightHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSetFightHero)
    MergeFrom(*source);
  }
}

void ReqSetFightHero::MergeFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_heroid()) {
    _internal_mutable_heroid()->::NFMsg::Ident::MergeFrom(from._internal_heroid());
  }
  if (from.set() != 0) {
    _internal_set_set(from._internal_set());
  }
}

void ReqSetFightHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetFightHero::CopyFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetFightHero::IsInitialized() const {
  return true;
}

void ReqSetFightHero::InternalSwap(ReqSetFightHero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(heroid_, other->heroid_);
  swap(set_, other->set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSetFightHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSwitchFightHero::InitAsDefaultInstance() {
  ::NFMsg::_ReqSwitchFightHero_default_instance_._instance.get_mutable()->heroid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqSwitchFightHero::_Internal {
 public:
  static const ::NFMsg::Ident& heroid(const ReqSwitchFightHero* msg);
};

const ::NFMsg::Ident&
ReqSwitchFightHero::_Internal::heroid(const ReqSwitchFightHero* msg) {
  return *msg->heroid_;
}
void ReqSwitchFightHero::clear_heroid() {
  if (GetArenaNoVirtual() == nullptr && heroid_ != nullptr) {
    delete heroid_;
  }
  heroid_ = nullptr;
}
ReqSwitchFightHero::ReqSwitchFightHero()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSwitchFightHero)
}
ReqSwitchFightHero::ReqSwitchFightHero(const ReqSwitchFightHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_heroid()) {
    heroid_ = new ::NFMsg::Ident(*from.heroid_);
  } else {
    heroid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSwitchFightHero)
}

void ReqSwitchFightHero::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSwitchFightHero_NFMsgShare_2eproto.base);
  heroid_ = nullptr;
}

ReqSwitchFightHero::~ReqSwitchFightHero() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSwitchFightHero)
  SharedDtor();
}

void ReqSwitchFightHero::SharedDtor() {
  if (this != internal_default_instance()) delete heroid_;
}

void ReqSwitchFightHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSwitchFightHero& ReqSwitchFightHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSwitchFightHero_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqSwitchFightHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSwitchFightHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && heroid_ != nullptr) {
    delete heroid_;
  }
  heroid_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqSwitchFightHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident Heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heroid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSwitchFightHero::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSwitchFightHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::heroid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSwitchFightHero)
  return target;
}

size_t ReqSwitchFightHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSwitchFightHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident Heroid = 1;
  if (this->has_heroid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heroid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwitchFightHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSwitchFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchFightHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSwitchFightHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSwitchFightHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSwitchFightHero)
    MergeFrom(*source);
  }
}

void ReqSwitchFightHero::MergeFrom(const ReqSwitchFightHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSwitchFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_heroid()) {
    _internal_mutable_heroid()->::NFMsg::Ident::MergeFrom(from._internal_heroid());
  }
}

void ReqSwitchFightHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSwitchFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchFightHero::CopyFrom(const ReqSwitchFightHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSwitchFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchFightHero::IsInitialized() const {
  return true;
}

void ReqSwitchFightHero::InternalSwap(ReqSwitchFightHero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(heroid_, other->heroid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSwitchFightHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqBuyItemFromShop::InitAsDefaultInstance() {
}
class ReqBuyItemFromShop::_Internal {
 public:
};

ReqBuyItemFromShop::ReqBuyItemFromShop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqBuyItemFromShop)
}
ReqBuyItemFromShop::ReqBuyItemFromShop(const ReqBuyItemFromShop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_itemid().empty()) {
    itemid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.itemid_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqBuyItemFromShop)
}

void ReqBuyItemFromShop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqBuyItemFromShop_NFMsgShare_2eproto.base);
  itemid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

ReqBuyItemFromShop::~ReqBuyItemFromShop() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqBuyItemFromShop)
  SharedDtor();
}

void ReqBuyItemFromShop::SharedDtor() {
  itemid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqBuyItemFromShop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqBuyItemFromShop& ReqBuyItemFromShop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqBuyItemFromShop_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqBuyItemFromShop::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqBuyItemFromShop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqBuyItemFromShop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes itemID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_itemid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBuyItemFromShop::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqBuyItemFromShop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes itemID = 1;
  if (this->itemid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_itemid(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqBuyItemFromShop)
  return target;
}

size_t ReqBuyItemFromShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqBuyItemFromShop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes itemID = 1;
  if (this->itemid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_itemid());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBuyItemFromShop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqBuyItemFromShop)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBuyItemFromShop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBuyItemFromShop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqBuyItemFromShop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqBuyItemFromShop)
    MergeFrom(*source);
  }
}

void ReqBuyItemFromShop::MergeFrom(const ReqBuyItemFromShop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqBuyItemFromShop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemid().size() > 0) {

    itemid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.itemid_);
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ReqBuyItemFromShop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqBuyItemFromShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyItemFromShop::CopyFrom(const ReqBuyItemFromShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqBuyItemFromShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyItemFromShop::IsInitialized() const {
  return true;
}

void ReqBuyItemFromShop::InternalSwap(ReqBuyItemFromShop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  itemid_.Swap(&other->itemid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBuyItemFromShop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PVPPlayerInfo::InitAsDefaultInstance() {
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->hero_id1_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->hero_id2_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PVPPlayerInfo_default_instance_._instance.get_mutable()->hero_id3_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class PVPPlayerInfo::_Internal {
 public:
  static const ::NFMsg::Ident& id(const PVPPlayerInfo* msg);
  static const ::NFMsg::Ident& hero_id1(const PVPPlayerInfo* msg);
  static const ::NFMsg::Ident& hero_id2(const PVPPlayerInfo* msg);
  static const ::NFMsg::Ident& hero_id3(const PVPPlayerInfo* msg);
};

const ::NFMsg::Ident&
PVPPlayerInfo::_Internal::id(const PVPPlayerInfo* msg) {
  return *msg->id_;
}
const ::NFMsg::Ident&
PVPPlayerInfo::_Internal::hero_id1(const PVPPlayerInfo* msg) {
  return *msg->hero_id1_;
}
const ::NFMsg::Ident&
PVPPlayerInfo::_Internal::hero_id2(const PVPPlayerInfo* msg) {
  return *msg->hero_id2_;
}
const ::NFMsg::Ident&
PVPPlayerInfo::_Internal::hero_id3(const PVPPlayerInfo* msg) {
  return *msg->hero_id3_;
}
void PVPPlayerInfo::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void PVPPlayerInfo::clear_hero_id1() {
  if (GetArenaNoVirtual() == nullptr && hero_id1_ != nullptr) {
    delete hero_id1_;
  }
  hero_id1_ = nullptr;
}
void PVPPlayerInfo::clear_hero_id2() {
  if (GetArenaNoVirtual() == nullptr && hero_id2_ != nullptr) {
    delete hero_id2_;
  }
  hero_id2_ = nullptr;
}
void PVPPlayerInfo::clear_hero_id3() {
  if (GetArenaNoVirtual() == nullptr && hero_id3_ != nullptr) {
    delete hero_id3_;
  }
  hero_id3_ = nullptr;
}
PVPPlayerInfo::PVPPlayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PVPPlayerInfo)
}
PVPPlayerInfo::PVPPlayerInfo(const PVPPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head().empty()) {
    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  hero_cnf1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hero_cnf1().empty()) {
    hero_cnf1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_cnf1_);
  }
  hero_cnf2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hero_cnf2().empty()) {
    hero_cnf2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_cnf2_);
  }
  hero_cnf3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hero_cnf3().empty()) {
    hero_cnf3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_cnf3_);
  }
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_hero_id1()) {
    hero_id1_ = new ::NFMsg::Ident(*from.hero_id1_);
  } else {
    hero_id1_ = nullptr;
  }
  if (from._internal_has_hero_id2()) {
    hero_id2_ = new ::NFMsg::Ident(*from.hero_id2_);
  } else {
    hero_id2_ = nullptr;
  }
  if (from._internal_has_hero_id3()) {
    hero_id3_ = new ::NFMsg::Ident(*from.hero_id3_);
  } else {
    hero_id3_ = nullptr;
  }
  ::memcpy(&battle_mode_, &from.battle_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_star3_) -
    reinterpret_cast<char*>(&battle_mode_)) + sizeof(hero_star3_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PVPPlayerInfo)
}

void PVPPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PVPPlayerInfo_NFMsgShare_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_star3_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hero_star3_));
}

PVPPlayerInfo::~PVPPlayerInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PVPPlayerInfo)
  SharedDtor();
}

void PVPPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete hero_id1_;
  if (this != internal_default_instance()) delete hero_id2_;
  if (this != internal_default_instance()) delete hero_id3_;
}

void PVPPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PVPPlayerInfo& PVPPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PVPPlayerInfo_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void PVPPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PVPPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  head_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_cnf3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hero_id1_ != nullptr) {
    delete hero_id1_;
  }
  hero_id1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hero_id2_ != nullptr) {
    delete hero_id2_;
  }
  hero_id2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hero_id3_ != nullptr) {
    delete hero_id3_;
  }
  hero_id3_ = nullptr;
  ::memset(&battle_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_star3_) -
      reinterpret_cast<char*>(&battle_mode_)) + sizeof(hero_star3_));
  _internal_metadata_.Clear();
}

const char* PVPPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.EBattleType battle_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_battle_mode(static_cast<::NFMsg::EBattleType>(val));
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battle_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          battle_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes head = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_head(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 diamond = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hero_cnf1 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_hero_cnf1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hero_cnf2 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_hero_cnf2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hero_cnf3 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_hero_cnf3(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hero_star1 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          hero_star1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hero_star2 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          hero_star2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hero_star3 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          hero_star3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident hero_id1 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_id1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident hero_id2 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_id2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident hero_id3 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_id3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PVPPlayerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PVPPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  // .NFMsg.EBattleType battle_mode = 2;
  if (this->battle_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_battle_mode(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // int32 battle_point = 5;
  if (this->battle_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_battle_point(), target);
  }

  // bytes name = 6;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_name(), target);
  }

  // bytes head = 7;
  if (this->head().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_head(), target);
  }

  // int32 gold = 8;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_gold(), target);
  }

  // int32 diamond = 9;
  if (this->diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_diamond(), target);
  }

  // bytes hero_cnf1 = 20;
  if (this->hero_cnf1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_hero_cnf1(), target);
  }

  // bytes hero_cnf2 = 21;
  if (this->hero_cnf2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_hero_cnf2(), target);
  }

  // bytes hero_cnf3 = 22;
  if (this->hero_cnf3().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_hero_cnf3(), target);
  }

  // int32 hero_star1 = 25;
  if (this->hero_star1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_hero_star1(), target);
  }

  // int32 hero_star2 = 26;
  if (this->hero_star2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_hero_star2(), target);
  }

  // int32 hero_star3 = 27;
  if (this->hero_star3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_hero_star3(), target);
  }

  // .NFMsg.Ident hero_id1 = 28;
  if (this->has_hero_id1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, _Internal::hero_id1(this), target, stream);
  }

  // .NFMsg.Ident hero_id2 = 29;
  if (this->has_hero_id2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::hero_id2(this), target, stream);
  }

  // .NFMsg.Ident hero_id3 = 30;
  if (this->has_hero_id3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, _Internal::hero_id3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PVPPlayerInfo)
  return target;
}

size_t PVPPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PVPPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes head = 7;
  if (this->head().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_head());
  }

  // bytes hero_cnf1 = 20;
  if (this->hero_cnf1().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hero_cnf1());
  }

  // bytes hero_cnf2 = 21;
  if (this->hero_cnf2().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hero_cnf2());
  }

  // bytes hero_cnf3 = 22;
  if (this->hero_cnf3().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hero_cnf3());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .NFMsg.Ident hero_id1 = 28;
  if (this->has_hero_id1()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hero_id1_);
  }

  // .NFMsg.Ident hero_id2 = 29;
  if (this->has_hero_id2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hero_id2_);
  }

  // .NFMsg.Ident hero_id3 = 30;
  if (this->has_hero_id3()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hero_id3_);
  }

  // .NFMsg.EBattleType battle_mode = 2;
  if (this->battle_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_battle_mode());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 battle_point = 5;
  if (this->battle_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battle_point());
  }

  // int32 gold = 8;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // int32 diamond = 9;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_diamond());
  }

  // int32 hero_star1 = 25;
  if (this->hero_star1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hero_star1());
  }

  // int32 hero_star2 = 26;
  if (this->hero_star2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hero_star2());
  }

  // int32 hero_star3 = 27;
  if (this->hero_star3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hero_star3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PVPPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PVPPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PVPPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PVPPlayerInfo)
    MergeFrom(*source);
  }
}

void PVPPlayerInfo::MergeFrom(const PVPPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PVPPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.head().size() > 0) {

    head_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  if (from.hero_cnf1().size() > 0) {

    hero_cnf1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_cnf1_);
  }
  if (from.hero_cnf2().size() > 0) {

    hero_cnf2_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_cnf2_);
  }
  if (from.hero_cnf3().size() > 0) {

    hero_cnf3_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_cnf3_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.has_hero_id1()) {
    _internal_mutable_hero_id1()->::NFMsg::Ident::MergeFrom(from._internal_hero_id1());
  }
  if (from.has_hero_id2()) {
    _internal_mutable_hero_id2()->::NFMsg::Ident::MergeFrom(from._internal_hero_id2());
  }
  if (from.has_hero_id3()) {
    _internal_mutable_hero_id3()->::NFMsg::Ident::MergeFrom(from._internal_hero_id3());
  }
  if (from.battle_mode() != 0) {
    _internal_set_battle_mode(from._internal_battle_mode());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.battle_point() != 0) {
    _internal_set_battle_point(from._internal_battle_point());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.diamond() != 0) {
    _internal_set_diamond(from._internal_diamond());
  }
  if (from.hero_star1() != 0) {
    _internal_set_hero_star1(from._internal_hero_star1());
  }
  if (from.hero_star2() != 0) {
    _internal_set_hero_star2(from._internal_hero_star2());
  }
  if (from.hero_star3() != 0) {
    _internal_set_hero_star3(from._internal_hero_star3());
  }
}

void PVPPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PVPPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPPlayerInfo::CopyFrom(const PVPPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PVPPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPPlayerInfo::IsInitialized() const {
  return true;
}

void PVPPlayerInfo::InternalSwap(PVPPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  head_.Swap(&other->head_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_cnf1_.Swap(&other->hero_cnf1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_cnf2_.Swap(&other->hero_cnf2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_cnf3_.Swap(&other->hero_cnf3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(hero_id1_, other->hero_id1_);
  swap(hero_id2_, other->hero_id2_);
  swap(hero_id3_, other->hero_id3_);
  swap(battle_mode_, other->battle_mode_);
  swap(level_, other->level_);
  swap(battle_point_, other->battle_point_);
  swap(gold_, other->gold_);
  swap(diamond_, other->diamond_);
  swap(hero_star1_, other->hero_star1_);
  swap(hero_star2_, other->hero_star2_);
  swap(hero_star3_, other->hero_star3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PVPPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSearchOppnent::InitAsDefaultInstance() {
}
class ReqSearchOppnent::_Internal {
 public:
};

void ReqSearchOppnent::clear_friends() {
  friends_.Clear();
}
ReqSearchOppnent::ReqSearchOppnent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSearchOppnent)
}
ReqSearchOppnent::ReqSearchOppnent(const ReqSearchOppnent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&self_scene_, &from.self_scene_,
    static_cast<size_t>(reinterpret_cast<char*>(&battle_mode_) -
    reinterpret_cast<char*>(&self_scene_)) + sizeof(battle_mode_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSearchOppnent)
}

void ReqSearchOppnent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSearchOppnent_NFMsgShare_2eproto.base);
  ::memset(&self_scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_mode_) -
      reinterpret_cast<char*>(&self_scene_)) + sizeof(battle_mode_));
}

ReqSearchOppnent::~ReqSearchOppnent() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSearchOppnent)
  SharedDtor();
}

void ReqSearchOppnent::SharedDtor() {
}

void ReqSearchOppnent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSearchOppnent& ReqSearchOppnent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSearchOppnent_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSearchOppnent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  ::memset(&self_scene_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_mode_) -
      reinterpret_cast<char*>(&self_scene_)) + sizeof(battle_mode_));
  _internal_metadata_.Clear();
}

const char* ReqSearchOppnent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 self_scene = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          self_scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 diamond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battle_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          battle_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.EBattleType battle_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_battle_mode(static_cast<::NFMsg::EBattleType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Ident friends = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSearchOppnent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSearchOppnent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 self_scene = 1;
  if (this->self_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_self_scene(), target);
  }

  // int32 diamond = 2;
  if (this->diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_diamond(), target);
  }

  // int32 battle_point = 3;
  if (this->battle_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_battle_point(), target);
  }

  // .NFMsg.EBattleType battle_mode = 4;
  if (this->battle_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_battle_mode(), target);
  }

  // repeated .NFMsg.Ident friends = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSearchOppnent)
  return target;
}

size_t ReqSearchOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSearchOppnent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident friends = 10;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 self_scene = 1;
  if (this->self_scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_self_scene());
  }

  // int32 diamond = 2;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_diamond());
  }

  // int32 battle_point = 3;
  if (this->battle_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battle_point());
  }

  // .NFMsg.EBattleType battle_mode = 4;
  if (this->battle_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_battle_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSearchOppnent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchOppnent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSearchOppnent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSearchOppnent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSearchOppnent)
    MergeFrom(*source);
  }
}

void ReqSearchOppnent::MergeFrom(const ReqSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.self_scene() != 0) {
    _internal_set_self_scene(from._internal_self_scene());
  }
  if (from.diamond() != 0) {
    _internal_set_diamond(from._internal_diamond());
  }
  if (from.battle_point() != 0) {
    _internal_set_battle_point(from._internal_battle_point());
  }
  if (from.battle_mode() != 0) {
    _internal_set_battle_mode(from._internal_battle_mode());
  }
}

void ReqSearchOppnent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchOppnent::CopyFrom(const ReqSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchOppnent::IsInitialized() const {
  return true;
}

void ReqSearchOppnent::InternalSwap(ReqSearchOppnent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
  swap(self_scene_, other->self_scene_);
  swap(diamond_, other->diamond_);
  swap(battle_point_, other->battle_point_);
  swap(battle_mode_, other->battle_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSearchOppnent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckSearchOppnent::InitAsDefaultInstance() {
  ::NFMsg::_AckSearchOppnent_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckSearchOppnent_default_instance_._instance.get_mutable()->opponent_ = const_cast< ::NFMsg::PVPPlayerInfo*>(
      ::NFMsg::PVPPlayerInfo::internal_default_instance());
}
class AckSearchOppnent::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const AckSearchOppnent* msg);
  static const ::NFMsg::PVPPlayerInfo& opponent(const AckSearchOppnent* msg);
};

const ::NFMsg::Ident&
AckSearchOppnent::_Internal::team_id(const AckSearchOppnent* msg) {
  return *msg->team_id_;
}
const ::NFMsg::PVPPlayerInfo&
AckSearchOppnent::_Internal::opponent(const AckSearchOppnent* msg) {
  return *msg->opponent_;
}
void AckSearchOppnent::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
void AckSearchOppnent::clear_team_members() {
  team_members_.Clear();
}
AckSearchOppnent::AckSearchOppnent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchOppnent)
}
AckSearchOppnent::AckSearchOppnent(const AckSearchOppnent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      team_members_(from.team_members_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  if (from._internal_has_opponent()) {
    opponent_ = new ::NFMsg::PVPPlayerInfo(*from.opponent_);
  } else {
    opponent_ = nullptr;
  }
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamble_diamond_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(gamble_diamond_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchOppnent)
}

void AckSearchOppnent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckSearchOppnent_NFMsgShare_2eproto.base);
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamble_diamond_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(gamble_diamond_));
}

AckSearchOppnent::~AckSearchOppnent() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchOppnent)
  SharedDtor();
}

void AckSearchOppnent::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete opponent_;
}

void AckSearchOppnent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckSearchOppnent& AckSearchOppnent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckSearchOppnent_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchOppnent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_members_.Clear();
  buildings_.Clear();
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && opponent_ != nullptr) {
    delete opponent_;
  }
  opponent_ = nullptr;
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamble_diamond_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(gamble_diamond_));
  _internal_metadata_.Clear();
}

const char* AckSearchOppnent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gamble_diamond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gamble_diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Ident team_members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .NFMsg.PVPPlayerInfo opponent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_opponent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSearchOppnent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchOppnent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_scene_id(), target);
  }

  // .NFMsg.Ident team_id = 2;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::team_id(this), target, stream);
  }

  // int32 gamble_diamond = 3;
  if (this->gamble_diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gamble_diamond(), target);
  }

  // repeated .NFMsg.Ident team_members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_team_members(i), target, stream);
  }

  // .NFMsg.PVPPlayerInfo opponent = 14;
  if (this->has_opponent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::opponent(this), target, stream);
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(20, this->_internal_buildings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchOppnent)
  return target;
}

size_t AckSearchOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchOppnent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident team_members = 5;
  total_size += 1UL * this->_internal_team_members_size();
  for (const auto& msg : this->team_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.ReqAddSceneBuilding buildings = 20;
  total_size += 2UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident team_id = 2;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.PVPPlayerInfo opponent = 14;
  if (this->has_opponent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opponent_);
  }

  // int32 scene_id = 1;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  // int32 gamble_diamond = 3;
  if (this->gamble_diamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamble_diamond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchOppnent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchOppnent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSearchOppnent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchOppnent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchOppnent)
    MergeFrom(*source);
  }
}

void AckSearchOppnent::MergeFrom(const AckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_members_.MergeFrom(from.team_members_);
  buildings_.MergeFrom(from.buildings_);
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
  if (from.has_opponent()) {
    _internal_mutable_opponent()->::NFMsg::PVPPlayerInfo::MergeFrom(from._internal_opponent());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.gamble_diamond() != 0) {
    _internal_set_gamble_diamond(from._internal_gamble_diamond());
  }
}

void AckSearchOppnent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchOppnent::CopyFrom(const AckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchOppnent::IsInitialized() const {
  return true;
}

void AckSearchOppnent::InternalSwap(AckSearchOppnent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  team_members_.InternalSwap(&other->team_members_);
  buildings_.InternalSwap(&other->buildings_);
  swap(team_id_, other->team_id_);
  swap(opponent_, other->opponent_);
  swap(scene_id_, other->scene_id_);
  swap(gamble_diamond_, other->gamble_diamond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSearchOppnent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckCancelSearch::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckCancelSearch_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckCancelSearch::_Internal {
 public:
  static const ::NFMsg::Ident& selfid(const ReqAckCancelSearch* msg);
};

const ::NFMsg::Ident&
ReqAckCancelSearch::_Internal::selfid(const ReqAckCancelSearch* msg) {
  return *msg->selfid_;
}
void ReqAckCancelSearch::clear_selfid() {
  if (GetArenaNoVirtual() == nullptr && selfid_ != nullptr) {
    delete selfid_;
  }
  selfid_ = nullptr;
}
ReqAckCancelSearch::ReqAckCancelSearch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckCancelSearch)
}
ReqAckCancelSearch::ReqAckCancelSearch(const ReqAckCancelSearch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckCancelSearch)
}

void ReqAckCancelSearch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckCancelSearch_NFMsgShare_2eproto.base);
  selfid_ = nullptr;
}

ReqAckCancelSearch::~ReqAckCancelSearch() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckCancelSearch)
  SharedDtor();
}

void ReqAckCancelSearch::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void ReqAckCancelSearch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckCancelSearch& ReqAckCancelSearch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckCancelSearch_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckCancelSearch::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckCancelSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && selfid_ != nullptr) {
    delete selfid_;
  }
  selfid_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckCancelSearch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident selfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckCancelSearch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckCancelSearch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::selfid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckCancelSearch)
  return target;
}

size_t ReqAckCancelSearch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckCancelSearch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckCancelSearch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckCancelSearch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCancelSearch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckCancelSearch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckCancelSearch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckCancelSearch)
    MergeFrom(*source);
  }
}

void ReqAckCancelSearch::MergeFrom(const ReqAckCancelSearch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckCancelSearch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    _internal_mutable_selfid()->::NFMsg::Ident::MergeFrom(from._internal_selfid());
  }
}

void ReqAckCancelSearch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckCancelSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCancelSearch::CopyFrom(const ReqAckCancelSearch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckCancelSearch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCancelSearch::IsInitialized() const {
  return true;
}

void ReqAckCancelSearch::InternalSwap(ReqAckCancelSearch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selfid_, other->selfid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckCancelSearch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqEndBattle::InitAsDefaultInstance() {
}
class ReqEndBattle::_Internal {
 public:
};

ReqEndBattle::ReqEndBattle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEndBattle)
}
ReqEndBattle::ReqEndBattle(const ReqEndBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auto_end_ = from.auto_end_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEndBattle)
}

void ReqEndBattle::SharedCtor() {
  auto_end_ = 0;
}

ReqEndBattle::~ReqEndBattle() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEndBattle)
  SharedDtor();
}

void ReqEndBattle::SharedDtor() {
}

void ReqEndBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqEndBattle& ReqEndBattle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqEndBattle_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEndBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auto_end_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqEndBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 auto_end = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auto_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEndBattle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEndBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 auto_end = 1;
  if (this->auto_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_auto_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEndBattle)
  return target;
}

size_t ReqEndBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEndBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 auto_end = 1;
  if (this->auto_end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_auto_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEndBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEndBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEndBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEndBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEndBattle)
    MergeFrom(*source);
  }
}

void ReqEndBattle::MergeFrom(const ReqEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auto_end() != 0) {
    _internal_set_auto_end(from._internal_auto_end());
  }
}

void ReqEndBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEndBattle::CopyFrom(const ReqEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEndBattle::IsInitialized() const {
  return true;
}

void ReqEndBattle::InternalSwap(ReqEndBattle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(auto_end_, other->auto_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEndBattle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckEndBattle::InitAsDefaultInstance() {
  ::NFMsg::_AckEndBattle_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckEndBattle_default_instance_._instance.get_mutable()->match_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class AckEndBattle::_Internal {
 public:
  static const ::NFMsg::Ident& team_id(const AckEndBattle* msg);
  static const ::NFMsg::Ident& match_id(const AckEndBattle* msg);
};

const ::NFMsg::Ident&
AckEndBattle::_Internal::team_id(const AckEndBattle* msg) {
  return *msg->team_id_;
}
const ::NFMsg::Ident&
AckEndBattle::_Internal::match_id(const AckEndBattle* msg) {
  return *msg->match_id_;
}
void AckEndBattle::clear_team_id() {
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
}
void AckEndBattle::clear_match_id() {
  if (GetArenaNoVirtual() == nullptr && match_id_ != nullptr) {
    delete match_id_;
  }
  match_id_ = nullptr;
}
void AckEndBattle::clear_members() {
  members_.Clear();
}
AckEndBattle::AckEndBattle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckEndBattle)
}
AckEndBattle::AckEndBattle(const AckEndBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      members_(from.members_),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = nullptr;
  }
  if (from._internal_has_match_id()) {
    match_id_ = new ::NFMsg::Ident(*from.match_id_);
  } else {
    match_id_ = nullptr;
  }
  ::memcpy(&win_, &from.win_,
    static_cast<size_t>(reinterpret_cast<char*>(&battle_mode_) -
    reinterpret_cast<char*>(&win_)) + sizeof(battle_mode_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckEndBattle)
}

void AckEndBattle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckEndBattle_NFMsgShare_2eproto.base);
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_mode_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(battle_mode_));
}

AckEndBattle::~AckEndBattle() {
  // @@protoc_insertion_point(destructor:NFMsg.AckEndBattle)
  SharedDtor();
}

void AckEndBattle::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete match_id_;
}

void AckEndBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckEndBattle& AckEndBattle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckEndBattle_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckEndBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  item_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && team_id_ != nullptr) {
    delete team_id_;
  }
  team_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && match_id_ != nullptr) {
    delete match_id_;
  }
  match_id_ = nullptr;
  ::memset(&win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battle_mode_) -
      reinterpret_cast<char*>(&win_)) + sizeof(battle_mode_));
  _internal_metadata_.Clear();
}

const char* AckEndBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 win = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 star = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 diamond = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.EBattleType battle_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_battle_mode(static_cast<::NFMsg::EBattleType>(val));
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident team_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident match_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.Ident members = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.ItemStruct item_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckEndBattle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckEndBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 win = 1;
  if (this->win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_win(), target);
  }

  // int32 star = 2;
  if (this->star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_star(), target);
  }

  // int32 gold = 3;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gold(), target);
  }

  // int32 cup = 4;
  if (this->cup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cup(), target);
  }

  // int32 diamond = 5;
  if (this->diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_diamond(), target);
  }

  // .NFMsg.EBattleType battle_mode = 6;
  if (this->battle_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_battle_mode(), target);
  }

  // .NFMsg.Ident team_id = 7;
  if (this->has_team_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::team_id(this), target, stream);
  }

  // .NFMsg.Ident match_id = 8;
  if (this->has_match_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::match_id(this), target, stream);
  }

  // repeated .NFMsg.Ident members = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(9, this->_internal_members(i), target, stream);
  }

  // repeated .NFMsg.ItemStruct item_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(10, this->_internal_item_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckEndBattle)
  return target;
}

size_t AckEndBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckEndBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident members = 9;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.ItemStruct item_list = 10;
  total_size += 1UL * this->_internal_item_list_size();
  for (const auto& msg : this->item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident team_id = 7;
  if (this->has_team_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  // .NFMsg.Ident match_id = 8;
  if (this->has_match_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *match_id_);
  }

  // int32 win = 1;
  if (this->win() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win());
  }

  // int32 star = 2;
  if (this->star() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_star());
  }

  // int32 gold = 3;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gold());
  }

  // int32 cup = 4;
  if (this->cup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cup());
  }

  // int32 diamond = 5;
  if (this->diamond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_diamond());
  }

  // .NFMsg.EBattleType battle_mode = 6;
  if (this->battle_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_battle_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEndBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEndBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckEndBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckEndBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckEndBattle)
    MergeFrom(*source);
  }
}

void AckEndBattle::MergeFrom(const AckEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  item_list_.MergeFrom(from.item_list_);
  if (from.has_team_id()) {
    _internal_mutable_team_id()->::NFMsg::Ident::MergeFrom(from._internal_team_id());
  }
  if (from.has_match_id()) {
    _internal_mutable_match_id()->::NFMsg::Ident::MergeFrom(from._internal_match_id());
  }
  if (from.win() != 0) {
    _internal_set_win(from._internal_win());
  }
  if (from.star() != 0) {
    _internal_set_star(from._internal_star());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.cup() != 0) {
    _internal_set_cup(from._internal_cup());
  }
  if (from.diamond() != 0) {
    _internal_set_diamond(from._internal_diamond());
  }
  if (from.battle_mode() != 0) {
    _internal_set_battle_mode(from._internal_battle_mode());
  }
}

void AckEndBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEndBattle::CopyFrom(const AckEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEndBattle::IsInitialized() const {
  return true;
}

void AckEndBattle::InternalSwap(AckEndBattle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  item_list_.InternalSwap(&other->item_list_);
  swap(team_id_, other->team_id_);
  swap(match_id_, other->match_id_);
  swap(win_, other->win_);
  swap(star_, other->star_);
  swap(gold_, other->gold_);
  swap(cup_, other->cup_);
  swap(diamond_, other->diamond_);
  swap(battle_mode_, other->battle_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckEndBattle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSendMail::InitAsDefaultInstance() {
  ::NFMsg::_ReqSendMail_default_instance_._instance.get_mutable()->reciever_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqSendMail::_Internal {
 public:
  static const ::NFMsg::Ident& reciever(const ReqSendMail* msg);
};

const ::NFMsg::Ident&
ReqSendMail::_Internal::reciever(const ReqSendMail* msg) {
  return *msg->reciever_;
}
void ReqSendMail::clear_reciever() {
  if (GetArenaNoVirtual() == nullptr && reciever_ != nullptr) {
    delete reciever_;
  }
  reciever_ = nullptr;
}
ReqSendMail::ReqSendMail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSendMail)
}
ReqSendMail::ReqSendMail(const ReqSendMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      item_list_(from.item_list_),
      currency_list_(from.currency_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_reciever()) {
    reciever_ = new ::NFMsg::Ident(*from.reciever_);
  } else {
    reciever_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSendMail)
}

void ReqSendMail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSendMail_NFMsgShare_2eproto.base);
  reciever_ = nullptr;
}

ReqSendMail::~ReqSendMail() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSendMail)
  SharedDtor();
}

void ReqSendMail::SharedDtor() {
  if (this != internal_default_instance()) delete reciever_;
}

void ReqSendMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSendMail& ReqSendMail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSendMail_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqSendMail::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSendMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  currency_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && reciever_ != nullptr) {
    delete reciever_;
  }
  reciever_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqSendMail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident reciever = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reciever(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.ItemStruct item_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.CurrencyStruct currency_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_currency_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSendMail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSendMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident reciever = 1;
  if (this->has_reciever()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::reciever(this), target, stream);
  }

  // repeated .NFMsg.ItemStruct item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_item_list(i), target, stream);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_currency_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_currency_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSendMail)
  return target;
}

size_t ReqSendMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSendMail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ItemStruct item_list = 2;
  total_size += 1UL * this->_internal_item_list_size();
  for (const auto& msg : this->item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  total_size += 1UL * this->_internal_currency_list_size();
  for (const auto& msg : this->currency_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.Ident reciever = 1;
  if (this->has_reciever()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reciever_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSendMail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSendMail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSendMail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSendMail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSendMail)
    MergeFrom(*source);
  }
}

void ReqSendMail::MergeFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  currency_list_.MergeFrom(from.currency_list_);
  if (from.has_reciever()) {
    _internal_mutable_reciever()->::NFMsg::Ident::MergeFrom(from._internal_reciever());
  }
}

void ReqSendMail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendMail::CopyFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendMail::IsInitialized() const {
  return true;
}

void ReqSendMail::InternalSwap(ReqSendMail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  item_list_.InternalSwap(&other->item_list_);
  currency_list_.InternalSwap(&other->currency_list_);
  swap(reciever_, other->reciever_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSendMail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqSwitchServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->client_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqSwitchServer::_Internal {
 public:
  static const ::NFMsg::Ident& selfid(const ReqSwitchServer* msg);
  static const ::NFMsg::Ident& client_id(const ReqSwitchServer* msg);
};

const ::NFMsg::Ident&
ReqSwitchServer::_Internal::selfid(const ReqSwitchServer* msg) {
  return *msg->selfid_;
}
const ::NFMsg::Ident&
ReqSwitchServer::_Internal::client_id(const ReqSwitchServer* msg) {
  return *msg->client_id_;
}
void ReqSwitchServer::clear_selfid() {
  if (GetArenaNoVirtual() == nullptr && selfid_ != nullptr) {
    delete selfid_;
  }
  selfid_ = nullptr;
}
void ReqSwitchServer::clear_client_id() {
  if (GetArenaNoVirtual() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
}
ReqSwitchServer::ReqSwitchServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSwitchServer)
}
ReqSwitchServer::ReqSwitchServer(const ReqSwitchServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = nullptr;
  }
  if (from._internal_has_client_id()) {
    client_id_ = new ::NFMsg::Ident(*from.client_id_);
  } else {
    client_id_ = nullptr;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSwitchServer)
}

void ReqSwitchServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqSwitchServer_NFMsgShare_2eproto.base);
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(groupid_));
}

ReqSwitchServer::~ReqSwitchServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSwitchServer)
  SharedDtor();
}

void ReqSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete client_id_;
}

void ReqSwitchServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqSwitchServer& ReqSwitchServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqSwitchServer_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSwitchServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && selfid_ != nullptr) {
    delete selfid_;
  }
  selfid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && client_id_ != nullptr) {
    delete client_id_;
  }
  client_id_ = nullptr;
  ::memset(&self_serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  _internal_metadata_.Clear();
}

const char* ReqSwitchServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident selfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_serverid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_serverid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gate_serverid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gate_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 SceneID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident client_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 groupID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSwitchServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSwitchServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::selfid(this), target, stream);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_serverid(), target);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_target_serverid(), target);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gate_serverid(), target);
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_sceneid(), target);
  }

  // .NFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::client_id(this), target, stream);
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_groupid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSwitchServer)
  return target;
}

size_t ReqSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSwitchServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // .NFMsg.Ident client_id = 6;
  if (this->has_client_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_serverid());
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_serverid());
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gate_serverid());
  }

  // int64 SceneID = 5;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sceneid());
  }

  // int64 groupID = 7;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwitchServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSwitchServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSwitchServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSwitchServer)
    MergeFrom(*source);
  }
}

void ReqSwitchServer::MergeFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    _internal_mutable_selfid()->::NFMsg::Ident::MergeFrom(from._internal_selfid());
  }
  if (from.has_client_id()) {
    _internal_mutable_client_id()->::NFMsg::Ident::MergeFrom(from._internal_client_id());
  }
  if (from.self_serverid() != 0) {
    _internal_set_self_serverid(from._internal_self_serverid());
  }
  if (from.target_serverid() != 0) {
    _internal_set_target_serverid(from._internal_target_serverid());
  }
  if (from.gate_serverid() != 0) {
    _internal_set_gate_serverid(from._internal_gate_serverid());
  }
  if (from.sceneid() != 0) {
    _internal_set_sceneid(from._internal_sceneid());
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void ReqSwitchServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchServer::CopyFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchServer::IsInitialized() const {
  return true;
}

void ReqSwitchServer::InternalSwap(ReqSwitchServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selfid_, other->selfid_);
  swap(client_id_, other->client_id_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
  swap(sceneid_, other->sceneid_);
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSwitchServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckSwitchServer::InitAsDefaultInstance() {
  ::NFMsg::_AckSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class AckSwitchServer::_Internal {
 public:
  static const ::NFMsg::Ident& selfid(const AckSwitchServer* msg);
};

const ::NFMsg::Ident&
AckSwitchServer::_Internal::selfid(const AckSwitchServer* msg) {
  return *msg->selfid_;
}
void AckSwitchServer::clear_selfid() {
  if (GetArenaNoVirtual() == nullptr && selfid_ != nullptr) {
    delete selfid_;
  }
  selfid_ = nullptr;
}
AckSwitchServer::AckSwitchServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSwitchServer)
}
AckSwitchServer::AckSwitchServer(const AckSwitchServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = nullptr;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_serverid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSwitchServer)
}

void AckSwitchServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckSwitchServer_NFMsgShare_2eproto.base);
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_serverid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(gate_serverid_));
}

AckSwitchServer::~AckSwitchServer() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSwitchServer)
  SharedDtor();
}

void AckSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void AckSwitchServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckSwitchServer& AckSwitchServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckSwitchServer_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSwitchServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && selfid_ != nullptr) {
    delete selfid_;
  }
  selfid_ = nullptr;
  ::memset(&self_serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_serverid_) -
      reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  _internal_metadata_.Clear();
}

const char* AckSwitchServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident selfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 self_serverid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 target_serverid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gate_serverid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gate_serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSwitchServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSwitchServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::selfid(this), target, stream);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_self_serverid(), target);
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_target_serverid(), target);
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_gate_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSwitchServer)
  return target;
}

size_t AckSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSwitchServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident selfid = 1;
  if (this->has_selfid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  // int64 self_serverid = 2;
  if (this->self_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_self_serverid());
  }

  // int64 target_serverid = 3;
  if (this->target_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_serverid());
  }

  // int64 gate_serverid = 4;
  if (this->gate_serverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gate_serverid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwitchServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwitchServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSwitchServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSwitchServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSwitchServer)
    MergeFrom(*source);
  }
}

void AckSwitchServer::MergeFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selfid()) {
    _internal_mutable_selfid()->::NFMsg::Ident::MergeFrom(from._internal_selfid());
  }
  if (from.self_serverid() != 0) {
    _internal_set_self_serverid(from._internal_self_serverid());
  }
  if (from.target_serverid() != 0) {
    _internal_set_target_serverid(from._internal_target_serverid());
  }
  if (from.gate_serverid() != 0) {
    _internal_set_gate_serverid(from._internal_gate_serverid());
  }
}

void AckSwitchServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchServer::CopyFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchServer::IsInitialized() const {
  return true;
}

void AckSwitchServer::InternalSwap(AckSwitchServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(selfid_, other->selfid_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSwitchServer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFMsg::ReqEnterGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqEnterGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEnterGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage< ::NFMsg::ReqAckEnterGameSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckEnterGameSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqHeartBeat* Arena::CreateMaybeMessage< ::NFMsg::ReqHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqLeaveGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PlayerEntryInfo* Arena::CreateMaybeMessage< ::NFMsg::PlayerEntryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PlayerEntryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckPlayerEntryList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerEntryList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerEntryList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerLeaveList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerLeaveList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckSynData* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSynData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSynData >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckPlayerMove* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerMove >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerChat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerPosSync >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerPosSync >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::EffectData* Arena::CreateMaybeMessage< ::NFMsg::EffectData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::EffectData >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckUseSkill* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUseSkill >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUseSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckUseItem* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckSwapScene* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSwapScene >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSwapScene >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckHomeScene* Arena::CreateMaybeMessage< ::NFMsg::ReqAckHomeScene >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckHomeScene >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ItemStruct* Arena::CreateMaybeMessage< ::NFMsg::ItemStruct >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ItemStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::CurrencyStruct* Arena::CreateMaybeMessage< ::NFMsg::CurrencyStruct >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::CurrencyStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckReliveHero* Arena::CreateMaybeMessage< ::NFMsg::ReqAckReliveHero >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckReliveHero >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqPickDropItem* Arena::CreateMaybeMessage< ::NFMsg::ReqPickDropItem >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqPickDropItem >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAcceptTask* Arena::CreateMaybeMessage< ::NFMsg::ReqAcceptTask >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAcceptTask >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqCompeleteTask* Arena::CreateMaybeMessage< ::NFMsg::ReqCompeleteTask >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqCompeleteTask >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAddSceneBuilding* Arena::CreateMaybeMessage< ::NFMsg::ReqAddSceneBuilding >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAddSceneBuilding >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqSceneBuildings* Arena::CreateMaybeMessage< ::NFMsg::ReqSceneBuildings >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSceneBuildings >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckSceneBuildings* Arena::CreateMaybeMessage< ::NFMsg::AckSceneBuildings >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSceneBuildings >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqStoreSceneBuildings* Arena::CreateMaybeMessage< ::NFMsg::ReqStoreSceneBuildings >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqStoreSceneBuildings >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckCreateClan* Arena::CreateMaybeMessage< ::NFMsg::ReqAckCreateClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckCreateClan >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqSearchClan* Arena::CreateMaybeMessage< ::NFMsg::ReqSearchClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSearchClan >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckSearchClan_SearchClanObject* Arena::CreateMaybeMessage< ::NFMsg::AckSearchClan_SearchClanObject >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchClan_SearchClanObject >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckSearchClan* Arena::CreateMaybeMessage< ::NFMsg::AckSearchClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchClan >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckJoinClan* Arena::CreateMaybeMessage< ::NFMsg::ReqAckJoinClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckJoinClan >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckLeaveClan* Arena::CreateMaybeMessage< ::NFMsg::ReqAckLeaveClan >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckLeaveClan >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckOprClanMember* Arena::CreateMaybeMessage< ::NFMsg::ReqAckOprClanMember >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckOprClanMember >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqEnterClanEctype* Arena::CreateMaybeMessage< ::NFMsg::ReqEnterClanEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEnterClanEctype >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqSetFightHero* Arena::CreateMaybeMessage< ::NFMsg::ReqSetFightHero >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSetFightHero >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqSwitchFightHero* Arena::CreateMaybeMessage< ::NFMsg::ReqSwitchFightHero >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSwitchFightHero >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqBuyItemFromShop* Arena::CreateMaybeMessage< ::NFMsg::ReqBuyItemFromShop >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqBuyItemFromShop >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PVPPlayerInfo* Arena::CreateMaybeMessage< ::NFMsg::PVPPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PVPPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqSearchOppnent* Arena::CreateMaybeMessage< ::NFMsg::ReqSearchOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSearchOppnent >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckSearchOppnent* Arena::CreateMaybeMessage< ::NFMsg::AckSearchOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchOppnent >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckCancelSearch* Arena::CreateMaybeMessage< ::NFMsg::ReqAckCancelSearch >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckCancelSearch >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqEndBattle* Arena::CreateMaybeMessage< ::NFMsg::ReqEndBattle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEndBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckEndBattle* Arena::CreateMaybeMessage< ::NFMsg::AckEndBattle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckEndBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqSendMail* Arena::CreateMaybeMessage< ::NFMsg::ReqSendMail >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSendMail >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqSwitchServer* Arena::CreateMaybeMessage< ::NFMsg::ReqSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSwitchServer >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckSwitchServer* Arena::CreateMaybeMessage< ::NFMsg::AckSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSwitchServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
