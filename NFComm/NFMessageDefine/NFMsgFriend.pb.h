// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgFriend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NFMsgFriend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NFMsgFriend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NFMsgBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NFMsgFriend_2eproto LIBPROTOC_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct_NFMsgFriend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern LIBPROTOC_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgFriend_2eproto;
namespace NFMsg {
class FriendData;
class FriendDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern FriendDataDefaultTypeInternal _FriendData_default_instance_;
class ReqAckAcceptInvite;
class ReqAckAcceptInviteDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckAcceptInviteDefaultTypeInternal _ReqAckAcceptInvite_default_instance_;
class ReqAckBlockPlayer;
class ReqAckBlockPlayerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckBlockPlayerDefaultTypeInternal _ReqAckBlockPlayer_default_instance_;
class ReqAckDeleteFriend;
class ReqAckDeleteFriendDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckDeleteFriendDefaultTypeInternal _ReqAckDeleteFriend_default_instance_;
class ReqAckFriendList;
class ReqAckFriendListDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckFriendListDefaultTypeInternal _ReqAckFriendList_default_instance_;
class ReqAckIgnoreInvite;
class ReqAckIgnoreInviteDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckIgnoreInviteDefaultTypeInternal _ReqAckIgnoreInvite_default_instance_;
class ReqAckRejectInvite;
class ReqAckRejectInviteDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckRejectInviteDefaultTypeInternal _ReqAckRejectInvite_default_instance_;
class ReqAckSendInvite;
class ReqAckSendInviteDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckSendInviteDefaultTypeInternal _ReqAckSendInvite_default_instance_;
class ReqAckUnBlockPlayer;
class ReqAckUnBlockPlayerDefaultTypeInternal;
LIBPROTOC_EXPORT extern ReqAckUnBlockPlayerDefaultTypeInternal _ReqAckUnBlockPlayer_default_instance_;
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> LIBPROTOC_EXPORT ::NFMsg::FriendData* Arena::CreateMaybeMessage<::NFMsg::FriendData>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckAcceptInvite* Arena::CreateMaybeMessage<::NFMsg::ReqAckAcceptInvite>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckBlockPlayer* Arena::CreateMaybeMessage<::NFMsg::ReqAckBlockPlayer>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckDeleteFriend* Arena::CreateMaybeMessage<::NFMsg::ReqAckDeleteFriend>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckFriendList* Arena::CreateMaybeMessage<::NFMsg::ReqAckFriendList>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckIgnoreInvite* Arena::CreateMaybeMessage<::NFMsg::ReqAckIgnoreInvite>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckRejectInvite* Arena::CreateMaybeMessage<::NFMsg::ReqAckRejectInvite>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckSendInvite* Arena::CreateMaybeMessage<::NFMsg::ReqAckSendInvite>(Arena*);
template<> LIBPROTOC_EXPORT ::NFMsg::ReqAckUnBlockPlayer* Arena::CreateMaybeMessage<::NFMsg::ReqAckUnBlockPlayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFMsg {

// ===================================================================

class LIBPROTOC_EXPORT FriendData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.FriendData) */ {
 public:
  FriendData();
  virtual ~FriendData();

  FriendData(const FriendData& from);
  FriendData(FriendData&& from) noexcept
    : FriendData() {
    *this = ::std::move(from);
  }

  inline FriendData& operator=(const FriendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendData& operator=(FriendData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendData* internal_default_instance() {
    return reinterpret_cast<const FriendData*>(
               &_FriendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FriendData& a, FriendData& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendData* New() const final {
    return CreateMaybeMessage<FriendData>(nullptr);
  }

  FriendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendData& from);
  void MergeFrom(const FriendData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.FriendData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.FriendData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckFriendList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckFriendList) */ {
 public:
  ReqAckFriendList();
  virtual ~ReqAckFriendList();

  ReqAckFriendList(const ReqAckFriendList& from);
  ReqAckFriendList(ReqAckFriendList&& from) noexcept
    : ReqAckFriendList() {
    *this = ::std::move(from);
  }

  inline ReqAckFriendList& operator=(const ReqAckFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckFriendList& operator=(ReqAckFriendList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckFriendList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckFriendList* internal_default_instance() {
    return reinterpret_cast<const ReqAckFriendList*>(
               &_ReqAckFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqAckFriendList& a, ReqAckFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckFriendList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckFriendList* New() const final {
    return CreateMaybeMessage<ReqAckFriendList>(nullptr);
  }

  ReqAckFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckFriendList& from);
  void MergeFrom(const ReqAckFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckFriendList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteListFieldNumber = 1,
    kFriendListFieldNumber = 2,
  };
  // repeated .NFMsg.FriendData inviteList = 1;
  int invitelist_size() const;
  private:
  int _internal_invitelist_size() const;
  public:
  void clear_invitelist();
  ::NFMsg::FriendData* mutable_invitelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >*
      mutable_invitelist();
  private:
  const ::NFMsg::FriendData& _internal_invitelist(int index) const;
  ::NFMsg::FriendData* _internal_add_invitelist();
  public:
  const ::NFMsg::FriendData& invitelist(int index) const;
  ::NFMsg::FriendData* add_invitelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >&
      invitelist() const;

  // repeated .NFMsg.FriendData friendList = 2;
  int friendlist_size() const;
  private:
  int _internal_friendlist_size() const;
  public:
  void clear_friendlist();
  ::NFMsg::FriendData* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >*
      mutable_friendlist();
  private:
  const ::NFMsg::FriendData& _internal_friendlist(int index) const;
  ::NFMsg::FriendData* _internal_add_friendlist();
  public:
  const ::NFMsg::FriendData& friendlist(int index) const;
  ::NFMsg::FriendData* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >&
      friendlist() const;

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckFriendList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData > invitelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData > friendlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckDeleteFriend :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckDeleteFriend) */ {
 public:
  ReqAckDeleteFriend();
  virtual ~ReqAckDeleteFriend();

  ReqAckDeleteFriend(const ReqAckDeleteFriend& from);
  ReqAckDeleteFriend(ReqAckDeleteFriend&& from) noexcept
    : ReqAckDeleteFriend() {
    *this = ::std::move(from);
  }

  inline ReqAckDeleteFriend& operator=(const ReqAckDeleteFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckDeleteFriend& operator=(ReqAckDeleteFriend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckDeleteFriend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckDeleteFriend* internal_default_instance() {
    return reinterpret_cast<const ReqAckDeleteFriend*>(
               &_ReqAckDeleteFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqAckDeleteFriend& a, ReqAckDeleteFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckDeleteFriend* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckDeleteFriend* New() const final {
    return CreateMaybeMessage<ReqAckDeleteFriend>(nullptr);
  }

  ReqAckDeleteFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckDeleteFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckDeleteFriend& from);
  void MergeFrom(const ReqAckDeleteFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckDeleteFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckDeleteFriend";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckDeleteFriend)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSendInvite :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckSendInvite) */ {
 public:
  ReqAckSendInvite();
  virtual ~ReqAckSendInvite();

  ReqAckSendInvite(const ReqAckSendInvite& from);
  ReqAckSendInvite(ReqAckSendInvite&& from) noexcept
    : ReqAckSendInvite() {
    *this = ::std::move(from);
  }

  inline ReqAckSendInvite& operator=(const ReqAckSendInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckSendInvite& operator=(ReqAckSendInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckSendInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckSendInvite* internal_default_instance() {
    return reinterpret_cast<const ReqAckSendInvite*>(
               &_ReqAckSendInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqAckSendInvite& a, ReqAckSendInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckSendInvite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSendInvite* New() const final {
    return CreateMaybeMessage<ReqAckSendInvite>(nullptr);
  }

  ReqAckSendInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckSendInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckSendInvite& from);
  void MergeFrom(const ReqAckSendInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckSendInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckSendInvite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckSendInvite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckAcceptInvite :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckAcceptInvite) */ {
 public:
  ReqAckAcceptInvite();
  virtual ~ReqAckAcceptInvite();

  ReqAckAcceptInvite(const ReqAckAcceptInvite& from);
  ReqAckAcceptInvite(ReqAckAcceptInvite&& from) noexcept
    : ReqAckAcceptInvite() {
    *this = ::std::move(from);
  }

  inline ReqAckAcceptInvite& operator=(const ReqAckAcceptInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckAcceptInvite& operator=(ReqAckAcceptInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckAcceptInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckAcceptInvite* internal_default_instance() {
    return reinterpret_cast<const ReqAckAcceptInvite*>(
               &_ReqAckAcceptInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqAckAcceptInvite& a, ReqAckAcceptInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckAcceptInvite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckAcceptInvite* New() const final {
    return CreateMaybeMessage<ReqAckAcceptInvite>(nullptr);
  }

  ReqAckAcceptInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckAcceptInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckAcceptInvite& from);
  void MergeFrom(const ReqAckAcceptInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckAcceptInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckAcceptInvite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckAcceptInvite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckRejectInvite :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckRejectInvite) */ {
 public:
  ReqAckRejectInvite();
  virtual ~ReqAckRejectInvite();

  ReqAckRejectInvite(const ReqAckRejectInvite& from);
  ReqAckRejectInvite(ReqAckRejectInvite&& from) noexcept
    : ReqAckRejectInvite() {
    *this = ::std::move(from);
  }

  inline ReqAckRejectInvite& operator=(const ReqAckRejectInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckRejectInvite& operator=(ReqAckRejectInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckRejectInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckRejectInvite* internal_default_instance() {
    return reinterpret_cast<const ReqAckRejectInvite*>(
               &_ReqAckRejectInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqAckRejectInvite& a, ReqAckRejectInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckRejectInvite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckRejectInvite* New() const final {
    return CreateMaybeMessage<ReqAckRejectInvite>(nullptr);
  }

  ReqAckRejectInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckRejectInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckRejectInvite& from);
  void MergeFrom(const ReqAckRejectInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckRejectInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckRejectInvite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckRejectInvite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckIgnoreInvite :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckIgnoreInvite) */ {
 public:
  ReqAckIgnoreInvite();
  virtual ~ReqAckIgnoreInvite();

  ReqAckIgnoreInvite(const ReqAckIgnoreInvite& from);
  ReqAckIgnoreInvite(ReqAckIgnoreInvite&& from) noexcept
    : ReqAckIgnoreInvite() {
    *this = ::std::move(from);
  }

  inline ReqAckIgnoreInvite& operator=(const ReqAckIgnoreInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckIgnoreInvite& operator=(ReqAckIgnoreInvite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckIgnoreInvite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckIgnoreInvite* internal_default_instance() {
    return reinterpret_cast<const ReqAckIgnoreInvite*>(
               &_ReqAckIgnoreInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReqAckIgnoreInvite& a, ReqAckIgnoreInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckIgnoreInvite* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckIgnoreInvite* New() const final {
    return CreateMaybeMessage<ReqAckIgnoreInvite>(nullptr);
  }

  ReqAckIgnoreInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckIgnoreInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckIgnoreInvite& from);
  void MergeFrom(const ReqAckIgnoreInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckIgnoreInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckIgnoreInvite";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckIgnoreInvite)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckBlockPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckBlockPlayer) */ {
 public:
  ReqAckBlockPlayer();
  virtual ~ReqAckBlockPlayer();

  ReqAckBlockPlayer(const ReqAckBlockPlayer& from);
  ReqAckBlockPlayer(ReqAckBlockPlayer&& from) noexcept
    : ReqAckBlockPlayer() {
    *this = ::std::move(from);
  }

  inline ReqAckBlockPlayer& operator=(const ReqAckBlockPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckBlockPlayer& operator=(ReqAckBlockPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckBlockPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckBlockPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqAckBlockPlayer*>(
               &_ReqAckBlockPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReqAckBlockPlayer& a, ReqAckBlockPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckBlockPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckBlockPlayer* New() const final {
    return CreateMaybeMessage<ReqAckBlockPlayer>(nullptr);
  }

  ReqAckBlockPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckBlockPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckBlockPlayer& from);
  void MergeFrom(const ReqAckBlockPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckBlockPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckBlockPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckBlockPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckUnBlockPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckUnBlockPlayer) */ {
 public:
  ReqAckUnBlockPlayer();
  virtual ~ReqAckUnBlockPlayer();

  ReqAckUnBlockPlayer(const ReqAckUnBlockPlayer& from);
  ReqAckUnBlockPlayer(ReqAckUnBlockPlayer&& from) noexcept
    : ReqAckUnBlockPlayer() {
    *this = ::std::move(from);
  }

  inline ReqAckUnBlockPlayer& operator=(const ReqAckUnBlockPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckUnBlockPlayer& operator=(ReqAckUnBlockPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckUnBlockPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckUnBlockPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqAckUnBlockPlayer*>(
               &_ReqAckUnBlockPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqAckUnBlockPlayer& a, ReqAckUnBlockPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckUnBlockPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckUnBlockPlayer* New() const final {
    return CreateMaybeMessage<ReqAckUnBlockPlayer>(nullptr);
  }

  ReqAckUnBlockPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckUnBlockPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckUnBlockPlayer& from);
  void MergeFrom(const ReqAckUnBlockPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckUnBlockPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckUnBlockPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgFriend_2eproto);
    return ::descriptor_table_NFMsgFriend_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUnBlockPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgFriend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendData

// .NFMsg.Ident id = 1;
inline bool FriendData::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool FriendData::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& FriendData::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& FriendData::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.FriendData.id)
  return _internal_id();
}
inline ::NFMsg::Ident* FriendData::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.FriendData.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* FriendData::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* FriendData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.FriendData.id)
  return _internal_mutable_id();
}
inline void FriendData::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.FriendData.id)
}

// bytes name = 2;
inline void FriendData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FriendData::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.FriendData.name)
  return _internal_name();
}
inline void FriendData::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFMsg.FriendData.name)
}
inline std::string* FriendData::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFMsg.FriendData.name)
  return _internal_mutable_name();
}
inline const std::string& FriendData::_internal_name() const {
  return name_.GetNoArena();
}
inline void FriendData::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FriendData::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.FriendData.name)
}
inline void FriendData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.FriendData.name)
}
inline void FriendData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.FriendData.name)
}
inline std::string* FriendData::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FriendData::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.FriendData.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FriendData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.FriendData.name)
}

// -------------------------------------------------------------------

// ReqAckFriendList

// repeated .NFMsg.FriendData inviteList = 1;
inline int ReqAckFriendList::_internal_invitelist_size() const {
  return invitelist_.size();
}
inline int ReqAckFriendList::invitelist_size() const {
  return _internal_invitelist_size();
}
inline void ReqAckFriendList::clear_invitelist() {
  invitelist_.Clear();
}
inline ::NFMsg::FriendData* ReqAckFriendList::mutable_invitelist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckFriendList.inviteList)
  return invitelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >*
ReqAckFriendList::mutable_invitelist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckFriendList.inviteList)
  return &invitelist_;
}
inline const ::NFMsg::FriendData& ReqAckFriendList::_internal_invitelist(int index) const {
  return invitelist_.Get(index);
}
inline const ::NFMsg::FriendData& ReqAckFriendList::invitelist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckFriendList.inviteList)
  return _internal_invitelist(index);
}
inline ::NFMsg::FriendData* ReqAckFriendList::_internal_add_invitelist() {
  return invitelist_.Add();
}
inline ::NFMsg::FriendData* ReqAckFriendList::add_invitelist() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckFriendList.inviteList)
  return _internal_add_invitelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >&
ReqAckFriendList::invitelist() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckFriendList.inviteList)
  return invitelist_;
}

// repeated .NFMsg.FriendData friendList = 2;
inline int ReqAckFriendList::_internal_friendlist_size() const {
  return friendlist_.size();
}
inline int ReqAckFriendList::friendlist_size() const {
  return _internal_friendlist_size();
}
inline void ReqAckFriendList::clear_friendlist() {
  friendlist_.Clear();
}
inline ::NFMsg::FriendData* ReqAckFriendList::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckFriendList.friendList)
  return friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >*
ReqAckFriendList::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckFriendList.friendList)
  return &friendlist_;
}
inline const ::NFMsg::FriendData& ReqAckFriendList::_internal_friendlist(int index) const {
  return friendlist_.Get(index);
}
inline const ::NFMsg::FriendData& ReqAckFriendList::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckFriendList.friendList)
  return _internal_friendlist(index);
}
inline ::NFMsg::FriendData* ReqAckFriendList::_internal_add_friendlist() {
  return friendlist_.Add();
}
inline ::NFMsg::FriendData* ReqAckFriendList::add_friendlist() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckFriendList.friendList)
  return _internal_add_friendlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::FriendData >&
ReqAckFriendList::friendlist() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckFriendList.friendList)
  return friendlist_;
}

// -------------------------------------------------------------------

// ReqAckDeleteFriend

// .NFMsg.Ident id = 1;
inline bool ReqAckDeleteFriend::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqAckDeleteFriend::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqAckDeleteFriend::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckDeleteFriend::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckDeleteFriend.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqAckDeleteFriend::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckDeleteFriend.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckDeleteFriend::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqAckDeleteFriend::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckDeleteFriend.id)
  return _internal_mutable_id();
}
inline void ReqAckDeleteFriend::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckDeleteFriend.id)
}

// -------------------------------------------------------------------

// ReqAckSendInvite

// .NFMsg.Ident id = 1;
inline bool ReqAckSendInvite::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqAckSendInvite::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqAckSendInvite::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckSendInvite::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSendInvite.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqAckSendInvite::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckSendInvite.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckSendInvite::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqAckSendInvite::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSendInvite.id)
  return _internal_mutable_id();
}
inline void ReqAckSendInvite::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckSendInvite.id)
}

// bytes name = 2;
inline void ReqAckSendInvite::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckSendInvite::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSendInvite.name)
  return _internal_name();
}
inline void ReqAckSendInvite::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSendInvite.name)
}
inline std::string* ReqAckSendInvite::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSendInvite.name)
  return _internal_mutable_name();
}
inline const std::string& ReqAckSendInvite::_internal_name() const {
  return name_.GetNoArena();
}
inline void ReqAckSendInvite::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckSendInvite::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckSendInvite.name)
}
inline void ReqAckSendInvite::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckSendInvite.name)
}
inline void ReqAckSendInvite::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckSendInvite.name)
}
inline std::string* ReqAckSendInvite::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckSendInvite::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckSendInvite.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckSendInvite::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckSendInvite.name)
}

// -------------------------------------------------------------------

// ReqAckAcceptInvite

// .NFMsg.Ident id = 1;
inline bool ReqAckAcceptInvite::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqAckAcceptInvite::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqAckAcceptInvite::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckAcceptInvite::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckAcceptInvite.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqAckAcceptInvite::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckAcceptInvite.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckAcceptInvite::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqAckAcceptInvite::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckAcceptInvite.id)
  return _internal_mutable_id();
}
inline void ReqAckAcceptInvite::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckAcceptInvite.id)
}

// -------------------------------------------------------------------

// ReqAckRejectInvite

// .NFMsg.Ident id = 1;
inline bool ReqAckRejectInvite::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqAckRejectInvite::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqAckRejectInvite::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckRejectInvite::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckRejectInvite.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqAckRejectInvite::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckRejectInvite.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckRejectInvite::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqAckRejectInvite::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckRejectInvite.id)
  return _internal_mutable_id();
}
inline void ReqAckRejectInvite::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckRejectInvite.id)
}

// -------------------------------------------------------------------

// ReqAckIgnoreInvite

// .NFMsg.Ident id = 1;
inline bool ReqAckIgnoreInvite::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqAckIgnoreInvite::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqAckIgnoreInvite::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckIgnoreInvite::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckIgnoreInvite.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqAckIgnoreInvite::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckIgnoreInvite.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckIgnoreInvite::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqAckIgnoreInvite::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckIgnoreInvite.id)
  return _internal_mutable_id();
}
inline void ReqAckIgnoreInvite::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckIgnoreInvite.id)
}

// -------------------------------------------------------------------

// ReqAckBlockPlayer

// .NFMsg.Ident id = 1;
inline bool ReqAckBlockPlayer::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqAckBlockPlayer::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqAckBlockPlayer::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckBlockPlayer::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckBlockPlayer.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqAckBlockPlayer::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckBlockPlayer.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckBlockPlayer::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqAckBlockPlayer::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckBlockPlayer.id)
  return _internal_mutable_id();
}
inline void ReqAckBlockPlayer::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckBlockPlayer.id)
}

// -------------------------------------------------------------------

// ReqAckUnBlockPlayer

// .NFMsg.Ident id = 1;
inline bool ReqAckUnBlockPlayer::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqAckUnBlockPlayer::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqAckUnBlockPlayer::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckUnBlockPlayer::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUnBlockPlayer.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqAckUnBlockPlayer::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUnBlockPlayer.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckUnBlockPlayer::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqAckUnBlockPlayer::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUnBlockPlayer.id)
  return _internal_mutable_id();
}
inline void ReqAckUnBlockPlayer::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUnBlockPlayer.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NFMsgFriend_2eproto
