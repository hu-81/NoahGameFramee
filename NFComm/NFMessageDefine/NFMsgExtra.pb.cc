// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgExtra.proto

#include "NFMsgExtra.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NFMsgExtra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgExtra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgExtra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BigMapLeaveMsg_NFMsgExtra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgExtra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BigMapWarHistory_NFMsgExtra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgExtra_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridClanBaseInfo_NFMsgExtra_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFMsgBase_2eproto;
namespace NFMsg {
class ReqAIOnwerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAIOnwer> _instance;
} _ReqAIOnwer_default_instance_;
class GridClanBaseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridClanBaseInfo> _instance;
} _GridClanBaseInfo_default_instance_;
class ReqBigMapGridInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqBigMapGridInfo> _instance;
} _ReqBigMapGridInfo_default_instance_;
class BigMapGridBaseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigMapGridBaseInfo> _instance;
} _BigMapGridBaseInfo_default_instance_;
class BigMapLeaveMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigMapLeaveMsg> _instance;
} _BigMapLeaveMsg_default_instance_;
class BigMapWarHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigMapWarHistory> _instance;
} _BigMapWarHistory_default_instance_;
class BigMapGridDetailInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigMapGridDetailInfo> _instance;
} _BigMapGridDetailInfo_default_instance_;
class AckBigMapGridInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckBigMapGridInfo> _instance;
} _AckBigMapGridInfo_default_instance_;
class ReqBigMapInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqBigMapInfo> _instance;
} _ReqBigMapInfo_default_instance_;
class AckBigMapInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckBigMapInfo> _instance;
} _AckBigMapInfo_default_instance_;
class ReqHoldMapGridDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqHoldMapGrid> _instance;
} _ReqHoldMapGrid_default_instance_;
class AckHoldMapGridDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckHoldMapGrid> _instance;
} _AckHoldMapGrid_default_instance_;
class ReqLeaveMapMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqLeaveMapMsg> _instance;
} _ReqLeaveMapMsg_default_instance_;
class AckLeaveMapMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckLeaveMapMsg> _instance;
} _AckLeaveMapMsg_default_instance_;
class ReqGetMapAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqGetMapAward> _instance;
} _ReqGetMapAward_default_instance_;
class AckGetMapAwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckGetMapAward> _instance;
} _AckGetMapAward_default_instance_;
class ReqMapHuntingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqMapHunting> _instance;
} _ReqMapHunting_default_instance_;
class AckMapHuntingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckMapHunting> _instance;
} _AckMapHunting_default_instance_;
class ReqMapKingWarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqMapKingWar> _instance;
} _ReqMapKingWar_default_instance_;
class AckMapKingWarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckMapKingWar> _instance;
} _AckMapKingWar_default_instance_;
}  // namespace NFMsg
static void InitDefaultsscc_info_AckBigMapGridInfo_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckBigMapGridInfo_default_instance_;
    new (ptr) ::NFMsg::AckBigMapGridInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckBigMapGridInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckBigMapGridInfo_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckBigMapGridInfo_NFMsgExtra_2eproto}, {
      &scc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto.base,}};

static void InitDefaultsscc_info_AckBigMapInfo_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckBigMapInfo_default_instance_;
    new (ptr) ::NFMsg::AckBigMapInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckBigMapInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckBigMapInfo_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckBigMapInfo_NFMsgExtra_2eproto}, {
      &scc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto.base,}};

static void InitDefaultsscc_info_AckGetMapAward_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckGetMapAward_default_instance_;
    new (ptr) ::NFMsg::AckGetMapAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckGetMapAward::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckGetMapAward_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AckGetMapAward_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_AckHoldMapGrid_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckHoldMapGrid_default_instance_;
    new (ptr) ::NFMsg::AckHoldMapGrid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckHoldMapGrid::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckHoldMapGrid_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AckHoldMapGrid_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_AckLeaveMapMsg_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckLeaveMapMsg_default_instance_;
    new (ptr) ::NFMsg::AckLeaveMapMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckLeaveMapMsg::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckLeaveMapMsg_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AckLeaveMapMsg_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_AckMapHunting_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckMapHunting_default_instance_;
    new (ptr) ::NFMsg::AckMapHunting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckMapHunting::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckMapHunting_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AckMapHunting_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_AckMapKingWar_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckMapKingWar_default_instance_;
    new (ptr) ::NFMsg::AckMapKingWar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckMapKingWar::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckMapKingWar_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AckMapKingWar_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapGridBaseInfo_default_instance_;
    new (ptr) ::NFMsg::BigMapGridBaseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapGridBaseInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto}, {
      &scc_info_GridClanBaseInfo_NFMsgExtra_2eproto.base,
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapGridDetailInfo_default_instance_;
    new (ptr) ::NFMsg::BigMapGridDetailInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapGridDetailInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto}, {
      &scc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto.base,
      &scc_info_GridClanBaseInfo_NFMsgExtra_2eproto.base,
      &scc_info_BigMapLeaveMsg_NFMsgExtra_2eproto.base,
      &scc_info_BigMapWarHistory_NFMsgExtra_2eproto.base,}};

static void InitDefaultsscc_info_BigMapLeaveMsg_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapLeaveMsg_default_instance_;
    new (ptr) ::NFMsg::BigMapLeaveMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapLeaveMsg::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BigMapLeaveMsg_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BigMapLeaveMsg_NFMsgExtra_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_BigMapWarHistory_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapWarHistory_default_instance_;
    new (ptr) ::NFMsg::BigMapWarHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapWarHistory::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BigMapWarHistory_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BigMapWarHistory_NFMsgExtra_2eproto}, {
      &scc_info_GridClanBaseInfo_NFMsgExtra_2eproto.base,
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_GridClanBaseInfo_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_GridClanBaseInfo_default_instance_;
    new (ptr) ::NFMsg::GridClanBaseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::GridClanBaseInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridClanBaseInfo_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GridClanBaseInfo_NFMsgExtra_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAIOnwer_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAIOnwer_default_instance_;
    new (ptr) ::NFMsg::ReqAIOnwer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAIOnwer::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAIOnwer_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAIOnwer_NFMsgExtra_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqBigMapGridInfo_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqBigMapGridInfo_default_instance_;
    new (ptr) ::NFMsg::ReqBigMapGridInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqBigMapGridInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqBigMapGridInfo_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqBigMapGridInfo_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_ReqBigMapInfo_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqBigMapInfo_default_instance_;
    new (ptr) ::NFMsg::ReqBigMapInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqBigMapInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqBigMapInfo_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqBigMapInfo_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_ReqGetMapAward_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqGetMapAward_default_instance_;
    new (ptr) ::NFMsg::ReqGetMapAward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqGetMapAward::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqGetMapAward_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqGetMapAward_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_ReqHoldMapGrid_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqHoldMapGrid_default_instance_;
    new (ptr) ::NFMsg::ReqHoldMapGrid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHoldMapGrid::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqHoldMapGrid_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqHoldMapGrid_NFMsgExtra_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqLeaveMapMsg_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqLeaveMapMsg_default_instance_;
    new (ptr) ::NFMsg::ReqLeaveMapMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqLeaveMapMsg::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqLeaveMapMsg_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqLeaveMapMsg_NFMsgExtra_2eproto}, {
      &scc_info_BigMapLeaveMsg_NFMsgExtra_2eproto.base,}};

static void InitDefaultsscc_info_ReqMapHunting_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqMapHunting_default_instance_;
    new (ptr) ::NFMsg::ReqMapHunting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqMapHunting::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqMapHunting_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqMapHunting_NFMsgExtra_2eproto}, {}};

static void InitDefaultsscc_info_ReqMapKingWar_NFMsgExtra_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqMapKingWar_default_instance_;
    new (ptr) ::NFMsg::ReqMapKingWar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqMapKingWar::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqMapKingWar_NFMsgExtra_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqMapKingWar_NFMsgExtra_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NFMsgExtra_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_NFMsgExtra_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFMsgExtra_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFMsgExtra_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAIOnwer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAIOnwer, ai_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::GridClanBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::GridClanBaseInfo, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::GridClanBaseInfo, level_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::GridClanBaseInfo, count_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::GridClanBaseInfo, resource_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::GridClanBaseInfo, icon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqBigMapGridInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqBigMapGridInfo, map_title_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, guild_info_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, kingwar_time_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, kingwarrer_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, hurting_time_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, hurter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, owner_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, owner_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, msg_data_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, msg_time_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, owner_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapWarHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapWarHistory, red_info_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapWarHistory, blue_info_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapWarHistory, winner_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapWarHistory, war_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, grid_base_info_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, stay_guid_list_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, leave_msg_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, war_history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckBigMapGridInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckBigMapGridInfo, map_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqBigMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckBigMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckBigMapInfo, grid_base_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqHoldMapGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqHoldMapGrid, map_title_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqHoldMapGrid, guild_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckHoldMapGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqLeaveMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqLeaveMapMsg, map_title_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqLeaveMapMsg, leave_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckLeaveMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqGetMapAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqGetMapAward, map_title_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckGetMapAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqMapHunting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqMapHunting, map_title_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckMapHunting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqMapKingWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqMapKingWar, map_title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckMapKingWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckMapKingWar, map_title_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::ReqAIOnwer)},
  { 6, -1, sizeof(::NFMsg::GridClanBaseInfo)},
  { 16, -1, sizeof(::NFMsg::ReqBigMapGridInfo)},
  { 22, -1, sizeof(::NFMsg::BigMapGridBaseInfo)},
  { 33, -1, sizeof(::NFMsg::BigMapLeaveMsg)},
  { 43, -1, sizeof(::NFMsg::BigMapWarHistory)},
  { 52, -1, sizeof(::NFMsg::BigMapGridDetailInfo)},
  { 61, -1, sizeof(::NFMsg::AckBigMapGridInfo)},
  { 67, -1, sizeof(::NFMsg::ReqBigMapInfo)},
  { 72, -1, sizeof(::NFMsg::AckBigMapInfo)},
  { 78, -1, sizeof(::NFMsg::ReqHoldMapGrid)},
  { 85, -1, sizeof(::NFMsg::AckHoldMapGrid)},
  { 90, -1, sizeof(::NFMsg::ReqLeaveMapMsg)},
  { 97, -1, sizeof(::NFMsg::AckLeaveMapMsg)},
  { 102, -1, sizeof(::NFMsg::ReqGetMapAward)},
  { 108, -1, sizeof(::NFMsg::AckGetMapAward)},
  { 113, -1, sizeof(::NFMsg::ReqMapHunting)},
  { 119, -1, sizeof(::NFMsg::AckMapHunting)},
  { 124, -1, sizeof(::NFMsg::ReqMapKingWar)},
  { 130, -1, sizeof(::NFMsg::AckMapKingWar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAIOnwer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_GridClanBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqBigMapGridInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_BigMapGridBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_BigMapLeaveMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_BigMapWarHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_BigMapGridDetailInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckBigMapGridInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqBigMapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckBigMapInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqHoldMapGrid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckHoldMapGrid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqLeaveMapMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckLeaveMapMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqGetMapAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckGetMapAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqMapHunting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckMapHunting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqMapKingWar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckMapKingWar_default_instance_),
};

const char descriptor_table_protodef_NFMsgExtra_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020NFMsgExtra.proto\022\005NFMsg\032\017NFMsgBase.pro"
  "to\")\n\nReqAIOnwer\022\033\n\005ai_id\030\001 \001(\0132\014.NFMsg."
  "Ident\"j\n\020GridClanBaseInfo\022\030\n\002id\030\001 \001(\0132\014."
  "NFMsg.Ident\022\r\n\005level\030\002 \001(\005\022\r\n\005count\030\003 \001("
  "\005\022\020\n\010resource\030\004 \001(\005\022\014\n\004icon\030\005 \001(\014\")\n\021Req"
  "BigMapGridInfo\022\024\n\014map_title_id\030\001 \003(\014\"\271\001\n"
  "\022BigMapGridBaseInfo\022\n\n\002id\030\001 \001(\014\022+\n\nguild"
  "_info\030\002 \001(\0132\027.NFMsg.GridClanBaseInfo\022\024\n\014"
  "kingwar_time\030\n \001(\005\022 \n\nkingwarrer\030\013 \001(\0132\014"
  ".NFMsg.Ident\022\024\n\014hurting_time\030\024 \001(\005\022\034\n\006hu"
  "rter\030\025 \001(\0132\014.NFMsg.Ident\"z\n\016BigMapLeaveM"
  "sg\022\033\n\005owner\030\001 \001(\0132\014.NFMsg.Ident\022\022\n\nowner"
  "_name\030\002 \001(\014\022\020\n\010msg_data\030\003 \001(\014\022\020\n\010msg_tim"
  "e\030\004 \001(\005\022\023\n\013owner_level\030\005 \001(\005\"\234\001\n\020BigMapW"
  "arHistory\022)\n\010red_info\030\001 \001(\0132\027.NFMsg.Grid"
  "ClanBaseInfo\022*\n\tblue_info\030\002 \001(\0132\027.NFMsg."
  "GridClanBaseInfo\022\037\n\twinner_id\030\n \001(\0132\014.NF"
  "Msg.Ident\022\020\n\010war_time\030\013 \001(\005\"\322\001\n\024BigMapGr"
  "idDetailInfo\0221\n\016grid_base_info\030\001 \001(\0132\031.N"
  "FMsg.BigMapGridBaseInfo\022/\n\016stay_guid_lis"
  "t\030\002 \003(\0132\027.NFMsg.GridClanBaseInfo\022(\n\tleav"
  "e_msg\030\003 \003(\0132\025.NFMsg.BigMapLeaveMsg\022,\n\013wa"
  "r_history\030\004 \003(\0132\027.NFMsg.BigMapWarHistory"
  "\"B\n\021AckBigMapGridInfo\022-\n\010map_data\030\001 \003(\0132"
  "\033.NFMsg.BigMapGridDetailInfo\"\017\n\rReqBigMa"
  "pInfo\"B\n\rAckBigMapInfo\0221\n\016grid_base_info"
  "\030\001 \003(\0132\031.NFMsg.BigMapGridBaseInfo\"F\n\016Req"
  "HoldMapGrid\022\024\n\014map_title_id\030\001 \001(\014\022\036\n\010gui"
  "ld_id\030\002 \001(\0132\014.NFMsg.Ident\"\020\n\016AckHoldMapG"
  "rid\"P\n\016ReqLeaveMapMsg\022\024\n\014map_title_id\030\001 "
  "\001(\014\022(\n\tleave_msg\030\002 \001(\0132\025.NFMsg.BigMapLea"
  "veMsg\"\020\n\016AckLeaveMapMsg\"&\n\016ReqGetMapAwar"
  "d\022\024\n\014map_title_id\030\001 \001(\014\"\020\n\016AckGetMapAwar"
  "d\"%\n\rReqMapHunting\022\024\n\014map_title_id\030\001 \001(\014"
  "\"\017\n\rAckMapHunting\"\"\n\rReqMapKingWar\022\021\n\tma"
  "p_title\030\001 \001(\014\"\"\n\rAckMapKingWar\022\021\n\tmap_ti"
  "tle\030\001 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFMsgExtra_2eproto_deps[1] = {
  &::descriptor_table_NFMsgBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFMsgExtra_2eproto_sccs[20] = {
  &scc_info_AckBigMapGridInfo_NFMsgExtra_2eproto.base,
  &scc_info_AckBigMapInfo_NFMsgExtra_2eproto.base,
  &scc_info_AckGetMapAward_NFMsgExtra_2eproto.base,
  &scc_info_AckHoldMapGrid_NFMsgExtra_2eproto.base,
  &scc_info_AckLeaveMapMsg_NFMsgExtra_2eproto.base,
  &scc_info_AckMapHunting_NFMsgExtra_2eproto.base,
  &scc_info_AckMapKingWar_NFMsgExtra_2eproto.base,
  &scc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto.base,
  &scc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto.base,
  &scc_info_BigMapLeaveMsg_NFMsgExtra_2eproto.base,
  &scc_info_BigMapWarHistory_NFMsgExtra_2eproto.base,
  &scc_info_GridClanBaseInfo_NFMsgExtra_2eproto.base,
  &scc_info_ReqAIOnwer_NFMsgExtra_2eproto.base,
  &scc_info_ReqBigMapGridInfo_NFMsgExtra_2eproto.base,
  &scc_info_ReqBigMapInfo_NFMsgExtra_2eproto.base,
  &scc_info_ReqGetMapAward_NFMsgExtra_2eproto.base,
  &scc_info_ReqHoldMapGrid_NFMsgExtra_2eproto.base,
  &scc_info_ReqLeaveMapMsg_NFMsgExtra_2eproto.base,
  &scc_info_ReqMapHunting_NFMsgExtra_2eproto.base,
  &scc_info_ReqMapKingWar_NFMsgExtra_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFMsgExtra_2eproto_once;
static bool descriptor_table_NFMsgExtra_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgExtra_2eproto = {
  &descriptor_table_NFMsgExtra_2eproto_initialized, descriptor_table_protodef_NFMsgExtra_2eproto, "NFMsgExtra.proto", 1457,
  &descriptor_table_NFMsgExtra_2eproto_once, descriptor_table_NFMsgExtra_2eproto_sccs, descriptor_table_NFMsgExtra_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_NFMsgExtra_2eproto::offsets,
  file_level_metadata_NFMsgExtra_2eproto, 20, file_level_enum_descriptors_NFMsgExtra_2eproto, file_level_service_descriptors_NFMsgExtra_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFMsgExtra_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFMsgExtra_2eproto), true);
namespace NFMsg {

// ===================================================================

void ReqAIOnwer::InitAsDefaultInstance() {
  ::NFMsg::_ReqAIOnwer_default_instance_._instance.get_mutable()->ai_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAIOnwer::_Internal {
 public:
  static const ::NFMsg::Ident& ai_id(const ReqAIOnwer* msg);
};

const ::NFMsg::Ident&
ReqAIOnwer::_Internal::ai_id(const ReqAIOnwer* msg) {
  return *msg->ai_id_;
}
void ReqAIOnwer::clear_ai_id() {
  if (GetArenaNoVirtual() == nullptr && ai_id_ != nullptr) {
    delete ai_id_;
  }
  ai_id_ = nullptr;
}
ReqAIOnwer::ReqAIOnwer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAIOnwer)
}
ReqAIOnwer::ReqAIOnwer(const ReqAIOnwer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ai_id()) {
    ai_id_ = new ::NFMsg::Ident(*from.ai_id_);
  } else {
    ai_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAIOnwer)
}

void ReqAIOnwer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAIOnwer_NFMsgExtra_2eproto.base);
  ai_id_ = nullptr;
}

ReqAIOnwer::~ReqAIOnwer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAIOnwer)
  SharedDtor();
}

void ReqAIOnwer::SharedDtor() {
  if (this != internal_default_instance()) delete ai_id_;
}

void ReqAIOnwer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAIOnwer& ReqAIOnwer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAIOnwer_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqAIOnwer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAIOnwer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ai_id_ != nullptr) {
    delete ai_id_;
  }
  ai_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAIOnwer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident ai_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAIOnwer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAIOnwer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident ai_id = 1;
  if (this->has_ai_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ai_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAIOnwer)
  return target;
}

size_t ReqAIOnwer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAIOnwer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident ai_id = 1;
  if (this->has_ai_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ai_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAIOnwer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAIOnwer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAIOnwer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAIOnwer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAIOnwer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAIOnwer)
    MergeFrom(*source);
  }
}

void ReqAIOnwer::MergeFrom(const ReqAIOnwer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAIOnwer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ai_id()) {
    _internal_mutable_ai_id()->::NFMsg::Ident::MergeFrom(from._internal_ai_id());
  }
}

void ReqAIOnwer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAIOnwer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAIOnwer::CopyFrom(const ReqAIOnwer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAIOnwer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAIOnwer::IsInitialized() const {
  return true;
}

void ReqAIOnwer::InternalSwap(ReqAIOnwer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ai_id_, other->ai_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAIOnwer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridClanBaseInfo::InitAsDefaultInstance() {
  ::NFMsg::_GridClanBaseInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class GridClanBaseInfo::_Internal {
 public:
  static const ::NFMsg::Ident& id(const GridClanBaseInfo* msg);
};

const ::NFMsg::Ident&
GridClanBaseInfo::_Internal::id(const GridClanBaseInfo* msg) {
  return *msg->id_;
}
void GridClanBaseInfo::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
GridClanBaseInfo::GridClanBaseInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.GridClanBaseInfo)
}
GridClanBaseInfo::GridClanBaseInfo(const GridClanBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&level_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.GridClanBaseInfo)
}

void GridClanBaseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridClanBaseInfo_NFMsgExtra_2eproto.base);
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&id_)) + sizeof(resource_));
}

GridClanBaseInfo::~GridClanBaseInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.GridClanBaseInfo)
  SharedDtor();
}

void GridClanBaseInfo::SharedDtor() {
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void GridClanBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridClanBaseInfo& GridClanBaseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridClanBaseInfo_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void GridClanBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.GridClanBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&level_)) + sizeof(resource_));
  _internal_metadata_.Clear();
}

const char* GridClanBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes icon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_icon(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridClanBaseInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.GridClanBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target, stream);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_count(), target);
  }

  // int32 resource = 4;
  if (this->resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_resource(), target);
  }

  // bytes icon = 5;
  if (this->icon().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.GridClanBaseInfo)
  return target;
}

size_t GridClanBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.GridClanBaseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes icon = 5;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_icon());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  // int32 resource = 4;
  if (this->resource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resource());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridClanBaseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.GridClanBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GridClanBaseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridClanBaseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.GridClanBaseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.GridClanBaseInfo)
    MergeFrom(*source);
  }
}

void GridClanBaseInfo::MergeFrom(const GridClanBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.GridClanBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.resource() != 0) {
    _internal_set_resource(from._internal_resource());
  }
}

void GridClanBaseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.GridClanBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridClanBaseInfo::CopyFrom(const GridClanBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.GridClanBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridClanBaseInfo::IsInitialized() const {
  return true;
}

void GridClanBaseInfo::InternalSwap(GridClanBaseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(count_, other->count_);
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GridClanBaseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqBigMapGridInfo::InitAsDefaultInstance() {
}
class ReqBigMapGridInfo::_Internal {
 public:
};

ReqBigMapGridInfo::ReqBigMapGridInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqBigMapGridInfo)
}
ReqBigMapGridInfo::ReqBigMapGridInfo(const ReqBigMapGridInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      map_title_id_(from.map_title_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqBigMapGridInfo)
}

void ReqBigMapGridInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqBigMapGridInfo_NFMsgExtra_2eproto.base);
}

ReqBigMapGridInfo::~ReqBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqBigMapGridInfo)
  SharedDtor();
}

void ReqBigMapGridInfo::SharedDtor() {
}

void ReqBigMapGridInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqBigMapGridInfo& ReqBigMapGridInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqBigMapGridInfo_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqBigMapGridInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.Clear();
  _internal_metadata_.Clear();
}

const char* ReqBigMapGridInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes map_title_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_add_map_title_id(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqBigMapGridInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes map_title_id = 1;
  for (int i = 0, n = this->_internal_map_title_id_size(); i < n; i++) {
    const auto& s = this->_internal_map_title_id(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqBigMapGridInfo)
  return target;
}

size_t ReqBigMapGridInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqBigMapGridInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes map_title_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(map_title_id_.size());
  for (int i = 0, n = map_title_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      map_title_id_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBigMapGridInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBigMapGridInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBigMapGridInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqBigMapGridInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqBigMapGridInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapGridInfo::MergeFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_title_id_.MergeFrom(from.map_title_id_);
}

void ReqBigMapGridInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapGridInfo::CopyFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapGridInfo::IsInitialized() const {
  return true;
}

void ReqBigMapGridInfo::InternalSwap(ReqBigMapGridInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_title_id_.InternalSwap(&other->map_title_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBigMapGridInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BigMapGridBaseInfo::InitAsDefaultInstance() {
  ::NFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->guild_info_ = const_cast< ::NFMsg::GridClanBaseInfo*>(
      ::NFMsg::GridClanBaseInfo::internal_default_instance());
  ::NFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->kingwarrer_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->hurter_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class BigMapGridBaseInfo::_Internal {
 public:
  static const ::NFMsg::GridClanBaseInfo& guild_info(const BigMapGridBaseInfo* msg);
  static const ::NFMsg::Ident& kingwarrer(const BigMapGridBaseInfo* msg);
  static const ::NFMsg::Ident& hurter(const BigMapGridBaseInfo* msg);
};

const ::NFMsg::GridClanBaseInfo&
BigMapGridBaseInfo::_Internal::guild_info(const BigMapGridBaseInfo* msg) {
  return *msg->guild_info_;
}
const ::NFMsg::Ident&
BigMapGridBaseInfo::_Internal::kingwarrer(const BigMapGridBaseInfo* msg) {
  return *msg->kingwarrer_;
}
const ::NFMsg::Ident&
BigMapGridBaseInfo::_Internal::hurter(const BigMapGridBaseInfo* msg) {
  return *msg->hurter_;
}
void BigMapGridBaseInfo::clear_kingwarrer() {
  if (GetArenaNoVirtual() == nullptr && kingwarrer_ != nullptr) {
    delete kingwarrer_;
  }
  kingwarrer_ = nullptr;
}
void BigMapGridBaseInfo::clear_hurter() {
  if (GetArenaNoVirtual() == nullptr && hurter_ != nullptr) {
    delete hurter_;
  }
  hurter_ = nullptr;
}
BigMapGridBaseInfo::BigMapGridBaseInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapGridBaseInfo)
}
BigMapGridBaseInfo::BigMapGridBaseInfo(const BigMapGridBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_guild_info()) {
    guild_info_ = new ::NFMsg::GridClanBaseInfo(*from.guild_info_);
  } else {
    guild_info_ = nullptr;
  }
  if (from._internal_has_kingwarrer()) {
    kingwarrer_ = new ::NFMsg::Ident(*from.kingwarrer_);
  } else {
    kingwarrer_ = nullptr;
  }
  if (from._internal_has_hurter()) {
    hurter_ = new ::NFMsg::Ident(*from.hurter_);
  } else {
    hurter_ = nullptr;
  }
  ::memcpy(&kingwar_time_, &from.kingwar_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&hurting_time_) -
    reinterpret_cast<char*>(&kingwar_time_)) + sizeof(hurting_time_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapGridBaseInfo)
}

void BigMapGridBaseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hurting_time_) -
      reinterpret_cast<char*>(&guild_info_)) + sizeof(hurting_time_));
}

BigMapGridBaseInfo::~BigMapGridBaseInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapGridBaseInfo)
  SharedDtor();
}

void BigMapGridBaseInfo::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_info_;
  if (this != internal_default_instance()) delete kingwarrer_;
  if (this != internal_default_instance()) delete hurter_;
}

void BigMapGridBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigMapGridBaseInfo& BigMapGridBaseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigMapGridBaseInfo_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void BigMapGridBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapGridBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && guild_info_ != nullptr) {
    delete guild_info_;
  }
  guild_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kingwarrer_ != nullptr) {
    delete kingwarrer_;
  }
  kingwarrer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hurter_ != nullptr) {
    delete hurter_;
  }
  hurter_ = nullptr;
  ::memset(&kingwar_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hurting_time_) -
      reinterpret_cast<char*>(&kingwar_time_)) + sizeof(hurting_time_));
  _internal_metadata_.Clear();
}

const char* BigMapGridBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.GridClanBaseInfo guild_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kingwar_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          kingwar_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident kingwarrer = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_kingwarrer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hurting_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          hurting_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident hurter = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_hurter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigMapGridBaseInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapGridBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .NFMsg.GridClanBaseInfo guild_info = 2;
  if (this->has_guild_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::guild_info(this), target, stream);
  }

  // int32 kingwar_time = 10;
  if (this->kingwar_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_kingwar_time(), target);
  }

  // .NFMsg.Ident kingwarrer = 11;
  if (this->has_kingwarrer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::kingwarrer(this), target, stream);
  }

  // int32 hurting_time = 20;
  if (this->hurting_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_hurting_time(), target);
  }

  // .NFMsg.Ident hurter = 21;
  if (this->has_hurter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::hurter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapGridBaseInfo)
  return target;
}

size_t BigMapGridBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapGridBaseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_id());
  }

  // .NFMsg.GridClanBaseInfo guild_info = 2;
  if (this->has_guild_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guild_info_);
  }

  // .NFMsg.Ident kingwarrer = 11;
  if (this->has_kingwarrer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kingwarrer_);
  }

  // .NFMsg.Ident hurter = 21;
  if (this->has_hurter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hurter_);
  }

  // int32 kingwar_time = 10;
  if (this->kingwar_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kingwar_time());
  }

  // int32 hurting_time = 20;
  if (this->hurting_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hurting_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapGridBaseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapGridBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapGridBaseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigMapGridBaseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapGridBaseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapGridBaseInfo)
    MergeFrom(*source);
  }
}

void BigMapGridBaseInfo::MergeFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapGridBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_guild_info()) {
    _internal_mutable_guild_info()->::NFMsg::GridClanBaseInfo::MergeFrom(from._internal_guild_info());
  }
  if (from.has_kingwarrer()) {
    _internal_mutable_kingwarrer()->::NFMsg::Ident::MergeFrom(from._internal_kingwarrer());
  }
  if (from.has_hurter()) {
    _internal_mutable_hurter()->::NFMsg::Ident::MergeFrom(from._internal_hurter());
  }
  if (from.kingwar_time() != 0) {
    _internal_set_kingwar_time(from._internal_kingwar_time());
  }
  if (from.hurting_time() != 0) {
    _internal_set_hurting_time(from._internal_hurting_time());
  }
}

void BigMapGridBaseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridBaseInfo::CopyFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridBaseInfo::IsInitialized() const {
  return true;
}

void BigMapGridBaseInfo::InternalSwap(BigMapGridBaseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_info_, other->guild_info_);
  swap(kingwarrer_, other->kingwarrer_);
  swap(hurter_, other->hurter_);
  swap(kingwar_time_, other->kingwar_time_);
  swap(hurting_time_, other->hurting_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigMapGridBaseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BigMapLeaveMsg::InitAsDefaultInstance() {
  ::NFMsg::_BigMapLeaveMsg_default_instance_._instance.get_mutable()->owner_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class BigMapLeaveMsg::_Internal {
 public:
  static const ::NFMsg::Ident& owner(const BigMapLeaveMsg* msg);
};

const ::NFMsg::Ident&
BigMapLeaveMsg::_Internal::owner(const BigMapLeaveMsg* msg) {
  return *msg->owner_;
}
void BigMapLeaveMsg::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
BigMapLeaveMsg::BigMapLeaveMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapLeaveMsg)
}
BigMapLeaveMsg::BigMapLeaveMsg(const BigMapLeaveMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_name().empty()) {
    owner_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from._internal_has_owner()) {
    owner_ = new ::NFMsg::Ident(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  ::memcpy(&msg_time_, &from.msg_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_level_) -
    reinterpret_cast<char*>(&msg_time_)) + sizeof(owner_level_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapLeaveMsg)
}

void BigMapLeaveMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigMapLeaveMsg_NFMsgExtra_2eproto.base);
  owner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_level_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(owner_level_));
}

BigMapLeaveMsg::~BigMapLeaveMsg() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapLeaveMsg)
  SharedDtor();
}

void BigMapLeaveMsg::SharedDtor() {
  owner_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void BigMapLeaveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigMapLeaveMsg& BigMapLeaveMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigMapLeaveMsg_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void BigMapLeaveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapLeaveMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  ::memset(&msg_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_level_) -
      reinterpret_cast<char*>(&msg_time_)) + sizeof(owner_level_));
  _internal_metadata_.Clear();
}

const char* BigMapLeaveMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_owner_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_msg_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msg_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          owner_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigMapLeaveMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapLeaveMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident owner = 1;
  if (this->has_owner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::owner(this), target, stream);
  }

  // bytes owner_name = 2;
  if (this->owner_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_owner_name(), target);
  }

  // bytes msg_data = 3;
  if (this->msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg_data(), target);
  }

  // int32 msg_time = 4;
  if (this->msg_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_msg_time(), target);
  }

  // int32 owner_level = 5;
  if (this->owner_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_owner_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapLeaveMsg)
  return target;
}

size_t BigMapLeaveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapLeaveMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_name = 2;
  if (this->owner_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_owner_name());
  }

  // bytes msg_data = 3;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // .NFMsg.Ident owner = 1;
  if (this->has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // int32 msg_time = 4;
  if (this->msg_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_time());
  }

  // int32 owner_level = 5;
  if (this->owner_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapLeaveMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapLeaveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapLeaveMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigMapLeaveMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapLeaveMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapLeaveMsg)
    MergeFrom(*source);
  }
}

void BigMapLeaveMsg::MergeFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapLeaveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_name().size() > 0) {

    owner_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_owner()) {
    _internal_mutable_owner()->::NFMsg::Ident::MergeFrom(from._internal_owner());
  }
  if (from.msg_time() != 0) {
    _internal_set_msg_time(from._internal_msg_time());
  }
  if (from.owner_level() != 0) {
    _internal_set_owner_level(from._internal_owner_level());
  }
}

void BigMapLeaveMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapLeaveMsg::CopyFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapLeaveMsg::IsInitialized() const {
  return true;
}

void BigMapLeaveMsg::InternalSwap(BigMapLeaveMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_name_.Swap(&other->owner_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(owner_, other->owner_);
  swap(msg_time_, other->msg_time_);
  swap(owner_level_, other->owner_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigMapLeaveMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BigMapWarHistory::InitAsDefaultInstance() {
  ::NFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->red_info_ = const_cast< ::NFMsg::GridClanBaseInfo*>(
      ::NFMsg::GridClanBaseInfo::internal_default_instance());
  ::NFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->blue_info_ = const_cast< ::NFMsg::GridClanBaseInfo*>(
      ::NFMsg::GridClanBaseInfo::internal_default_instance());
  ::NFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->winner_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class BigMapWarHistory::_Internal {
 public:
  static const ::NFMsg::GridClanBaseInfo& red_info(const BigMapWarHistory* msg);
  static const ::NFMsg::GridClanBaseInfo& blue_info(const BigMapWarHistory* msg);
  static const ::NFMsg::Ident& winner_id(const BigMapWarHistory* msg);
};

const ::NFMsg::GridClanBaseInfo&
BigMapWarHistory::_Internal::red_info(const BigMapWarHistory* msg) {
  return *msg->red_info_;
}
const ::NFMsg::GridClanBaseInfo&
BigMapWarHistory::_Internal::blue_info(const BigMapWarHistory* msg) {
  return *msg->blue_info_;
}
const ::NFMsg::Ident&
BigMapWarHistory::_Internal::winner_id(const BigMapWarHistory* msg) {
  return *msg->winner_id_;
}
void BigMapWarHistory::clear_winner_id() {
  if (GetArenaNoVirtual() == nullptr && winner_id_ != nullptr) {
    delete winner_id_;
  }
  winner_id_ = nullptr;
}
BigMapWarHistory::BigMapWarHistory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapWarHistory)
}
BigMapWarHistory::BigMapWarHistory(const BigMapWarHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_red_info()) {
    red_info_ = new ::NFMsg::GridClanBaseInfo(*from.red_info_);
  } else {
    red_info_ = nullptr;
  }
  if (from._internal_has_blue_info()) {
    blue_info_ = new ::NFMsg::GridClanBaseInfo(*from.blue_info_);
  } else {
    blue_info_ = nullptr;
  }
  if (from._internal_has_winner_id()) {
    winner_id_ = new ::NFMsg::Ident(*from.winner_id_);
  } else {
    winner_id_ = nullptr;
  }
  war_time_ = from.war_time_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapWarHistory)
}

void BigMapWarHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigMapWarHistory_NFMsgExtra_2eproto.base);
  ::memset(&red_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&war_time_) -
      reinterpret_cast<char*>(&red_info_)) + sizeof(war_time_));
}

BigMapWarHistory::~BigMapWarHistory() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapWarHistory)
  SharedDtor();
}

void BigMapWarHistory::SharedDtor() {
  if (this != internal_default_instance()) delete red_info_;
  if (this != internal_default_instance()) delete blue_info_;
  if (this != internal_default_instance()) delete winner_id_;
}

void BigMapWarHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigMapWarHistory& BigMapWarHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigMapWarHistory_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void BigMapWarHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapWarHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && red_info_ != nullptr) {
    delete red_info_;
  }
  red_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && blue_info_ != nullptr) {
    delete blue_info_;
  }
  blue_info_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && winner_id_ != nullptr) {
    delete winner_id_;
  }
  winner_id_ = nullptr;
  war_time_ = 0;
  _internal_metadata_.Clear();
}

const char* BigMapWarHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.GridClanBaseInfo red_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_red_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.GridClanBaseInfo blue_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blue_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident winner_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_winner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 war_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          war_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigMapWarHistory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapWarHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.GridClanBaseInfo red_info = 1;
  if (this->has_red_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::red_info(this), target, stream);
  }

  // .NFMsg.GridClanBaseInfo blue_info = 2;
  if (this->has_blue_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::blue_info(this), target, stream);
  }

  // .NFMsg.Ident winner_id = 10;
  if (this->has_winner_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::winner_id(this), target, stream);
  }

  // int32 war_time = 11;
  if (this->war_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_war_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapWarHistory)
  return target;
}

size_t BigMapWarHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapWarHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.GridClanBaseInfo red_info = 1;
  if (this->has_red_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *red_info_);
  }

  // .NFMsg.GridClanBaseInfo blue_info = 2;
  if (this->has_blue_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blue_info_);
  }

  // .NFMsg.Ident winner_id = 10;
  if (this->has_winner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *winner_id_);
  }

  // int32 war_time = 11;
  if (this->war_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_war_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapWarHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapWarHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapWarHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigMapWarHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapWarHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapWarHistory)
    MergeFrom(*source);
  }
}

void BigMapWarHistory::MergeFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapWarHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_red_info()) {
    _internal_mutable_red_info()->::NFMsg::GridClanBaseInfo::MergeFrom(from._internal_red_info());
  }
  if (from.has_blue_info()) {
    _internal_mutable_blue_info()->::NFMsg::GridClanBaseInfo::MergeFrom(from._internal_blue_info());
  }
  if (from.has_winner_id()) {
    _internal_mutable_winner_id()->::NFMsg::Ident::MergeFrom(from._internal_winner_id());
  }
  if (from.war_time() != 0) {
    _internal_set_war_time(from._internal_war_time());
  }
}

void BigMapWarHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapWarHistory::CopyFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapWarHistory::IsInitialized() const {
  return true;
}

void BigMapWarHistory::InternalSwap(BigMapWarHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(red_info_, other->red_info_);
  swap(blue_info_, other->blue_info_);
  swap(winner_id_, other->winner_id_);
  swap(war_time_, other->war_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigMapWarHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BigMapGridDetailInfo::InitAsDefaultInstance() {
  ::NFMsg::_BigMapGridDetailInfo_default_instance_._instance.get_mutable()->grid_base_info_ = const_cast< ::NFMsg::BigMapGridBaseInfo*>(
      ::NFMsg::BigMapGridBaseInfo::internal_default_instance());
}
class BigMapGridDetailInfo::_Internal {
 public:
  static const ::NFMsg::BigMapGridBaseInfo& grid_base_info(const BigMapGridDetailInfo* msg);
};

const ::NFMsg::BigMapGridBaseInfo&
BigMapGridDetailInfo::_Internal::grid_base_info(const BigMapGridDetailInfo* msg) {
  return *msg->grid_base_info_;
}
BigMapGridDetailInfo::BigMapGridDetailInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapGridDetailInfo)
}
BigMapGridDetailInfo::BigMapGridDetailInfo(const BigMapGridDetailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stay_guid_list_(from.stay_guid_list_),
      leave_msg_(from.leave_msg_),
      war_history_(from.war_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_grid_base_info()) {
    grid_base_info_ = new ::NFMsg::BigMapGridBaseInfo(*from.grid_base_info_);
  } else {
    grid_base_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapGridDetailInfo)
}

void BigMapGridDetailInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto.base);
  grid_base_info_ = nullptr;
}

BigMapGridDetailInfo::~BigMapGridDetailInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapGridDetailInfo)
  SharedDtor();
}

void BigMapGridDetailInfo::SharedDtor() {
  if (this != internal_default_instance()) delete grid_base_info_;
}

void BigMapGridDetailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigMapGridDetailInfo& BigMapGridDetailInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigMapGridDetailInfo_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void BigMapGridDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapGridDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stay_guid_list_.Clear();
  leave_msg_.Clear();
  war_history_.Clear();
  if (GetArenaNoVirtual() == nullptr && grid_base_info_ != nullptr) {
    delete grid_base_info_;
  }
  grid_base_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BigMapGridDetailInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid_base_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.GridClanBaseInfo stay_guid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stay_guid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leave_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.BigMapWarHistory war_history = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_war_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigMapGridDetailInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapGridDetailInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (this->has_grid_base_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::grid_base_info(this), target, stream);
  }

  // repeated .NFMsg.GridClanBaseInfo stay_guid_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stay_guid_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_stay_guid_list(i), target, stream);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leave_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_leave_msg(i), target, stream);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_war_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_war_history(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapGridDetailInfo)
  return target;
}

size_t BigMapGridDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapGridDetailInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.GridClanBaseInfo stay_guid_list = 2;
  total_size += 1UL * this->_internal_stay_guid_list_size();
  for (const auto& msg : this->stay_guid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  total_size += 1UL * this->_internal_leave_msg_size();
  for (const auto& msg : this->leave_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  total_size += 1UL * this->_internal_war_history_size();
  for (const auto& msg : this->war_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (this->has_grid_base_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_base_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapGridDetailInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapGridDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapGridDetailInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigMapGridDetailInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapGridDetailInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapGridDetailInfo)
    MergeFrom(*source);
  }
}

void BigMapGridDetailInfo::MergeFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapGridDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stay_guid_list_.MergeFrom(from.stay_guid_list_);
  leave_msg_.MergeFrom(from.leave_msg_);
  war_history_.MergeFrom(from.war_history_);
  if (from.has_grid_base_info()) {
    _internal_mutable_grid_base_info()->::NFMsg::BigMapGridBaseInfo::MergeFrom(from._internal_grid_base_info());
  }
}

void BigMapGridDetailInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridDetailInfo::CopyFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridDetailInfo::IsInitialized() const {
  return true;
}

void BigMapGridDetailInfo::InternalSwap(BigMapGridDetailInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stay_guid_list_.InternalSwap(&other->stay_guid_list_);
  leave_msg_.InternalSwap(&other->leave_msg_);
  war_history_.InternalSwap(&other->war_history_);
  swap(grid_base_info_, other->grid_base_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigMapGridDetailInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckBigMapGridInfo::InitAsDefaultInstance() {
}
class AckBigMapGridInfo::_Internal {
 public:
};

AckBigMapGridInfo::AckBigMapGridInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckBigMapGridInfo)
}
AckBigMapGridInfo::AckBigMapGridInfo(const AckBigMapGridInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      map_data_(from.map_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckBigMapGridInfo)
}

void AckBigMapGridInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckBigMapGridInfo_NFMsgExtra_2eproto.base);
}

AckBigMapGridInfo::~AckBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.AckBigMapGridInfo)
  SharedDtor();
}

void AckBigMapGridInfo::SharedDtor() {
}

void AckBigMapGridInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckBigMapGridInfo& AckBigMapGridInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckBigMapGridInfo_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void AckBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckBigMapGridInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.Clear();
  _internal_metadata_.Clear();
}

const char* AckBigMapGridInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckBigMapGridInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_map_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckBigMapGridInfo)
  return target;
}

size_t AckBigMapGridInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckBigMapGridInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  total_size += 1UL * this->_internal_map_data_size();
  for (const auto& msg : this->map_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBigMapGridInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBigMapGridInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBigMapGridInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckBigMapGridInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckBigMapGridInfo)
    MergeFrom(*source);
  }
}

void AckBigMapGridInfo::MergeFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_data_.MergeFrom(from.map_data_);
}

void AckBigMapGridInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapGridInfo::CopyFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapGridInfo::IsInitialized() const {
  return true;
}

void AckBigMapGridInfo::InternalSwap(AckBigMapGridInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_data_.InternalSwap(&other->map_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBigMapGridInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqBigMapInfo::InitAsDefaultInstance() {
}
class ReqBigMapInfo::_Internal {
 public:
};

ReqBigMapInfo::ReqBigMapInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqBigMapInfo)
}
ReqBigMapInfo::ReqBigMapInfo(const ReqBigMapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqBigMapInfo)
}

void ReqBigMapInfo::SharedCtor() {
}

ReqBigMapInfo::~ReqBigMapInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqBigMapInfo)
  SharedDtor();
}

void ReqBigMapInfo::SharedDtor() {
}

void ReqBigMapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqBigMapInfo& ReqBigMapInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqBigMapInfo_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqBigMapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ReqBigMapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqBigMapInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqBigMapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqBigMapInfo)
  return target;
}

size_t ReqBigMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqBigMapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBigMapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBigMapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqBigMapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqBigMapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqBigMapInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapInfo::MergeFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqBigMapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapInfo::CopyFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapInfo::IsInitialized() const {
  return true;
}

void ReqBigMapInfo::InternalSwap(ReqBigMapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqBigMapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckBigMapInfo::InitAsDefaultInstance() {
}
class AckBigMapInfo::_Internal {
 public:
};

AckBigMapInfo::AckBigMapInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckBigMapInfo)
}
AckBigMapInfo::AckBigMapInfo(const AckBigMapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      grid_base_info_(from.grid_base_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckBigMapInfo)
}

void AckBigMapInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckBigMapInfo_NFMsgExtra_2eproto.base);
}

AckBigMapInfo::~AckBigMapInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.AckBigMapInfo)
  SharedDtor();
}

void AckBigMapInfo::SharedDtor() {
}

void AckBigMapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckBigMapInfo& AckBigMapInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckBigMapInfo_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void AckBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckBigMapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grid_base_info_.Clear();
  _internal_metadata_.Clear();
}

const char* AckBigMapInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grid_base_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckBigMapInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckBigMapInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_grid_base_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_grid_base_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckBigMapInfo)
  return target;
}

size_t AckBigMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckBigMapInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  total_size += 1UL * this->_internal_grid_base_info_size();
  for (const auto& msg : this->grid_base_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBigMapInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBigMapInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckBigMapInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckBigMapInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckBigMapInfo)
    MergeFrom(*source);
  }
}

void AckBigMapInfo::MergeFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grid_base_info_.MergeFrom(from.grid_base_info_);
}

void AckBigMapInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapInfo::CopyFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapInfo::IsInitialized() const {
  return true;
}

void AckBigMapInfo::InternalSwap(AckBigMapInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  grid_base_info_.InternalSwap(&other->grid_base_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckBigMapInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqHoldMapGrid::InitAsDefaultInstance() {
  ::NFMsg::_ReqHoldMapGrid_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqHoldMapGrid::_Internal {
 public:
  static const ::NFMsg::Ident& guild_id(const ReqHoldMapGrid* msg);
};

const ::NFMsg::Ident&
ReqHoldMapGrid::_Internal::guild_id(const ReqHoldMapGrid* msg) {
  return *msg->guild_id_;
}
void ReqHoldMapGrid::clear_guild_id() {
  if (GetArenaNoVirtual() == nullptr && guild_id_ != nullptr) {
    delete guild_id_;
  }
  guild_id_ = nullptr;
}
ReqHoldMapGrid::ReqHoldMapGrid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHoldMapGrid)
}
ReqHoldMapGrid::ReqHoldMapGrid(const ReqHoldMapGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_title_id().empty()) {
    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from._internal_has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHoldMapGrid)
}

void ReqHoldMapGrid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqHoldMapGrid_NFMsgExtra_2eproto.base);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guild_id_ = nullptr;
}

ReqHoldMapGrid::~ReqHoldMapGrid() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHoldMapGrid)
  SharedDtor();
}

void ReqHoldMapGrid::SharedDtor() {
  map_title_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqHoldMapGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqHoldMapGrid& ReqHoldMapGrid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqHoldMapGrid_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHoldMapGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && guild_id_ != nullptr) {
    delete guild_id_;
  }
  guild_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqHoldMapGrid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes map_title_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_map_title_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Ident guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHoldMapGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_map_title_id(), target);
  }

  // .NFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::guild_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHoldMapGrid)
  return target;
}

size_t ReqHoldMapGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHoldMapGrid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map_title_id());
  }

  // .NFMsg.Ident guild_id = 2;
  if (this->has_guild_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHoldMapGrid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHoldMapGrid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqHoldMapGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHoldMapGrid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHoldMapGrid)
    MergeFrom(*source);
  }
}

void ReqHoldMapGrid::MergeFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_guild_id()) {
    _internal_mutable_guild_id()->::NFMsg::Ident::MergeFrom(from._internal_guild_id());
  }
}

void ReqHoldMapGrid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoldMapGrid::CopyFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoldMapGrid::IsInitialized() const {
  return true;
}

void ReqHoldMapGrid::InternalSwap(ReqHoldMapGrid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_title_id_.Swap(&other->map_title_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqHoldMapGrid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckHoldMapGrid::InitAsDefaultInstance() {
}
class AckHoldMapGrid::_Internal {
 public:
};

AckHoldMapGrid::AckHoldMapGrid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckHoldMapGrid)
}
AckHoldMapGrid::AckHoldMapGrid(const AckHoldMapGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckHoldMapGrid)
}

void AckHoldMapGrid::SharedCtor() {
}

AckHoldMapGrid::~AckHoldMapGrid() {
  // @@protoc_insertion_point(destructor:NFMsg.AckHoldMapGrid)
  SharedDtor();
}

void AckHoldMapGrid::SharedDtor() {
}

void AckHoldMapGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckHoldMapGrid& AckHoldMapGrid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckHoldMapGrid_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void AckHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckHoldMapGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AckHoldMapGrid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckHoldMapGrid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckHoldMapGrid)
  return target;
}

size_t AckHoldMapGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckHoldMapGrid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckHoldMapGrid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const AckHoldMapGrid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckHoldMapGrid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckHoldMapGrid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckHoldMapGrid)
    MergeFrom(*source);
  }
}

void AckHoldMapGrid::MergeFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckHoldMapGrid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoldMapGrid::CopyFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoldMapGrid::IsInitialized() const {
  return true;
}

void AckHoldMapGrid::InternalSwap(AckHoldMapGrid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckHoldMapGrid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqLeaveMapMsg::InitAsDefaultInstance() {
  ::NFMsg::_ReqLeaveMapMsg_default_instance_._instance.get_mutable()->leave_msg_ = const_cast< ::NFMsg::BigMapLeaveMsg*>(
      ::NFMsg::BigMapLeaveMsg::internal_default_instance());
}
class ReqLeaveMapMsg::_Internal {
 public:
  static const ::NFMsg::BigMapLeaveMsg& leave_msg(const ReqLeaveMapMsg* msg);
};

const ::NFMsg::BigMapLeaveMsg&
ReqLeaveMapMsg::_Internal::leave_msg(const ReqLeaveMapMsg* msg) {
  return *msg->leave_msg_;
}
ReqLeaveMapMsg::ReqLeaveMapMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqLeaveMapMsg)
}
ReqLeaveMapMsg::ReqLeaveMapMsg(const ReqLeaveMapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_title_id().empty()) {
    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from._internal_has_leave_msg()) {
    leave_msg_ = new ::NFMsg::BigMapLeaveMsg(*from.leave_msg_);
  } else {
    leave_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqLeaveMapMsg)
}

void ReqLeaveMapMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqLeaveMapMsg_NFMsgExtra_2eproto.base);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leave_msg_ = nullptr;
}

ReqLeaveMapMsg::~ReqLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqLeaveMapMsg)
  SharedDtor();
}

void ReqLeaveMapMsg::SharedDtor() {
  map_title_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leave_msg_;
}

void ReqLeaveMapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqLeaveMapMsg& ReqLeaveMapMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqLeaveMapMsg_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqLeaveMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && leave_msg_ != nullptr) {
    delete leave_msg_;
  }
  leave_msg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqLeaveMapMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes map_title_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_map_title_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.BigMapLeaveMsg leave_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqLeaveMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_map_title_id(), target);
  }

  // .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (this->has_leave_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::leave_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqLeaveMapMsg)
  return target;
}

size_t ReqLeaveMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqLeaveMapMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map_title_id());
  }

  // .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (this->has_leave_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leave_msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveMapMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveMapMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveMapMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqLeaveMapMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqLeaveMapMsg)
    MergeFrom(*source);
  }
}

void ReqLeaveMapMsg::MergeFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_leave_msg()) {
    _internal_mutable_leave_msg()->::NFMsg::BigMapLeaveMsg::MergeFrom(from._internal_leave_msg());
  }
}

void ReqLeaveMapMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveMapMsg::CopyFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveMapMsg::IsInitialized() const {
  return true;
}

void ReqLeaveMapMsg::InternalSwap(ReqLeaveMapMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_title_id_.Swap(&other->map_title_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leave_msg_, other->leave_msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveMapMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckLeaveMapMsg::InitAsDefaultInstance() {
}
class AckLeaveMapMsg::_Internal {
 public:
};

AckLeaveMapMsg::AckLeaveMapMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckLeaveMapMsg)
}
AckLeaveMapMsg::AckLeaveMapMsg(const AckLeaveMapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckLeaveMapMsg)
}

void AckLeaveMapMsg::SharedCtor() {
}

AckLeaveMapMsg::~AckLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:NFMsg.AckLeaveMapMsg)
  SharedDtor();
}

void AckLeaveMapMsg::SharedDtor() {
}

void AckLeaveMapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckLeaveMapMsg& AckLeaveMapMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckLeaveMapMsg_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void AckLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckLeaveMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AckLeaveMapMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckLeaveMapMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckLeaveMapMsg)
  return target;
}

size_t AckLeaveMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckLeaveMapMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckLeaveMapMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLeaveMapMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckLeaveMapMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckLeaveMapMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckLeaveMapMsg)
    MergeFrom(*source);
  }
}

void AckLeaveMapMsg::MergeFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckLeaveMapMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveMapMsg::CopyFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveMapMsg::IsInitialized() const {
  return true;
}

void AckLeaveMapMsg::InternalSwap(AckLeaveMapMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckLeaveMapMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqGetMapAward::InitAsDefaultInstance() {
}
class ReqGetMapAward::_Internal {
 public:
};

ReqGetMapAward::ReqGetMapAward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqGetMapAward)
}
ReqGetMapAward::ReqGetMapAward(const ReqGetMapAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_title_id().empty()) {
    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqGetMapAward)
}

void ReqGetMapAward::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqGetMapAward_NFMsgExtra_2eproto.base);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqGetMapAward::~ReqGetMapAward() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqGetMapAward)
  SharedDtor();
}

void ReqGetMapAward::SharedDtor() {
  map_title_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqGetMapAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqGetMapAward& ReqGetMapAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqGetMapAward_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqGetMapAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReqGetMapAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes map_title_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_map_title_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqGetMapAward::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqGetMapAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_map_title_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqGetMapAward)
  return target;
}

size_t ReqGetMapAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqGetMapAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map_title_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetMapAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetMapAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqGetMapAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqGetMapAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqGetMapAward)
    MergeFrom(*source);
  }
}

void ReqGetMapAward::MergeFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqGetMapAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMapAward::CopyFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMapAward::IsInitialized() const {
  return true;
}

void ReqGetMapAward::InternalSwap(ReqGetMapAward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_title_id_.Swap(&other->map_title_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetMapAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckGetMapAward::InitAsDefaultInstance() {
}
class AckGetMapAward::_Internal {
 public:
};

AckGetMapAward::AckGetMapAward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckGetMapAward)
}
AckGetMapAward::AckGetMapAward(const AckGetMapAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckGetMapAward)
}

void AckGetMapAward::SharedCtor() {
}

AckGetMapAward::~AckGetMapAward() {
  // @@protoc_insertion_point(destructor:NFMsg.AckGetMapAward)
  SharedDtor();
}

void AckGetMapAward::SharedDtor() {
}

void AckGetMapAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckGetMapAward& AckGetMapAward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckGetMapAward_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void AckGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckGetMapAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AckGetMapAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckGetMapAward::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckGetMapAward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckGetMapAward)
  return target;
}

size_t AckGetMapAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckGetMapAward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetMapAward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetMapAward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckGetMapAward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckGetMapAward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckGetMapAward)
    MergeFrom(*source);
  }
}

void AckGetMapAward::MergeFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckGetMapAward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetMapAward::CopyFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetMapAward::IsInitialized() const {
  return true;
}

void AckGetMapAward::InternalSwap(AckGetMapAward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckGetMapAward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqMapHunting::InitAsDefaultInstance() {
}
class ReqMapHunting::_Internal {
 public:
};

ReqMapHunting::ReqMapHunting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqMapHunting)
}
ReqMapHunting::ReqMapHunting(const ReqMapHunting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_title_id().empty()) {
    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqMapHunting)
}

void ReqMapHunting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqMapHunting_NFMsgExtra_2eproto.base);
  map_title_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqMapHunting::~ReqMapHunting() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqMapHunting)
  SharedDtor();
}

void ReqMapHunting::SharedDtor() {
  map_title_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqMapHunting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqMapHunting& ReqMapHunting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqMapHunting_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqMapHunting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReqMapHunting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes map_title_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_map_title_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqMapHunting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqMapHunting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_map_title_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqMapHunting)
  return target;
}

size_t ReqMapHunting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqMapHunting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map_title_id = 1;
  if (this->map_title_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map_title_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqMapHunting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMapHunting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqMapHunting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqMapHunting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqMapHunting)
    MergeFrom(*source);
  }
}

void ReqMapHunting::MergeFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title_id().size() > 0) {

    map_title_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqMapHunting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapHunting::CopyFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapHunting::IsInitialized() const {
  return true;
}

void ReqMapHunting::InternalSwap(ReqMapHunting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_title_id_.Swap(&other->map_title_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqMapHunting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckMapHunting::InitAsDefaultInstance() {
}
class AckMapHunting::_Internal {
 public:
};

AckMapHunting::AckMapHunting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckMapHunting)
}
AckMapHunting::AckMapHunting(const AckMapHunting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckMapHunting)
}

void AckMapHunting::SharedCtor() {
}

AckMapHunting::~AckMapHunting() {
  // @@protoc_insertion_point(destructor:NFMsg.AckMapHunting)
  SharedDtor();
}

void AckMapHunting::SharedDtor() {
}

void AckMapHunting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckMapHunting& AckMapHunting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckMapHunting_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void AckMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckMapHunting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AckMapHunting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckMapHunting::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckMapHunting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckMapHunting)
  return target;
}

size_t AckMapHunting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckMapHunting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMapHunting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMapHunting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckMapHunting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckMapHunting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckMapHunting)
    MergeFrom(*source);
  }
}

void AckMapHunting::MergeFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckMapHunting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapHunting::CopyFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapHunting::IsInitialized() const {
  return true;
}

void AckMapHunting::InternalSwap(AckMapHunting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckMapHunting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqMapKingWar::InitAsDefaultInstance() {
}
class ReqMapKingWar::_Internal {
 public:
};

ReqMapKingWar::ReqMapKingWar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqMapKingWar)
}
ReqMapKingWar::ReqMapKingWar(const ReqMapKingWar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_title().empty()) {
    map_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqMapKingWar)
}

void ReqMapKingWar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqMapKingWar_NFMsgExtra_2eproto.base);
  map_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReqMapKingWar::~ReqMapKingWar() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqMapKingWar)
  SharedDtor();
}

void ReqMapKingWar::SharedDtor() {
  map_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqMapKingWar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqMapKingWar& ReqMapKingWar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqMapKingWar_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void ReqMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqMapKingWar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReqMapKingWar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes map_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_map_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqMapKingWar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqMapKingWar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes map_title = 1;
  if (this->map_title().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_map_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqMapKingWar)
  return target;
}

size_t ReqMapKingWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqMapKingWar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map_title = 1;
  if (this->map_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqMapKingWar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMapKingWar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqMapKingWar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqMapKingWar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqMapKingWar)
    MergeFrom(*source);
  }
}

void ReqMapKingWar::MergeFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title().size() > 0) {

    map_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_);
  }
}

void ReqMapKingWar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapKingWar::CopyFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapKingWar::IsInitialized() const {
  return true;
}

void ReqMapKingWar::InternalSwap(ReqMapKingWar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_title_.Swap(&other->map_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqMapKingWar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckMapKingWar::InitAsDefaultInstance() {
}
class AckMapKingWar::_Internal {
 public:
};

AckMapKingWar::AckMapKingWar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckMapKingWar)
}
AckMapKingWar::AckMapKingWar(const AckMapKingWar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_map_title().empty()) {
    map_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckMapKingWar)
}

void AckMapKingWar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckMapKingWar_NFMsgExtra_2eproto.base);
  map_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AckMapKingWar::~AckMapKingWar() {
  // @@protoc_insertion_point(destructor:NFMsg.AckMapKingWar)
  SharedDtor();
}

void AckMapKingWar::SharedDtor() {
  map_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckMapKingWar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckMapKingWar& AckMapKingWar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckMapKingWar_NFMsgExtra_2eproto.base);
  return *internal_default_instance();
}


void AckMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckMapKingWar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AckMapKingWar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes map_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_map_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckMapKingWar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckMapKingWar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes map_title = 1;
  if (this->map_title().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_map_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckMapKingWar)
  return target;
}

size_t AckMapKingWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckMapKingWar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map_title = 1;
  if (this->map_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMapKingWar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMapKingWar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckMapKingWar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckMapKingWar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckMapKingWar)
    MergeFrom(*source);
  }
}

void AckMapKingWar::MergeFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.map_title().size() > 0) {

    map_title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_title_);
  }
}

void AckMapKingWar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapKingWar::CopyFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapKingWar::IsInitialized() const {
  return true;
}

void AckMapKingWar::InternalSwap(AckMapKingWar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_title_.Swap(&other->map_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AckMapKingWar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAIOnwer* Arena::CreateMaybeMessage< ::NFMsg::ReqAIOnwer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAIOnwer >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::GridClanBaseInfo* Arena::CreateMaybeMessage< ::NFMsg::GridClanBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::GridClanBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqBigMapGridInfo* Arena::CreateMaybeMessage< ::NFMsg::ReqBigMapGridInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqBigMapGridInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::BigMapGridBaseInfo* Arena::CreateMaybeMessage< ::NFMsg::BigMapGridBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapGridBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::BigMapLeaveMsg* Arena::CreateMaybeMessage< ::NFMsg::BigMapLeaveMsg >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapLeaveMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::BigMapWarHistory* Arena::CreateMaybeMessage< ::NFMsg::BigMapWarHistory >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapWarHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::BigMapGridDetailInfo* Arena::CreateMaybeMessage< ::NFMsg::BigMapGridDetailInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapGridDetailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckBigMapGridInfo* Arena::CreateMaybeMessage< ::NFMsg::AckBigMapGridInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckBigMapGridInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqBigMapInfo* Arena::CreateMaybeMessage< ::NFMsg::ReqBigMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqBigMapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckBigMapInfo* Arena::CreateMaybeMessage< ::NFMsg::AckBigMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckBigMapInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqHoldMapGrid* Arena::CreateMaybeMessage< ::NFMsg::ReqHoldMapGrid >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqHoldMapGrid >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckHoldMapGrid* Arena::CreateMaybeMessage< ::NFMsg::AckHoldMapGrid >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckHoldMapGrid >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqLeaveMapMsg* Arena::CreateMaybeMessage< ::NFMsg::ReqLeaveMapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqLeaveMapMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckLeaveMapMsg* Arena::CreateMaybeMessage< ::NFMsg::AckLeaveMapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckLeaveMapMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqGetMapAward* Arena::CreateMaybeMessage< ::NFMsg::ReqGetMapAward >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqGetMapAward >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckGetMapAward* Arena::CreateMaybeMessage< ::NFMsg::AckGetMapAward >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckGetMapAward >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqMapHunting* Arena::CreateMaybeMessage< ::NFMsg::ReqMapHunting >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqMapHunting >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckMapHunting* Arena::CreateMaybeMessage< ::NFMsg::AckMapHunting >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckMapHunting >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqMapKingWar* Arena::CreateMaybeMessage< ::NFMsg::ReqMapKingWar >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqMapKingWar >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckMapKingWar* Arena::CreateMaybeMessage< ::NFMsg::AckMapKingWar >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckMapKingWar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
